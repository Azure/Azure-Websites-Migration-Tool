<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SqlServer.Management.Sdk.Sfc</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.DifferencingService">
            <summary>
            The factory to obtain an Differencer.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Differencing.DifferencingService.Singleton">
            <summary>
            Implementation note:
            This is a temporary implementation of DifferencingService. The implementation should be 
            replaced by MFx "Service" mechanism when it  is due. For now, the only client we are
            attempting to support is Smo. This class look up known Smo Providers using reflection.
            All provider is loaded from Smo's dll.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.DifferencingService.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.DifferencingService.CreateDifferencer">
            <summary>
            Create a Differencer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.DifferencingService.CreateDifferencer(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry)">
            <summary>
            Create a Differencer, with specified providers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.DifferencingService.CreateDefaultRegistry">
            <summary>
            Create a ProviderRegistry with default provider registered.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.DifferencingService.Service">
            <summary>
            Singleton method to           obtain the service
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer">
            <summary>
            This interface defines the Differential Service on SFC and SMO objects. The service walks 
            and compares two specified graphs and returns an Diffgram (IEnumerable&lt;DiffEntry&gt;)
            representing the difference.
            
            It is late-activated, meaning that it does not walk the graphs until the enumerator 
            is accessed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer.CompareGraphs(System.Object,System.Object)">
            <summary>
            Compares two  graphs (defined below) 
            and returns the difference.
            
            The result of CompareGraphs represents the difference 
            to be applied to the target to obtain the source. 
            (i.e., target + diff => source) 
            
            To support both SMO and SFC, the input are left as 'object' type. However, it 
            allows only SqlSmoObject or SfcObject. This method throws InvalidArgumentException 
            if the type of the specified objects is invalid.
            
            Two graphs are said to comparable (i.e., have the same type), if they have the same 
            structure at all levels, which means each node has the same type of children and 
            properties. If the specified graphs are not comparable, this method throws 
            InvalidArgumentException.
            
            When a nodes on each graph has the same identity (represented by Urn in both 
            SMO and SFC), it is said to be identical. When two identical nodes have the same 
            values for all Properties, they are  said to be equivalent (disregard the children 
            they have).
            
            During the comparison, this Service will examine all relevant nodes. (The relevance 
            of nodes and properties is domain-specific.) For each pair of identical nodes from both sides, 
            the Service compares all relevent Properties. If the nodes are not equivalent, a 
            DiffEntry with DiffType.Updated are added to the result. The children will then be 
            compared.
            
            When a child appears in the source but not in the target, an DiffEntry with 
            DiffType.Created is added to the result, likewise for DiffType.Deleted.
            
            The Differencer walks the children (of all level) of a Created or Deleted node.
            The children entries are included in the result.
            
            Finally, each pair of identical children is checked for equivalence.
            
            CompareGraphs() scales to very large graphs and does not retain the entire graphs in 
            memory if possible. Applications using this service should not have logic that depends 
            on the ordering of the results, which may be different when the implementation changes 
            in the future for further optimization.
            
            The current implementation walks the tree in late-activate fashion. Resetting the result 
            IEnumerator might result in the graphs being walked again. 
            
            The result IDiffgram is not thread-safe.
            </summary>
            <param name="source">The root node of the source graph to compare.</param>
            <param name="target">The root node of the target graph to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer.IsTypeEmitted(Microsoft.SqlServer.Management.Sdk.Differencing.DiffType)">
            <summary>
            True to indicate the specified DiffType entries are included in the result
            diffgram.
            </summary>
            <param name="type">The DiffType to check</param>
            <returns>true to indicate the specified DiffType entries are included in the result
            diffgram.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer.SetTypeEmitted(Microsoft.SqlServer.Management.Sdk.Differencing.DiffType)">
            <summary>
            Set the specified DiffType to be included in the result diffgram. This option
            affects the DiffEntry only if it is set before CompareGraphs() is called.
            </summary>
            <param name="type">The DiffType to check</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.IDifferencer.UnsetTypeEmitted(Microsoft.SqlServer.Management.Sdk.Differencing.DiffType)">
            <summary>
            Unset (or clear) the specified DiffType to be excluded from the result diffgram.
            This option affects the DiffEntry only if it is set before CompareGraphs() is called.
            </summary>
            <param name="type">The DiffType to check</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.IDiffgram">
            <summary>
            The data structure that holds an enumerable of Diff entries.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.IDiffgram.SourceRoot">
            <summary>
            The root node of the source object passed to the Diff service.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.IDiffgram.TargetRoot">
            <summary>
            The root node of the target object passed to the Diff service.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.DiffType">
            <summary>
            Enum to indicate the type of change
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.IDiffEntry">
            <summary>
            Represent the difference of two versions of an identical object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.IDiffEntry.ChangeType">
            <summary>
            The type of change between the Source and Target nodes. It does not describe the changes of the
            nodes' children.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.IDiffEntry.Source">
            <summary>
            The Urn representing the Source node. It is different from the Target Urn when
            the two nodes have different parents. It is null if ChangeType is Deleted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.IDiffEntry.Target">
            <summary>
            The Urn representing the Target node. It is different from the Source Urn when
            the two nodes have different parents. It is null if ChangeType is Created.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.IDiffEntry.Properties">
            <summary>
            A Collection of all relevant Properties. 
            
            If the ChangeType is DiffType.Updated, this Dictionary contains paris of 
            source (updated) and target (original) property values, keyed their property 
            name. Otherwise, it contains no Property.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.IPair`1">
            <summary>
            Represent a source and target pair of a single generic type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer">
            <summary>
            Implementation of IDifferencer. The implementation is designed to be 
            adaptable. Domain specific information and logic are delegated to providers.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.#ctor(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.Dispose(System.IDisposable)">
            <summary>
            Do a best-effort to dispose the specified object. It will peacefully handle non-system-
            generated exception.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffgram">
            <summary>
            The late activated diffgram will compare all children and property of a pair of object
            at a time, until at least one DiffEntry is found (or end of list). 
            
            When it is comparing the children, it will find pair and put them into the stack for
            later comparison.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Diffgram">
            <summary>
            The data structure that holds an enumerable of Diff entries.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Diffgram.SourceRoot">
            <summary>
            Top most node of the source object (the object passed to the diff service)
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Diffgram.TargetRoot">
            <summary>
            Top most node of the target object (the object passed to the diff service)
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffgram.SourceSimpleNode">
            <summary>
            Top most node adapted
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffgram.TargetSimpleNode">
            <summary>
            Top most node adapted
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffEntryEnumerator">
            <summary>
            This object is a late-activated Enumerator. There is two data structures: stack (stack) 
            holding pair of objects to be compared, and result (queue) holding result to be returned. 
            
            When it is initialized, a single pair is added to the stack. Every time MoveNext() is
            called, acutal compare occurs. (see summary on the method)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffEntryEnumerator.envelope">
            <summary>
            The IEnumerable in which this IEnumerator is obtained
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffEntryEnumerator.stack">
            <summary>
            Store the items to be processed.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffEntryEnumerator.result">
            <summary>
            The list of result
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffEntryEnumerator.current">
            <summary>
            The Current item in the result
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffEntryEnumerator.#ctor(Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffgram)">
            <summary>
            Constructor
            </summary>
            <param name="envelop"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffEntryEnumerator.Push(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Add an item to be processed.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.LateActivatedDiffEntryEnumerator.MoveNext">
            <summary>
            Determines if we have next element.
            
            Every time MoveNext() is called, acutal compare occurs. It is a loop that
            pops a pair from the stack and compare. Each of such compare may result in 
            zero to more pair of children being added for comparison. It may also result 
            in zero to more pair of result. 
            
            The loop ends either if we have an item in the result queue to be returned,
            or if there is no more pair in the stack to compare.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.Differencer.DummySfcSimpleNode">
            <summary>
            A dummy placeholder class to represent leaf node is reached on one side.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode">
            <summary>
            ISfcSimpleNode is a simple interface to walk a Sfc or Sfc-adapted graph.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode.ObjectReference">
            <summary>
            The actual list that this simple list references
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode.Urn">
            <summary>
            The Urn this simple node represents
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode.RelatedContainers">
            <summary>
            A simple indexer of children list. It is keyed by the Relation's 
            property name as defined by SfcMetadataDiscovery.
            
            The value of the dictionary is a list of children.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode.RelatedObjects">
            <summary>
            A simple indexer of children. It is keyed by the Relation's 
            property name as defined by SfcMetadataDiscovery.
            
            The value of the dictionary is a list of children.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode.Properties">
            <summary>
            A simple indexer of the properties list.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.AvailablePropertyValueProvider">
            <summary>
            A provider that enables a partial graph to participate in differencing
            with a complete graph.
            
            A partial graph is a graph that does not contain all properties 
            because some values are not set, or the values are set to some 
            default values.
            
            Before a graph is walked, the differencer looks up all known 
            AvailablePropertyValueProvider in the system and asks if any of the
            providers supports one of the graphs to be compared. If a provider
            indicates that it supports the graph, the graph is a partial graph.
            
            When a partial graph is walked, the differencer calls  
            IsValueAvailable() for each property of each object. If true is returned,
            the property is compared. If false is returned, then the
            property is skipped.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.Provider">
            <summary>
            Base interface for all Differencing providers.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.AvailablePropertyValueProvider.IsGraphSupported(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Indicates if this provider supports the specified graph. If it is, 
            returns true, false otherwise.
            
            If true is returned, calls to IsValueAvailable() 
            must return valid meaningful value.
            
            The method is called only once on the root node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.AvailablePropertyValueProvider.IsValueAvailable(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,System.String)">
            <summary>
            Checks whether a property value is available. If it is not, the comparison 
            is not performed; else, consider it in the comparison.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ContainerSortingProvider">
            <summary>
            The provider supplies sorting 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ContainerSortingProvider.AreGraphsSupported(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Indicates if this provider supports the specified graphs. If it is, 
            returns true, false otherwise.
            
            If true is returned, the following calls to GetSortedList() and
            GetComparer() method must return a valid non-null object.
            
            The method is called only one on the top most node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ContainerSortingProvider.SortLists(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList,System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode}@,System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode}@)">
            <summary>
            Obtains a sorted list. This implementation sorts the list using standard 
            List&gt;Object&lt; .Sort(IComparer) method. The IComparer is obtained by 
            GetComparer(ISfcSimpleNode, ISfcSimpleNode) method.
            
            The method is called only if AreListsComparable(ISfcSimpleList, ISfcSimpleList) 
            returns true.
            
            A provider overrides this method if it can provide a faster sorting. If the list
            is already sorted, the orignal list can be returned.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ContainerSortingProvider.GetComparer(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList)">
            <summary>
            Obtain a Comparer for the specified list. The method is called only if
            AreListsComparable(ISfcSimpleList, ISfcSimpleList) returns true.
            
            If AreListsComparable() returns true, this method must return a valid
            comparer.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.PropertyComparerProvider">
            <summary>
            The provider supplies sorting 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.PropertyComparerProvider.AreGraphsSupported(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Indicates if this provider supports the specified graphs. If it is, 
            returns true, false otherwise.
            
            If true is returned, the following calls to GetSortedList() and
            GetComparer() method must return a valid non-null object.
            
            The method is called only one on the top most node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.PropertyComparerProvider.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,System.String)">
            <summary>
            Compare the specified properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.CompareUtil">
            <summary>
            A general compare utility. This class contains static compare methods.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DiffEntry">
            <summary>
            Represent the difference of two versions of an identical object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DiffEntry.ChangeType">
            <summary>
            The type of change between the Source and Target node. The change type disregards the
            nodes' children.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DiffEntry.Source">
            <summary>
            The Urn representing the Source node
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DiffEntry.Target">
            <summary>
            The Urn representing the Target node
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.Impl.DiffEntry.Properties">
            <summary>
            A Collection of all relevant Properties. 
            
            If the ChangeType is DiffType.Updated, this Dictionary contains paris of 
            source (updated) and target (original) property values, keyed their property 
            name. Otherwise, it contains no Property.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.MetadataNodeItemNamesProvider">
            <summary>
            An implementation of NodeItemNamesAdapterProvider that is based
            on SfcMetadataDiscovery.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider">
            <summary>
            The adapter from which the list of names of relations and properties is
            obtained. It is the metadata counterpart of ISimpleNode.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider.IsGraphSupported(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Indicates if this provider supports the specified graph. If it is, 
            returns true, false otherwise.
            
            If true is returned,  calls to GetRelatedContainerNames(), GetRelatedObjectNames(), and GetPropertyNames() 
            must return a valid non-null IEnumerable.
            
            The method is called only once on the root node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider.GetRelatedContainerNames(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Obtains a list of related container names for the specified nodes
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider.GetRelatedObjectNames(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Obtains a list of names for the specified nodes
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider.GetPropertyNames(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Obtain a list of name for the specified nodes
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider.IsContainerInNatrualOrder(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,System.String)">
            <summary>
            Checks if the specified container collection follows a natural order . 
            If true, the 
            returned container IEnumerable does not needed to be sorted.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry">
            <summary>
            This class is an entry points for differencer to obtains its provider. Domain specific 
            provider of the Diff service can be registered into this class.
            
            A provider supplies domain specific information or logic so that the differencer can 
            handle different graph type and runtime behaviour correctly.
            
            A provider must be registered before the compare method is invoked.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.RegisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.SfcNodeAdapterProvider)">
            <summary>
            Register the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.UnregisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.SfcNodeAdapterProvider)">
            <summary>
            Unregister the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.RegisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.AvailablePropertyValueProvider)">
            <summary>
            Register the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.UnregisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.AvailablePropertyValueProvider)">
            <summary>
            Unregister the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.RegisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.PropertyComparerProvider)">
            <summary>
            Register the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.UnregisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.PropertyComparerProvider)">
            <summary>
            Unregister the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.RegisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider)">
            <summary>
            Register the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.UnregisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.NodeItemNamesAdapterProvider)">
            <summary>
            Unregister the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.RegisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ContainerSortingProvider)">
            <summary>
            Register the specified provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.UnregisterProvider(Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ContainerSortingProvider)">
            <summary>
            Unregister the specified provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.SfcNodeAdapterProviders">
            <summary>
            Obtain a list of registered SfcNodeAdapterProvider.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.AvailablePropertyValueProviders">
            <summary>
            Obtain a list of registered AvailablePropertyValueProvider.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.PropertyComparerProviders">
            <summary>
            Obtain a list of registered SfcNodeAdapterProvider.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.NodeItemNameAdapterProviders">
            <summary>
            Obtain a list of registered NodeItemNamesAdapterProvider
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.ProviderRegistry.ContainerSortingProviders">
            <summary>
            Obtain a list of registered ContainerSortingProvider
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.SfcNodeAdapterProvider">
            <summary>
            The diff algorithm walks the graphs with the help of ISimpleSfcNode. 
            The object model can either directly implement the interface, or 
            return a wrapper.
            
            If a graph to be compared natively implements ISimpleSfcNode, the
            node can be returned directly. Otherwise, a wrapper should 
            be returned.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.SfcNodeAdapterProvider.IsGraphSupported(System.Object)">
            <summary>
            Indicates if this provider supports the specified graph. If it is, 
            returns true, false otherwise.
            
            If true is returned, calls to GetGraphAdapter() must return a 
            valid non-null graph adapter.
            
            The method is called only once on the root node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Differencing.SPI.SfcNodeAdapterProvider.GetGraphAdapter(System.Object)">
            <summary>
            The method is called only once on the root node of the graphs
            to be compared.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql">
            <summary>
            class encapsulateing a conditioned sql
            that is a sql the is neccessary only when a property is requested</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.#ctor">
            <summary>
            default constructor</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.SetFields(System.Collections.Specialized.StringCollection)">
            <summary>
            set the triggering fields</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.IsHit(System.String)">
            <summary>
            return true if the field has caused the sql to be added</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.TestHit(System.String)">
            <summary>
            test if the field would make the tsql to be added
             ( it does not look if it was already used )</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.IsDefault">
            <summary>
            this sql must always be added no matter what fields are requested</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.MarkHit">
            <summary>
            mark this sql as used</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.ClearHit">
            <summary>
            mark this sql as not used</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.AddLinkMultiple(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadMultipleLink)">
            <summary>
            intialize link multiple</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.AddHit(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
            <summary>
            add hit for the field from the object ( level ) obj, add record in the StamentBuilder sb</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.Fields">
            <summary>
            get the list of triggering fields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.IsUsed">
            <summary>
             is this conditioned sql already used ? ( important because it can be used only once )</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.AcceptsMultipleHits">
            <summary>
            can be added multiple times</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.Used">
            <summary>
            has been added at least once</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.LinkMultiple">
            <summary>
            get the link multiple </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql.LinkFields">
            <summary>
            get the list of fields for which we need their value</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList">
            <summary>
             a list of CondtionedSql</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.#ctor">
            <summary>
            default constructor</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.Add(Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSql)">
            <summary>
            add a conditioned sql</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.ClearHits">
            <summary>
            clear used mark for all conditioned sqls</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.AddHits(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase,System.String,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
            <summary>
            add hit for every cionditioned sql</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.AddDefault(Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
            <summary>
            add default conditioned sql </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.GetEnumerator">
            <summary>
            get an enumerator for foreach</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.Count">
            <summary>
            how many conditioned sql are there</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.Item(System.Int32)">
            <summary>
            int indexer</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.ConditionedSqlListEnumerator">
            <summary>
             nested enumerator class
             we need that to override the behaviour of SortedList
             that exposes an IEnumerator interface</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.ConditionedSqlListEnumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            constructor</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.ConditionedSqlListEnumerator.MoveNext">
            <summary>
            move one position forward</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.ConditionedSqlListEnumerator.Reset">
            <summary>
            reset the enumerator</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList.ConditionedSqlListEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            get  current conditioned sql</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider">
            <summary>
            exeposes the results as a tsql as a DataTable or a data reader
            executes necessary postprocesses and type conversions</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
            <summary>
            initialize with SatatementBuilder, default retrive mode is DataReader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder,Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.RetriveMode)">
            <summary>
            initialize with SatatementBuilder, and retrive mode</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.Init(Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder,Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.RetriveMode)">
            <summary>
            initialize with StatementBuilder, and retrive mode
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.SetConnectionAndQuery(Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql,System.String)">
            <summary>
            the means to execute the query ( execSql ) and the query ( query )
            it executes the query and gets a data reader
            if retrive mode is DataTable it proceeds to fill it</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.InitRowDataManipulation(System.Collections.ArrayList,System.Collections.SortedList)">
            <summary>
            init data structures so that row manipulation is done eficiently</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.InitSchemaTable(System.Collections.ArrayList)">
            <summary>
             Creates a empty DataTable that reflects the schema of the retrieved data.
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetTrigeredValue(System.Int32)">
            <summary>
            get the value for the ordinal column i
            the column is triggered rather than requested by user</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetDataFromStorage(System.Int32)">
            <summary>
            get the value for ordinal column i
            the column was directly requested by the user</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.SetDataInStorage(System.Int32,System.Object)">
            <summary>
            update the data at ordinal i</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.ReadInternal">
            <summary>
            advance one row</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.ManipulateRowDataPostProcess">
            <summary>
            executes post process for this row</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.ManipulateRowDataType">
            <summary>
            execute type conversions for this row</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.ManipulateRowData">
            <summary>
            manipulates row data: post process + type conversions</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.Close">
            <summary>
            clear internal data, cancel any data reader pipe, close reader, disconnect </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetSchemaTable">
            <summary>
            get empty DataTable describing the schema
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.NextResult">
            <summary>
            nop, always returns false</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.Read">
            <summary>
            advances to next row, closes in case of failure</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetTable">
            <summary>
            get the DataTable filled with the result data</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.Dispose">
            <summary>
            dispose the object</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.AdjustIndex(System.Int32)">
            <summary>
            makes shure any access outside the user requested properties
            results in an out of range exception
            triggered properties should not be available</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetBoolean(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetByte(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetChar(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetData(System.Int32)">
            <summary>
            not supported, always null</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetDataTypeName(System.Int32)">
            <summary>
            get type name for column at ordinal i</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetDateTime(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetDecimal(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetDouble(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetFieldType(System.Int32)">
            <summary>
            get type for column at ordinal i</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetFloat(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetGuid(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetInt16(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetInt32(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetInt64(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetName(System.Int32)">
            <summary>
            get column name for ordinal i</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetOrdinal(System.String)">
            <summary>
            get ordinal for column name</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetString(System.Int32)">
            <summary>
            get data for column i as the given type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetValue(System.Int32)">
            <summary>
            get data for column i as Object</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.GetValues(System.Object[])">
            <summary>
            get data for the row as an array of Object</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.IsDBNull(System.Int32)">
            <summary>
            true if the data for ordinal i is null</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.Depth">
            <summary>
            always 1
             </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.IsClosed">
            <summary>
            is DataReader closed
             </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.RecordsAffected">
            <summary>
             Returns the number of records affected. Will always be -1.
             </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.FieldCount">
            <summary>
            number of columns</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.Item(System.Int32)">
            <summary>
            int indexer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.Item(System.String)">
            <summary>
            string indexer</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.RetriveMode">
            <summary>
            describes how the data will be retrived</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.RetriveMode.RetriveDataReader">
            <summary>
            as a DataReadet</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.RetriveMode.RetriveDataTable">
            <summary>
            as a DataTable</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Dependency">
            <summary>
            describes a dependency relationship: for a Urn a list of dependencies
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Dependency.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Dependency.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Dependency)">
            <summary>
            copy constructor
            </summary>
            <param name="dep"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Dependency.Copy">
            <summary>
            Deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Dependency.Urn">
            <summary>
            Urn for wich we have dependendencies
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Dependency.IsSchemaBound">
            <summary>
            If the dependency with the parent is schema bound
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Dependency.Links">
            <summary>
            list of dependencies
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection">
            <summary>
            models a generalized tree of dependencies
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection)">
            <summary>
            copy constructor
            </summary>
            <param name="deps"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.CopyTo(Microsoft.SqlServer.Management.Sdk.Sfc.Dependency[],System.Int32)">
            <summary>
            Strongly typed Copy implementation
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.Add(Microsoft.SqlServer.Management.Sdk.Sfc.Dependency)">
            <summary>
            Strongly typed Add implementation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.Insert(System.Int32,Microsoft.SqlServer.Management.Sdk.Sfc.Dependency)">
            <summary>
            Strongly typed Insert implementation
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.IndexOf(Microsoft.SqlServer.Management.Sdk.Sfc.Dependency)">
            <summary>
            Strongly typed IndexOf implementation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.Contains(Microsoft.SqlServer.Management.Sdk.Sfc.Dependency)">
            <summary>
            Strongly typed Contains implementation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.Remove(Microsoft.SqlServer.Management.Sdk.Sfc.Dependency)">
            <summary>
            Strongly typed Remove implementation
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyChainCollection.Item(System.Int32)">
            <summary>
            get dependency node by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator">
            <summary>
             The Enumerator class is the front end of this assembly
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.TraceInfo(System.String)">
            <summary>
             enumerator common trace function
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.TraceInfo(System.String,System.Object[])">
            <summary>
             enumerator common trace function		
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.GetData(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Request)">
            <summary>
            retrieve data
            </summary>
            <param name="connectionInfo">connection to be used</param>
            <param name="request">the request that has to be resolved</param>
            <returns>results coresponding to the request</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.RegisterExtension(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Registers an enumerator extension.
            </summary>
            <param name="urn">Parent urn or null if root.</param>
            <param name="name">Name of type.</param>
            <param name="assembly">Assembly reference containing implementsType.</param>
            <param name="implementsType">Type that implements the specified enumerator level.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.GetData(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            retrieve data
            </summary>
            <param name="connectionInfo">connection</param>
            <param name="urn">the xpath expresion</param>
            <returns>result - all fields except expensive no order</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.GetData(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String[])">
            <summary>
            retrieve data
            </summary>
            <param name="connectionInfo">connection</param>
            <param name="urn">the xpath expresion</param>
            <param name="requestedFields">list of requested fields</param>
            <returns>result - requested fields no order</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.GetData(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            retrieve data
            </summary>
            <param name="connectionInfo">connection</param>
            <param name="urn">the xpath expresion</param>
            <param name="requestedFields">list of requested fields</param>
            <param name="orderBy">order by the listed fields in the specified order</param>
            <returns>result - requested fields no order</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.GetData(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy)">
            <summary>
            retrieve data
            </summary>
            <param name="connectionInfo">connection</param>
            <param name="urn">the xpath expresion</param>
            <param name="requestedFields">list of requested fields</param>
            <param name="orderBy">order by a particular field in the specified order</param>
            <returns>result - requested fields no order</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.Process(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Request)">
            <summary>
            back comp function <see>GetData</see>
            this function also takes care updating the connectionInfo based on the request
            to handle requests over a Cloud DB connection
            </summary>
            <param name="connectionInfo"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.VanillaProcess(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Request)">
            <summary>
               process without updating the connection info
            </summary>
            <param name="connectionInfo"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.GetObjectInfo(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Get Object info for the level
            </summary>
            <param name="connectionInfo">connectin info - for the server version</param>
            <param name="urn">level specifier</param>
            <returns>level information - all information is returned</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.GetObjectInfo(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags)">
            <summary>
            Get Object info for the level
            </summary>
            <param name="connectionInfo">connectin info - for the server version</param>
            <param name="urn">level specifier</param>
            <param name="flags">restrit amount the information returned</param>
            <returns>level information</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.GetObjectInfo(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo)">
            <summary>
            get object info for the level
            </summary>
            <param name="connectionInfo">connectin info - for the server version</param>
            <param name="requestObjectInfo">specify the request</param>
            <returns>level information</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.Process(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo)">
            <summary>
            back comp function <see>GetObjectInfo</see>
            </summary>
            <param name="connectionInfo"></param>
            <param name="requestObjectInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.EnumDependencies(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.DependencyRequest)">
            <summary>
            enumerates dependencies for the specified objects as a generalize tree
            </summary>
            <param name="connectionInfo">server connection info</param>
            <param name="dependencyRequest">list of XPATHS for which the dependency must be discovered + aditional flags
            note each xpath can have multiple results</param>
            <returns>list of dependencies for each input record</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Enumerator.FixPropertyList(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.RequestFieldsTypes)">
            <summary>
            compute the list of properties that we are going to request 
            </summary>
            <param name="connectionInfo"></param>
            <param name="urn"></param>
            <param name="fields"></param>
            <param name="requestFieldsType"></param>
            <returns>the list of properties that will be returned to the user</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.EnumeratorException">
            <summary>
            base class for all enumerator exceptions
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumeratorException.FilterException(System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidQueryExpressionEnumeratorException">
            <summary>
            thrown when the XPATH expression is invalid
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidQueryExpressionEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidQueryExpressionEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidQueryExpressionEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidQueryExpressionEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidConfigurationFileEnumeratorException">
            <summary>
            thrown when an error is encountered reading the configuration file
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidConfigurationFileEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidConfigurationFileEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidConfigurationFileEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidConfigurationFileEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownPropertyEnumeratorException">
            <summary>
            thrown when a unknown property is requested
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownPropertyEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownPropertyEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownPropertyEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownPropertyEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownTypeEnumeratorException">
            <summary>
            thrown whe an unknown level is used
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownTypeEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownTypeEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownTypeEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UnknownTypeEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException">
            <summary>
            thown when an unsuported <see>ResultType</see> is requested
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ResultType)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ResultType,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ResultTypeNotSupportedEnumeratorException.ResultType">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.InternalEnumeratorException">
            <summary>
            internal exception - fatal error
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InternalEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InternalEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InternalEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InternalEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidPropertyUsageEnumeratorException">
            <summary>
            a property has been used in a place which is not covered by its Usage property
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidPropertyUsageEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidPropertyUsageEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidPropertyUsageEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidPropertyUsageEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidPropertyUsageEnumeratorException.Throw(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.QueryNotSupportedEnumeratorException">
            <summary>
            a valid query but using features that are unsupported has been used
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.QueryNotSupportedEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.QueryNotSupportedEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.QueryNotSupportedEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.QueryNotSupportedEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidVersionEnumeratorException">
            <summary>
            a level that is not supported on a particular version has been used
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidVersionEnumeratorException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidVersionEnumeratorException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidVersionEnumeratorException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.InvalidVersionEnumeratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject">
            <summary>
            classes that implement a XPATH level must be derived from this class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.Initialize(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock)">
            <summary>
            initialize this level
            </summary>
            <param name="ci">connection info</param>
            <param name="block">sysntatictal tree for the filter for this level</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.GetFixedStringProperty(System.String,System.Boolean)">
            <summary>
            get a fixed ( with known value from filter ) property
            of type string
            </summary>
            <param name="propertyName">name of the property requested</param>
            <param name="removeEscape">replace double quotes with one single quote</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.AddProperty(Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty)">
            <summary>
            add to the collection of properties
            </summary>
            <param name="op">property to add</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.GetProperties(Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages)">
            <summary>
            returns the object properties by usage
            </summary>
            <param name="usage">usage filter</param>
            <returns>array of ObjectProperty</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.GetUrnProperties">
            <summary>
            until we have a formal way so that each object declares which properties it uses for urn
            try this best guess aproach
            </summary>
            <returns>array of properties that are used in the Urn</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.TryGetProperty(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages)">
            <summary>
            accessor for a property by name and usage ( internal use )
            </summary>
            <param name="name">name of the property</param>
            <param name="usage">intended usage</param>
            <returns>null if the property does not meet the usage requirement or does
            not exist, else the coresponding property object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.GetProperty(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages)">
            <summary>
            accessor for a property by name and usage ( internal use )
            </summary>
            <param name="name">name of the property</param>
            <param name="usage">intended usage</param>
            <returns>exception if the property does not meet the usage requirement or does
            not exist, else the coresponding property object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.ComputeFixedProperties">
            <summary>
            calculate the list of fixed properties
            ( their value can be deduced from the filter )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.GetAliasPropertyName(System.String)">
            <summary>
            get the property name as it will be aliased in the result set to the user
            </summary>
            <param name="prop">property name</param>
            <returns>aliased name as it will be returned to the user</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.RetrieveParentRequest">
            <summary>
            Override this method to generate a Request for the parent object
            The response from the parent object will give us the subset of parent objects for which 
            the current level must generate it's result
            </summary>
            <returns>Request for the parent object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.GetData(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            Gets the the EnumResult data acordingly to the Request wich was previoesly set by the Environment
            </summary>
            <param name="erParent"></param>
            <returns>result for the level Request</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.PostProcess(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            This is called after the data has been retrived by the final object so the chian is preparing to be freed
            Because the objects are persisted between calls free any call specific data
            </summary>
            <param name="erChildren"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.Name">
            <summary>
            name of the xpath level
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.Urn">
            <summary>
            this property lives only while a request is serviced
            </summary>
            <value>holds the xpath exression for the curent request</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.FixedProperties">
            <summary>
            list of the properties for which the value is know
            e.g. Name is know if the fileter is in the form
            [@Name='fff'] or [@Name='fff' and ( xxxxx ) ]
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.Request">
            <summary>
            the request for this level, it is received from one level down
            or from user if it is the last level
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.ConnectionInfo">
            <summary>
            conection object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.Filter">
            <summary>
            filter for this level
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumObject.ResultTypes">
            <summary>
            return what types of results does this object support
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult">
            <summary>
            container for the result received from the enumerator
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.SetType(Microsoft.SqlServer.Management.Sdk.Sfc.ResultType)">
            <summary>
            used to set the result type on the data is filled
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.#ctor(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.ResultType)">
            <summary>
            initialize an EnumResult
            </summary>
            <param name="ob">data</param>
            <param name="resultType">type of data</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.op_Implicit(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)~System.Data.DataSet">
            <summary>
            implicit cast to DataSet if possible
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.ConvertToDataSet(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            convert to DataSet if possible
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.op_Implicit(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)~System.Data.DataTable">
            <summary>
            implicit cast to DataSet if possible
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.ConvertToDataTable(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            implicit cast to DataTable if possible
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.op_Implicit(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)~System.Xml.XmlDocument">
            <summary>
            implicit cast to XmlDocument if possible
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.ConvertToXmlDocument(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            convert to XmlDocument if possible
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.ConvertToDataReader(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            Converts the enumeration result to IDataReader
            </summary>
            <param name="er"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.Type">
            <summary>
            in what kind of storage is the data in the result
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.Data">
            <summary>
            result data 
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.CommandText">
            <summary>
            The text of the command that was used to generate the result. Can be null.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult.CommandElapsedTime">
            <summary>
            The time spent executing the command. Not valid if CommandText is empty.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Environment">
            <summary>
            core of enumerator: implements GetData and GetObjectInfo
            builds the objects lists coresponding to a urn
            and takes care of object interdependencies
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Environment.GetObjectsFromCache(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.Object)">
            <summary>
            build the list of enum objects
            </summary>
            <param name="urn"></param>
            <param name="ci"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Environment.InitObjects(Microsoft.SqlServer.Management.Sdk.Sfc.Request)">
            <summary>
            initialize the objects
            take care to call Initialize before asking for parent request
            also use revers order as lower objects request form upper objects
            </summary>
            <param name="req"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql">
             <summary>
            this class is used to execute tsql 
            it is the only way tsql gets executed by the enumerator</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.#ctor(System.Object)">
             <summary>
            init connection trying to cast con
            to one of the supported connection types</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.Connect">
             <summary>
            establish connection if not already connected</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.Disconnect">
             <summary>
            disconnect if the connection was initially disconnected</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.InitConnection(System.Object)">
             <summary>
            init connection trying to cast con
            to one of the supported connection types</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.StartCapture">
             <summary>
            start capturing messages</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.RecordMessage(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
             <summary>
            record a message</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.ClearCapture">
             <summary>
            stop capturing messages, return what was captured</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.TryToReconnect(Microsoft.SqlServer.Management.Common.ExecutionFailureException)">
             <summary>
             if execution failed with connection error try to reconnect
             try only once as MDAC resets the connection pool after a connection error
            so we are garanteed to make a genuine attempt to reconnect instead af taking an already 
            invalid connection from the pool
            return true if success</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.ExecuteImmediate(System.String)">
             <summary>
            execute a query without results</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.ExecuteWithResults(System.String)">
             <summary>
            excute a query and return a DataTable with the results</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetDataReader(System.String)">
            <summary>
            Execute a query and get a DataReader for the results.
            </summary>
            <param name="query">The query text before any parameterization or caching checks.</param>
            <returns>The data reader.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetDataReader(System.String,System.Data.SqlClient.SqlCommand@)">
            <summary>
            Execute a query and get a DataReader for the results.
            </summary>
            <param name="query">The query text before any parameterization or caching checks.</param>
            <param name="command">The SqlCommand to use in case cancelling remaining reader processing is needed.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetServerVersion">
             <summary>
            return the ServerVersion for the connection</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetDatabaseEngineType">
             <summary>
            return the DatabaseEngineType for the connection</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetDatabaseEngineEdition">
            <summary>
            Returns the DatabaseEngineEdition for the connection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.IsContainedAuthentication">
             <summary>
            returns if authentication is contained</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.ExecuteImmediateGetMessage(System.String,System.Object)">
             <summary>
            execute the sql for ther given connection without returning results
            but capturing the messages</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.ExecuteImmediate(System.String,System.Object)">
             <summary>
            execute the sql for ther given connection without returning results</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.ExecuteWithResults(System.String,System.Object)">
             <summary>
            execute the sql for ther given connection returning results in a DataTable</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.ExecuteWithResults(System.Collections.Specialized.StringCollection,System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
             <summary>
            execute the sql for ther given connection returning results in a DataTable
            this is a tsql for final results 
            StatementBuilder holds info for additional processing needs and formating information
            the first tsqls in the list are executed without resulst, results are taken only for the last tsql</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetDataProvider(System.Collections.Specialized.StringCollection,System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
             <summary>
            execute the sql for ther given connection returning results in a DataProvider
            this is a tsql for final results 
            StatementBuilder holds info for additional processing needs and formating information
            the first tsqls in the list are executed without resulst, 
             results are taken only for the last tsql		
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetDataProvider(System.Collections.Specialized.StringCollection,System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder,Microsoft.SqlServer.Management.Sdk.Sfc.DataProvider.RetriveMode)">
             <summary>
            execute the sql for ther given connection returning results in a DataProvider
            this is a tsql for final results 
            StatementBuilder holds info for additional processing needs and formating information
            DataProvider.RetriveMode tells if the DataProvider must bring all rows 
             in a DataTable or be prepared to be used as a DataReader 
             the first tsqls in the list are executed without resulst, results are 
             taken only for the last tsql
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.ExecuteWithResults(System.Collections.Specialized.StringCollection,System.Object)">
             <summary>
            execute tsql for the given connection and return the results in the DataTable</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetServerVersion(System.Object)">
             <summary>
            return the server version for the server with the given connection</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetDatabaseEngineType(System.Object)">
             <summary>
            return the database engine type for the server with the given connection</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetDatabaseEngineEdition(System.Object)">
             <summary>
            return the DatabaseEngineEdition for the server with the given connection</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExecuteSql.GetHostPlatform(System.Object)">
            <summary>
            Returns the HostPlatform property of the connection
            </summary>
            <param name="con"></param>
            <returns>A value from the HostPlatformNames class</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback">
            <summary>
            Interface that must be implemebted by the user of FilterDecoder</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback.AddPropertyForFilter(System.String)">
            <summary>	
            FilterDecoder reports that the property name is used in filter
            and requests its physical name</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback.AddConstantForFilter(System.String)">
            <summary>	
            FilterDecoder reports that a constant is used in filter
            gives client a chance to modify it</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback.SupportsParameterization">
            <summary>
            Indicates whether the client support SQL-style query parameterization
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterDecoder">
            <summary>
            parses the syntactical tree to build the tsql where clause</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterDecoder.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISqlFilterDecoderCallback)">
            <summary>
            the construnctor receives the callback where to report fields find and get their tsql representation</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterDecoder.GetSql(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode)">
            <summary>
            get the where clause for this sintactical tree</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterDecoder.StringPrefix">
            <summary>
            prefix for string. default N - unicode</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode">
            <summary>
            base class for elements in the filter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode,System.Globalization.CompareOptions,System.Globalization.CultureInfo)">
            <summary>
            compare two filter nodes
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
            <param name="compInfo"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.NodeType">
            <summary>
            type of the node
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.Type">
            <summary>
            type of filter node
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.Type.Attribute">
            <summary>
            attribute
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.Type.Constant">
            <summary>
            constant
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.Type.Operator">
            <summary>
            operator
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.Type.Function">
            <summary>
            function
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode.Type.Group">
            <summary>
            group
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute">
            <summary>
            a node that encapsulates an attribute in the filter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute.#ctor(System.String)">
            <summary>
            initialize
            </summary>
            <param name="name">attribute name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute)">
            <summary>
            compare 2 FilterNodeAttribute
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute.NodeType">
            <summary>
            type of the node
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeAttribute.Name">
            <summary>
            attribute name
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant">
            <summary>
            a node that encapsulates a constant in the filter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.#ctor(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.ObjectType)">
            <summary>
            initalize with value and type
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.op_Implicit(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant)~System.String">
            <summary>
            implicit cast to string
            </summary>
            <param name="fnc"></param>
            <returns>An escaped string value</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant,System.Globalization.CompareOptions,System.Globalization.CultureInfo)">
            <summary>
            compare two FilterNodeConstants
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
            <param name="compInfo"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.ToString">
            <summary>
            Converts the value to a string that can be used as a parameter in a SQL script.        
            </summary>
            <returns>For ObjectType.String, an escaped value surrounded by single quotes. For ObjectType.Boolean, true() or false().</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.NodeType">
            <summary>
            type of the node
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.Value">
            <summary>
            value of the constant
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.ObjType">
            <summary>
            type of the constant
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.ValueAsString">
            <summary>
            get the raw constant value as string
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.ObjectType">
            <summary>
            constant type
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.ObjectType.Number">
            <summary>
            constant is a number
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.ObjectType.Boolean">
            <summary>
            constant is boolean
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeConstant.ObjectType.String">
            <summary>
            constant is a string
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren">
            <summary>
            holds a list of subnodes
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren.#ctor">
            <summary>
            initialize
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode[])">
            <summary>
            initialize
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren.Add(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode)">
            <summary>
            add a node
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren,System.Globalization.CompareOptions,System.Globalization.CultureInfo)">
            <summary>
            compare two FilterNodeChildrens
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
            <param name="compInfo"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeChildren.Children">
            <summary>
            list of nodes
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup">
            <summary>
            pharantesis
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup,System.Globalization.CompareOptions,System.Globalization.CultureInfo)">
            <summary>
            compare
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
            <param name="compInfo"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup.NodeType">
            <summary>
            type of the node
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeGroup.Node">
            <summary>
            get the node
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator">
            <summary>
            operator
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type)">
            <summary>
            default constructor
            </summary>
            <param name="opType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode)">
            <summary>
            
            </summary>
            <param name="opType"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator,System.Globalization.CompareOptions,System.Globalization.CultureInfo)">
            <summary>
            compare
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
            <param name="compInfo"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.OpTypeToString(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.NodeType">
            <summary>
            type of the node
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.OpType">
            <summary>
            operator type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Left">
            <summary>
            left node
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Right">
            <summary>
            right node
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type">
            <summary>
            operator type
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.LT">
            <summary>
            less then
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.GT">
            <summary>
            greater then
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.LE">
            <summary>
            less equal
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.GE">
            <summary>
            greater equal
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.EQ">
            <summary>
            equal
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.NE">
            <summary>
            not equal
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.OR">
            <summary>
            or
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.And">
            <summary>
            and
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator.Type.NEG">
            <summary>
            negate
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction">
            <summary>
            a function in the filter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type,System.String)">
            <summary>
            initzlize with function type and name
            </summary>
            <param name="funcType"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type,System.String,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode[])">
            <summary>
            
            </summary>
            <param name="funcType"></param>
            <param name="name"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.GetParameter(System.Int32)">
            <summary>
            get function parameter by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction,System.Globalization.CompareOptions,System.Globalization.CultureInfo)">
            <summary>
            compare
            </summary>
            <param name="f1"></param>
            <param name="f2"></param>
            <param name="compInfo"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.FuncTypeToString(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.NodeType">
            <summary>
            type of the node
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Name">
            <summary>
            function name
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.FunctionType">
            <summary>
            function type
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.ParameterCount">
            <summary>
            number of function parameters
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type">
            <summary>
            function type
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type.True">
            true() value true
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type.False">
            false() value false
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type.String">
            not supported
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type.Contains">
            contains() - same as sql LIKE but it adds % around the input pattern
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type.UserDefined">
            placeholder for enumerator extension defined functions
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type.Not">
            not() - negate
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type.Boolean">
            not supported
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeFunction.Type.Like">
            t-sql LIKE function
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportInitData">
            <summary>
            implemented by levels that need a configuration file
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportInitData.LoadInitData(System.String,Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            load the given file for the given version
            </summary>
            <param name="file"></param>
            <param name="ver"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportInitDatabaseEngineData">
            <summary>
            implemented by Smo Enumerator to read the Configuration files of the SMO Object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportInitDatabaseEngineData.LoadInitData(System.String,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            load the given file for the given version, engine type and engine edition
            </summary>
            <param name="file">The file we're loading the object data from</param>
            <param name="ver">Version of the server to load data for</param>
            <param name="databaseEngineType">Engine type of the server to load data for</param>
            <param name="databaseEngineEdition">Engine edition of the server to load data for</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IEnumDependencies">
            <summary>
            defines method by which the dependencies are requested
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IEnumDependencies.EnumDependencies(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.DependencyRequest)">
            <summary>
            returns the dependencies for the given XPATHs and flags
            </summary>
            <param name="ci"></param>
            <param name="rd"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportVersions">
            <summary>
            can only be on the first object. if it wants to do some housekeeping with the connection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportVersions.GetServerVersion(System.Object)">
            <summary>
            given the connection returns the server version
            </summary>
            <param name="conn">Connection object to get the engine type from</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportDatabaseEngineTypes">
            <summary>
            This interface is used to get the database engine type from the connection 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportDatabaseEngineTypes.GetDatabaseEngineType(System.Object)">
            <summary>
            Get the DatabaseEngineType for the specified connection
            </summary>
            <param name="conn">Connection object to get the engine type from</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportDatabaseEngineEditions">
            <summary>
            This interface is used to get the database engine edition from the connection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISupportDatabaseEngineEditions.GetDatabaseEngineEdition(System.Object)">
            <summary>
            Get the DatabaseEngineEdition for the specified connection
            </summary>
            <param name="conn">Connection object to get the engine type from</param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectCache.SameObjectNumber">
            This value is used as the maximum number of instances of
            the same object that will be stored in the cache. This has
            impact on the enumerator's support of recursive types, so
            if you edit this please make sure the login in the
            construction of the XmlReadSettings class in XmlRead.cs is
            still valid. It should be no matter what this number
            changes to.
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectInfo">
            <summary>
             The Request encapsulates connection info and the actual request
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectInfo.Children">
            <summary>
             string
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectInfo.Properties">
            <summary>
             XPath expression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectInfo.ResultTypes">
            <summary>
            list of supprted ResultTypes, the first is the default for the level
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectInfo.UrnProperties">
            <summary>
            the list of prperties that make up the Urn for the level
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectLoadInfoManager.AddExtension(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Adds an extension to the provided object urn. If the urn is null, then the object is a new extension root.
            </summary>
            <param name="urn">The Urn to extend. Pass in null for extension root.</param>
            <param name="name">Name of the type.</param>
            <param name="assembly">Assembly that contains the type specified with implementsType.</param>
            <param name="implementsType">The type that implements the enumerator level.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ProviderUrnPrefixFactory.GetProviderUrnPrefix(System.String,System.Object)">
            <summary>
               returns the urn prefix for the corresponding provider
            </summary>
            <param name="rootLevel">the root level of the urns, corresponds to the domain root</param>
            <param name="ci">the connection info</param>
            <returns> the provider specific urn prefix</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ProviderUrnPrefixFactory.IsSqlConnection(System.Object)">
            <summary>
              returns true iff the ci corressponds to a connection to sql
            </summary>
            <param name="ci">the connection info</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ProviderUrnPrefixFactory.HasProviders(System.String)">
            <summary>
              returns true iff there are distinct enumerator providers for the domain
            </summary>
            <param name="rootLevel">the root level of the urns, corresponds to the domain root</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages">
            <summary>
            enumarates possible usages for a property
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages.None">
            <summary>
            can't be used much
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages.Filter">
            <summary>
            can be used in filter
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages.Request">
            <summary>
            can be requested
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages.OrderBy">
            <summary>
            cen be ordered by
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages.Reserved1">
            <summary>
            reserved for usage by the enumerator extensions
            for example for parent-children internal link -> = Request
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages.All">
            <summary>
            can be used everywhere
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyMode">
            <summary>
            Enumarates possible modes of a property
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyMode.None">
            <summary>
            No mode
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyMode.Design">
            <summary>
            Design time property
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyMode.Deploy">
            <summary>
            Deploy time property
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyMode.All">
            <summary>
            Design and deploy time property
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty">
            <summary>
             ObjectProperty description
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.Name">
            <summary>
             name of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.Type">
            <summary>
             type of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.ReadOnlyAfterCreation">
            <summary>
             is the property read only after creation
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.KeyIndex">
            <summary>
             is the property key idex
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.PropertyMode">
            <summary>
             the mode of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.Expensive">
            <summary>
             is the property expensive
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.ReadOnly">
            <summary>
             access: Read/Write
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.ExtendedType">
            <summary>
            true if it is a type than cannot be stored in a DataTable
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.Usage">
            <summary>
            accepted usages for the property
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.ReferenceTemplate">
            <summary>
            URN template for object reference
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.ReferenceType">
            <summary>
            Type pointed to by object reference
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.ReferenceKeys">
            <summary>
            Information about the keys that make up the reference
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectProperty.ReferenceTemplateParameters">
            <summary>
            Information about the keys that make up the reference
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ResultType">
            <summary>
            in what storage will the result be retrived for the Request
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ResultType.Default">
            <summary>
            each level has prefered storage, the prefered storage for the last 
            level will be used
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ResultType.DataSet">
            <summary>
            return as DataSet
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ResultType.DataTable">
            <summary>
            return as dataTable
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ResultType.IDataReader">
            <summary>
            return as IDataReader
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ResultType.XmlDocument">
            <summary>
            return as XmlDocument
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ResultType.Reserved1">
            <summary>
            reserved for enumerator extensions implementations
            to be used for comunication between levels
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.ResultType.Reserved2">
            <summary>
            reserved for enumerator extensions implementations
            to be used for comunication between levels
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy">
            <summary>
            describes an order by clause
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.#ctor(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.Direction)">
            <summary>
            init an order by clause
            </summary>
            <param name="field">field to order by</param>
            <param name="dir">direction to order by</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.Field">
            <summary>
             field to order by
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.Dir">
            <summary>
             direction to order by
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.Direction">
            <summary>
             direction to order by
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.Direction.Asc">
            <summary>
             ascending
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.Direction.Desc">
            <summary>
             descending
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest">
            <summary>
            this component of the <see>Request</see> specifies
            which properties has to be returned for a level
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest.#ctor(System.String[])">
            <summary>
            initalize with the list of fields 
            </summary>
            <param name="fields">list of fields</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest.#ctor(System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            initialize list of properties and ordering information
            </summary>
            <param name="fields">list of properties</param>
            <param name="orderBy">ordering info</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest.Fields">
            <summary>
             properties to be brought back
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest.RequestFieldsTypes">
            <summary>
            <see>RequestFieldsTypes</see> describes what the list of fields means
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest.OrderByList">
            <summary>
            list of order by clauses
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.PropertiesRequest.PropertyAlias">
            <summary>
            describes how the property names will be aliased
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias">
            <summary>
            describes how the property names will be aliased
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.#ctor(System.String)">
            <summary>
            initialize to use a specified prefix
            </summary>
            <param name="prefix">the prefix to be added in fron of names</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.#ctor(System.String[])">
            <summary>
            initialize to use a specifing string for each property
            the maching is done using the order
            </summary>
            <param name="aliases">list of alias names</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.Kind">
            <summary>
            the kind of alias method to be used
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.Prefix">
            <summary>
            the prefix to be used
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.Aliases">
            <summary>
            the alias list to be used
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.AliasKind">
            <summary>
            describes the alias method
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.AliasKind.Each">
            <summary>
            an alias will be specified for each property
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.AliasKind.Prefix">
            <summary>
            the specified prefix will be added in front of the property names
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyAlias.AliasKind.NodeName">
            <summary>
            the level name will be added in front of the property name
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.RequestFieldsTypes">
            <summary>
            specified how the list of fields specified in <see>Request</see>
            is to be interpreted
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestFieldsTypes.Request">
            <summary>
            when set, brings properties in the list else rejects them
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestFieldsTypes.IncludeExpensiveInResult">
            <summary>
            when set also brings expensive properties, else it does not
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestFieldsTypes.Reject">
            <summary>
            all_properties - (input_list + expensive_props )
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Request">
            <summary>
             The Request encapsulates the request options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Request.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Request.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            initalize with xpath
            </summary>
            <param name="urn">the xpath to be queried for</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Request.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String[])">
            <summary>
            initialize with xpath and requeste fields list
            </summary>
            <param name="urn">the xpath to be queried for</param>
            <param name="fields">requeste fields list</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Request.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            initialize with xpath and requeste fields list
            </summary>
            <param name="urn">the xpath to be queried for</param>
            <param name="fields">requeste fields list</param>
            <param name="orderBy">order by clauses</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Request.ShallowClone">
            <summary>
            make a shalow clobe of the <see>Request</see>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Request.Urn">
            <summary>
             XPath expression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Request.ParentPropertiesRequests">
            <summary>
            the list of properties requested for the upper levels
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Request.ResultType">
            <summary>
            the requested <see>ResultType</see>
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyRequest">
            <summary>
            encapsulates a dependency request
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyRequest.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyRequest.Urns">
            <summary>
            list of XPATHs which gives the list of object for 
            which we need to discover dependencies
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DependencyRequest.ParentDependencies">
            <summary>
            true if we need to discover parent dependencies as opposed to children dependencies
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo">
            <summary>
             The Request encapsulates connection info and the actual request
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags)">
            <summary>
            initialize with level info and flags
            </summary>
            <param name="urn">the level for which info is requested</param>
            <param name="infoType">what info is requested</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Urn">
            <summary>
             XPath expression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.InfoType">
            <summary>
             flags which indicate what to return
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags">
            <summary>
             flags indicate what must be retrieved
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags.None">
            <summary>
             retrive none :-) must have something for the implicit 0
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags.Properties">
            <summary>
             retrive properies
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags.Children">
            <summary>
             retrive children
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags.Parents">
            <summary>
             retrive parents
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags.ResultTypes">
            <summary>
            what <see>ResultType</see>s are supported
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags.UrnProperties">
            <summary>
            what properties make up the Urn property
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo.Flags.All">
            <summary>
             retrive all
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.RequestParentSelect">
             <summary>
            encapsulates a request parent select
            basically the select that would give the results for the parent level ( without prefix/postfix)</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.RequestParentSelect.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelect)">
             <summary>
            initalize with xml reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.RequestParentSelect.Fields">
             <summary>
            the fields that must be selected</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatement">
             <summary>
            a conditioned statement that inserts a chunck of tsql outside the main select</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatement.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement)">
             <summary>
            initialize with xml reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatement.GetLocalSql(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase)">
             <summary>
            get the tsql witl link_mulitple resolved</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPrefix">
             <summary>
            encapsulates prefix</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPrefix.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement)">
             <summary>	
            initialize with xml reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPrefix.AddAll(Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList,Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPrefix)">
             <summary>
            read all prefixes</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPrefix.AddHit(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
             <summary>
            add hit for the field</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPostfix">
             <summary>
            encapsulates postfix</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPostfix.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement)">
             <summary>	
            initialize from xml reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPostfix.AddAll(Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList,Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostfix)">
             <summary>
            read all postfixes</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementPostfix.AddHit(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
             <summary>
            add hit for field</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementFailCondition">
             <summary>
            encapsulates a failed condition statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementFailCondition.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement)">
             <summary>	
            initialize with xml reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementFailCondition.AddAll(Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList,Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementFailCondition)">
             <summary>
            add all fail conditions</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlConditionedStatementFailCondition.AddHit(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
             <summary>
            add hit for field</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult">
             <summary>
            derives from the enumerator EnumResult too add sql extension specific functionality</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.#ctor(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.ResultType,Microsoft.SqlServer.Management.Common.DatabaseEngineType)">
             <summary>
            constructor, receives a StatementBuilder and a ResultType</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.AddSpecialQuery(System.String,System.String)">
             <summary>
            add the special query for the specified database</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.GetSql(System.Data.DataRow,System.String)">
             <summary>
            build the tsql for a database</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.GetUse(System.Data.DataRow)">
             <summary>
            get the use statement for this database list row
             ( its a use in the rightmost database name )</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.IsDatabaseListEqual(System.Data.DataRow,System.Data.DataRow)">
             <summary>
            compare all but the last element
            comparisons are made in the most restricted way , without collation because 
            the database names are all from sysdatabases , so they must mach exactly in order to be equal.</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.BuildSql">
             <summary>
            return the tsql that will provide the result for the user</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.GetSingleDatabaseSql">
             <summary>
            get the tsql the would be run in a single database, without 'use'</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.PostProcessFields">
             <summary>
            unused ????</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.NameProperties">
             <summary>
            property name for database used in DatabaseLevel</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.SchemaPrefixProperties">
            <summary>
            property name for schema used in the DatabaseLevel</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.SpecialQuery">
             <summary>
            special query</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.LastDbLevelSet">
             <summary>
            no further procesing is necessary for the database level
            set in DatabaseLevel</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.StatementBuilder">
             <summary>
            get/set the StatementBuilder</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.Level">
             <summary>
            How many databases deep are we</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.Databases">
             <summary>
            list of databases trough which the query 
            must be executed can have multiple database levels</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.SchemaPrefixes">
            <summary>
            list of schemas that must be substituted into the query
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult.MultipleDatabases">
             <summary>
            true if the tsql will have to be run in more than one database</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LinkField">
             <summary>
            component of link multiple
            specifies the link fileld name, type and 
            value that is dynamically resoolved</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LinkField.Type">
             <summary>
            type of link field , see LinkFieldType enum</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LinkField.Field">
             <summary>
            link field name</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LinkField.Value">
             <summary>
            place holder for the value calculated for this link field</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple">
             <summary>
            encapsulates a concept used in many constructs in the 
            xml configuration file: creating an expression based on one or more fields</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple.Init(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadMultipleLink)">
             <summary>
            init with xml reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple.SetLinkFields(System.Collections.ArrayList)">
             <summary>
            set the list of link fields</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple.GetSqlExpression(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase)">
             <summary>
            calculate the tsql expression based on the format and on the link fields values</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple.SetSqlExpression(System.String)">
             <summary>
            set the tsql expression to be expr</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple.HasLinkFields">
             <summary>
            true if it has link fields
             ( if false then we have a constant expression )</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple.LinkFields">
             <summary>
            get the list of link fields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LinkMultiple.No">
             <summary>
            get the number of link fields</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObject">
            <summary>
            SqlObject adds to SqlObjectBase logic to initialize from an xml file </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase">
            <summary>
            main work horse for the sql enumerator. it generates the tsql for a level and 
            comunicates with the other levels </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.#ctor">
            <summary>
            Default contructor </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.SetUrn(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            set's the Urn up to this level 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.GetSqlProperty(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.ObjectPropertyUsages)">
            <summary>
            get the property field if it is legal for the usage, else throw</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddFilterProperty(System.String)">
            	<summary>
             the xpath scanner has detected that this property is used in filter
            add whatever is required to support it, return value </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddOrderByProperty(System.String)">
            	<summary>
             the xpath scanner has detected that this property is used in orderby
            add whatever is required to support it, return value	</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddOrderByProperty(System.String,System.Boolean)">
            <summary>
            Add the information that the TSQL is ordered by the property name
            if overrideFlags is tru don't check if it is legal to use this property for order by</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddLinkProperty(System.String)">
            <summary>
            add whatever is required to support it, return value </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddConditionalsJustPropDependencies(System.String)">
            <summary>
            add whatever is required to support it</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddConditionals(System.String)">
            	<summary>
            add sql wich is necessary if the property: field, is requested </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.RetrieveParentRequest">
            <summary>
            Retrive the request that will be sent to the parent level. 
            we must comunicate wht info we need from the parent level here</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddLinkProperties(Microsoft.SqlServer.Management.Sdk.Sfc.LinkFieldType,System.Collections.ArrayList)">
            <summary>
            Add link properties in linkFields
            lft indicates which side of the link pair ( local parent ) is to be added </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.IntegrateParentResult(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            	<summary>
            combine StatementBuilder from this level with what was received in the result from the parent level</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.PrepareGetData(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            prepare to do main work and fill StatementBuilder with the information for this level</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.GetData(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            fill StatementBuilder with the information for this level </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.BeforeStatementExecuted(System.String)">
            <summary>
            Allow subclasses to add anything to the statement
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.BuildStatement(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            build statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddSpecialQuery(System.String,System.String)">
            <summary>
            Add the special query to the tsql</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.BuildResult(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            	<summary>
            	Based on the requested result type and on the result from the parent level 
            return the requested info from this level</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.FillDataWithUseFailure(Microsoft.SqlServer.Management.Sdk.Sfc.SqlEnumResult,Microsoft.SqlServer.Management.Sdk.Sfc.ResultType)">
            <summary>
            Get data from Sql Server. If we fail to get into a database then ignore that database</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.FillData(Microsoft.SqlServer.Management.Sdk.Sfc.ResultType,System.Collections.Specialized.StringCollection,System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
            <summary>
            n queries to prepare 
            and the last one to fill the data</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.ClearHits">
            <summary>
            clear all the conditional tsql which was activated for the fields in this request</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddPropertyForFilter(System.String)">
            <summary>
            name property is used in filter</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddConstantForFilter(System.String)">
            <summary>	
            FilterDecoder reports that a constant is used in filter
            gives client a chance to modify it</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.ResolveLocalLinkLinks">
            <summary>
            resolve all links which can be resolved at the local level</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.StoreInitialState">
            <summary>
            pre initialize the object with the static info. ( resolve local links )</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.RestoreInitialState">
            <summary>
            get the object in a clean state remove whatever was changed to resolve the current request</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.ResolveComputedField(System.String)">
            <summary>
            a computed field has been used. 
            return its dynamically calculated value</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.PostProcess(Microsoft.SqlServer.Management.Sdk.Sfc.EnumResult)">
            <summary>
            execute any PostProcess actions</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.GetAliasPropertyName(System.String)">
            <summary>
            get the property name acording with the alias rules set in the request</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddOrderByInDatabase">
            <summary>
            add the order by clause when the tsql runs inside one database</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.AddOrderByAcrossDatabases">
            <summary>
            add the order by clause when the tsql runs across databases</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.GetFixedFilterValue(System.String)">
            <summary>
            get the filter value the we know for sure the is equal to a fixed constannt value</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.StatementBuilder">
            <summary>
            The TSQL place holder + information that will be later transformed in TSQL</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.ParentLink">
            <summary>
            how the current level links with the parent level </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.RequestParentSelect">
            <summary>
            Storeage for a parent select ( when we need the tsql for the parent level, usually to insert it in prefix ) </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.OrderByRedirect">
            <summary>
            used to translate an order by on post process fields to other, supporting fields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.SpecialQuery">
            <summary>
            stores a query used to test a condition , for example that a table needed to resolve this level
            exists, if that fails then the empty set is returned rather then exception</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.ConditionedSqlList">
            <summary>
            prefix, postfix etc, that must be added when certain fields are requested</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.PropertyLinkList">
            <summary>
            links for properties</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.PostProcessList">
            <summary>
            post processes for the level</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.Distinct">
            <summary>
            the result must be distinct</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.SqlRequest">
            <summary>
            the SqlRequest that this level must resolve</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.ObjectName">
            <summary>
            Level name</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.ResultTypes">
            <summary>
            reports the ResultTypes supported by this level</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase.CalculateParentRequest">
            <summary>
             Returns true if we are in the process of building
             a parent request
             Returns false if we are building a result</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObject.Initialize(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock)">
            <summary>
            initialize the connection info and xpath information </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObject.LoadInitData(System.String,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            load the specified file for the specified version </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObject.LoadInitDataFromAssembly(System.Reflection.Assembly,System.String,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            load the specified file for the specified version from the specified assembly </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObject.LoadAndStore(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc,System.Reflection.Assembly,System.Collections.Specialized.StringCollection)">
            <summary>
            load from the specfied xml doc in the assemblyObject assembly the fields
            specified in requestedFields; also after loading initialize static links between 
            the properties. </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObject.Load(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc,System.Reflection.Assembly,System.Collections.Specialized.StringCollection)">
            <summary>
            load from the specfied xml doc in the assemblyObject assembly the fields
            specified in requestedFields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObject.ResourceAssembly">
            <summary>
            abstract function that returns the assembly in which this object has the configuration file</summary>
            this function is abstract because only domain enumerator can implement it correctly
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty">
            	<summary>
            class ecapsulating information about a property </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty)">
            	<summary>
            intialize from xml reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.GetValue(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase)">
            	<summary>
            get the tsql value rendering the link multiple</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.GetTypeWithSize">
            	<summary>
            get the tsql type with the size specified</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.GetValueWithCast(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase)">
            	<summary>
            get the tsql value with cast if needed</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.InitSessionValue(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase)">
            	<summary>
            init a temporary value with the tsql representation of the type</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.Add(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase,System.Boolean)">
            	<summary>
            ad this property to the StatementBuilder
            isTriggered=true means that it was not requested by the user but is 
            necessary for a property requested by the user</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.LinkFields">
            	<summary>
            get the link fields 
            the links necessary to get the value for this property</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.Value">
            	<summary>
            get/set the tsql value for this property</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.SessionValue">
            	<summary>
            get set the temporary value</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.DBType">
            	<summary>
            get the tsql type without size</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.Size">
            	<summary>
            get the size</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty.Alias">
            	<summary>
            get the alias name for this property</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ParentLink">
            	<summary>
            encapsulates the link between this level and the parent level</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ParentLink.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadParentLink)">
            	<summary>
            intialize with xml reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ParentLink.Init(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSimpleParentLink)">
            	<summary>
            read a simple parent link</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ParentLink.LinkFields">
            	<summary>
            return the list of link fields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ParentLink.LinkMultiple">
            	<summary>
            return the link multiple</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPostProcess">
            	<summary>
            represents the need to execute post process for a particular field</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPostProcess.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess,System.Reflection.Assembly)">
            	<summary>
            initialize with xml reader, and asembly in which the class that knows to do the post process resides</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPostProcess.AddHit(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
            	<summary>
            add hit </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPostProcess.Register(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase)">
            	<summary>
            register and prepare the post process for run</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPostProcess.AddAll(Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList,Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess,System.Reflection.Assembly)">
            	<summary>
            read alll post_process tags from the configuration xml</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPostProcess.TriggeredFields">
            	<summary>
            list of triggered fields for this post process
             ( fields that are needed to compute the value for the field requested by the user )</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPostProcess.AcceptsMultipleHits">
            	<summary>
            always true</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink">
            	<summary>
            class encapsulating a property_link
            used do indicate joins</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink)">
            	<summary>
            initialize with reader from xml
            by reading a property_link tag</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty)">
            	<summary>
            initialize by reading a property tag ( attribute table )</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings)">
            	<summary>
            initialize by reading a setting tag ( attribute main_table )</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.AddAll(Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList,Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink)">
            	<summary>
            add all property_link tags</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.Add(Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList,Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty)">
            	<summary>
            add from a property tag</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.Add(Microsoft.SqlServer.Management.Sdk.Sfc.ConditionedSqlList,Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings)">
            	<summary>
            add from setting tag</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.GetTableNameWithAlias(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase)">
            	<summary>
            get the table name with alias in tsql format</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.GetFilter(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase)">
            	<summary>
            get the filter for the join</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.AddHit(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectBase,Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
            	<summary>
            add hit for this field 
            update the StatementBuilder</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlPropertyLink.Table">
            	<summary>
            get set the joined table name</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest">
            	<summary>
            SqlRequest extends the enuemrator Request 
            with sql extension specific fields</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest.#ctor">
            	<summary>
            default constructor</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Request)">
            	<summary>
            initialize from a Request</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest.SetLinkFields(System.Collections.ArrayList)">
            	<summary>
            set a list of link fields ( will we need to be have thei value resolved )</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest.MergeLinkFileds(Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest)">
            	<summary>
            add the link fields fom another SqlRequest</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest.ResolveDatabases">
            	<summary>
            if false the database level does not special processing</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest.LinkFields">
            	<summary>
            get the list of link fields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlRequest.PrefixPostfixFields">
            	<summary>
            doesn't look to be used</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder">
            	<summary>
            constructs the tsql that will get the data	</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.#ctor">
            	<summary>
            default constructor</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.SetInternalSelect(System.Text.StringBuilder)">
            	<summary>
            set the select statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.IsEmpty(System.Text.StringBuilder)">
            	<summary>
            returns true if s is empty</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddElement(System.Text.StringBuilder,System.String,System.String,System.String,System.String)">
            	<summary>
            adds value to a string builder using the specified delimiters</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddUrn(System.String)">
            	<summary>
            add to URN</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddPrefix(System.String)">
            <summary>
            add to PREFIX</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddCondition(System.String)">
            <summary>
            add a CONDITION which if is true will make the result set be empty</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddPostfix(System.String)">
            	<summary>
            add to POSTFIX</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddFields(System.String)">
            	<summary>
            add to the SELECT fields list</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddFrom(System.String)">
            	<summary>
            add a clasic join to the FROM clause</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddJoin(System.String)">
            	<summary>
            add a new syntax join to the FROM clause</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddWhere(System.String)">
            	<summary>
            add to the WHERE clause using AND</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddOrderBy(System.String)">
            	<summary>
            add to the ORDER BY clause</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddOrderBy(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.Direction)">
            	<summary>
            add to the ORDER BY clause spcifying direction</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddOrderBy(System.String,System.String,Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy.Direction)">
            	<summary>
            add to ODER BY clause by name if the property apears in the SELECT list
             if not add it by value</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddProperty(System.String,System.String)">
            	<summary>
            add property to the SELECT list with alias</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.Merge(Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder)">
            	<summary>
            merge two StatementBuilder instances</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.InternalSelect">
            	<summary>
            compute the select statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.ClearPrefixPostfix">
            	<summary>
            clear the prefix and the postfix statements</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.MakeCopy">
            	<summary>
            make a copy of this StatementBuilder</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.StoreParentProperty(Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty,System.Boolean)">
            	<summary>
            add a property that is requested in the SELECT
             if bTriggered is true thanm the property is not directly requested by the user
             but is needed to resolve one of the properties requested by the user</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.GetSqlNoPrefixPostfix">
            <summary>
            clear the prefix and postfix and get the remaining sql statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddStoredProperties">
            	<summary>
            add the internally stored properties in the SELECT clause</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.GetOrderBy">
            	<summary>
            get the order by statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.ClearOrderBy">
            	<summary>
            clear the order by statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.GetCreateTemporaryTableSqlConnect(System.String)">
            	<summary>
            sql that creates a temporary table that can hold the requested properties for 
             this object-> it can only be asked for the last object in xpath</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.AddColumn(System.Text.StringBuilder,Microsoft.SqlServer.Management.Sdk.Sfc.SqlObjectProperty,System.Boolean@,System.Boolean)">
            	<summary>
            add a column in the create temporary table statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.SelectAndDrop(System.String,System.String)">
            	<summary>
            generate tsql to select from the specified temporary table and then drop it</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.ClearFailCondition">
            	<summary>
            clear the CONDITION which if true makes the result be enpty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.ParentProperties">
            	<summary>
            list of properties selected</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.NonTriggeredProperties">
            	<summary>
            position from where the triggered ( not requested by user ) 
             properties start</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.PostProcessList">
            	<summary>
            list of prost processes that must be run</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.Distinct">
            	<summary>
            the select must be distinct</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.IsFirstJoin">
            	<summary>
            this is the first table added to the from clause</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.From">
            	<summary>
            returns the FROM clause</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.SqlStatement">
            	<summary>
            compute the whole sql statement ( including prefix / postfix )</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.StatementBuilder.SqlPostfix">
            	<summary>
            get the postfix statement</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IUrn">
            <summary>
             Interface that provides access to XPathExpression and String value of Urn.
             Implemented by KeyChain and UrnImpl
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.XPathExpression">
            <summary>
             Get XPathExpression for this object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.Value">
            <summary>
             Get textual value for this object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.IUrn.DomainInstanceName">
            <summary>
             Get domain instance name
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn">
            <summary>
             Expresion used to identify one or more objects
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.#ctor(System.String)">
            <summary>
            initialize with string value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.IUrn)">
            <summary>
            initialize with string value
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.op_Equality(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Urn equality operator
            </summary>
            <param name="u1"></param>
            <param name="u2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.op_Inequality(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Urn unequal operator
            </summary>
            <param name="urn1"></param>
            <param name="urn2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.Equals(System.Object)">
            <summary>
            Equals() and GetHashCode() are overriden by all instance classes 
            because we need them to implement equality operators (== and !=)
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.op_Implicit(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)~System.String">
            <summary>
             cast to String
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.op_Implicit(System.String)~Microsoft.SqlServer.Management.Sdk.Sfc.Urn">
            <summary>
             cast from String
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.ToString">
            <summary>
             cast to String
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.GetHashCode">
            <summary>
            Returns hash code
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.Fixed(System.Object)">
            <summary>
             true if the xpath points to only one object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.GetAttribute(System.String,System.String)">
            <summary>
            get the property value from filter from the specified level
            </summary>
            <param name="attributeName">property name</param>
            <param name="type">level name</param>
            <returns>attribute name, null if no attribute with that name</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.GetAttribute(System.String)">
            <summary>
            get the property value from filter from the last level
            </summary>
            <param name="attributeName">property name</param>
            <returns>attribute name, null if no attribute with that name</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.GetNameForType(System.String)">
            <summary>
            get the @Name attribute from the filter of the specified level
            </summary>
            <param name="type">level name</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.EscapeString(System.String)">
            <summary>
            escape a string to make it suitable for use inside the XPATH expression
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.UnEscapeString(System.String)">
            <summary>
            remove the escaping previously added to a string for insertion in the XPATH
            </summary>
            <param name="escapedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.Globalization.CompareOptions[],System.Globalization.CultureInfo)">
            <summary>
            comparares to Urns
            </summary>
            <param name="u1"></param>
            <param name="u2"></param>
            <param name="compInfoList"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.IsValidUrn">
            <summary>
            Verifies passed string is a valid Urn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.IsValidUrnSkeleton">
            <summary>
            Verifies passed string is a valid UrnSkeleton
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.XPathExpression">
            <summary>
            syntactical tree representation
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.Value">
            <summary>
             the urn expresion as string
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.DomainInstanceName">
            <summary>
             Get domain instance name
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.Type">
            <summary>
             the type of the object identified by the urn
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.Parent">
            <summary>
             the Urn without the last level
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UrnImpl.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UrnImpl.#ctor(System.String)">
            <summary>
            initialize with string value
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.UrnImpl.XPathExpression">
            <summary>
            syntactical tree representation
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.UrnImpl.Value">
            <summary>
             the urn expresion as string
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Util">
            <summary>
            Contains common utility functions
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Util.DbTypeToClrType(System.String)">
            <summary>
            Convert a database type name to the equivalent CLS type
            </summary>
            <param name="strDBType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Util.TransformToRequest(System.Data.DataSet,Microsoft.SqlServer.Management.Sdk.Sfc.ResultType)">
            <summary>
            Transform a dataset into the expected enumeration result type
            </summary>
            <param name="ds"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Util.EscapeString(System.String,System.Char)">
            <summary>
            Escape a particular character in a string
            </summary>
            <param name="value">The string</param>
            <param name="escapeCharacter">The character to escape</param>
            <returns>The equivalent string with the character escaped</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Util.LoadAssembly(System.String)">
            <summary>
            Load assembly replacing it's name.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlCharType">
            The XmlCharType class is used for quick character type recognition
            which is optimized for the first 127 ascii characters.
            
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead">
             <summary>
            base class for parsing a xml configuration file</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>
            intialize from another XmlReader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.#ctor(Microsoft.SqlServer.Management.Common.ServerVersion,System.String,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
             <summary>
            initialize with version and alias</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.#ctor">
             <summary>
            default constructor</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.Close">
             <summary>
            finish parsing this element; step until the next element</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.Skip">
             <summary>
            skip this element</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.IsElementWithCheckVersion(System.String)">
            <summary>
            Check if the current Element has the specified name, skipping any
            version elements along the way for which the version requirements
            aren't met
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.GetAliasString(System.String)">
             <summary>
            apply the alias on the string str and return the result</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.GetFields(System.String)">
             <summary>
            read a 'fields' entry ( list of fields separated by '#' )</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.GetTextOfElement">
             <summary>
            reads the text of the current element if available
            it assumes the curent element is empty or has inside it either a text node or 
            an element node. probably a link_multiple.</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.Reader">
             <summary>
            get the XmlTextReader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.Closed">
             <summary>
            true if the current element has been fully read</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.DatabaseEngineType">
             <summary>
            get database engine type</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.DatabaseEngineEdition">
            <summary>
            The DatabaseEngineEdition of the connection
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.Version">
             <summary>
            get server version</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead.Alias">
             <summary>
            an alias that is to be used when parsing the file</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadRepeated">
             <summary>
            read an element that is repated more then once
             ( e.g. a list of property tags )</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadRepeated.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with the reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadRepeated.#ctor">
             <summary>
            default constructor</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadRepeated.Next">
             <summary>
            step to the next element
            return false if there are no more siblings</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadRepeated.Next(System.String)">
             <summary>
            step to the next element with the given name</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc">
             <summary>
            read an xml configuration file</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc.#ctor(Microsoft.SqlServer.Management.Common.ServerVersion,System.String,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
             <summary>
            initialize server version and alias</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc.LoadFile(System.Reflection.Assembly,System.String)">
             <summary>
            load the file attached as a resource to the assembly</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc.Close">
             <summary>
            close the reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc.ReadUnion">
             <summary>
            try to read an UNION tag, return true if succesfull</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc.Settings">
             <summary>
            read a SETTINGS tag</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadDoc.Properties">
             <summary>
            read a PROPERTIES tag</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperties">
             <summary>
            class for reading a list of properties</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperties.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>
            intialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperties.Property">
             <summary>
            get a PROPERTY</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperties.Include">
             <summary>
            get an INCLUDE</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadInclude">
             <summary>
            class for reading an INCLUDE</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadInclude.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>
            intialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadInclude.File">
             <summary>
            get attribute - file to be included</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadInclude.TableAlias">
             <summary>
            get attribute - alias to be used</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadInclude.RequestedFields">
             <summary>
            get attribute - fields to be loaded</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty">
             <summary>
            class for reading a property</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Name">
             <summary>
            get attribute - property name</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.ReadOnly">
             <summary>
            get attribute - property is readonly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.ClrType">
             <summary>
            get the clr type for this property</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.ExtendedType">
             <summary>
            get attribute - if it is extended</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.DbType">
             <summary>
            get attribute - database type</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Expensive">
             <summary>
            get attribute - if it is expensive</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Cast">
             <summary>
            get attribute - if it requires cast</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Hidden">
             <summary>
            get attribute - if it should be hidden from the user</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Usage">
             <summary>
            get attribute - whre can this property be used ( request, filter, order by)</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Value">
             <summary>
            get attribute - tsql representation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Table">
             <summary>
            required table</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Link">
             <summary>
            get attribute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.Size">
             <summary>
            get attribute - size if it is a string for example</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.HasPropertyLink">
             <summary>
            has lik to other properties</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadProperty.MultipleLink">
             <summary>
            read a multiple link</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings">
             <summary>
            class to read the SETTING tag</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.MainTable">
             <summary>
            get attribute - main table ( not used anymore )</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.AdditionalFilter">
             <summary>
            get attribute - filter ( not used anymore )</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.Distinct">
             <summary>
            get attribute - the select is distinct</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.HasPropertyLink">
             <summary>
            main table or filter has been set</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.ParentLink">
             <summary>
            read the parent link</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.FailCondition">
             <summary>
            read the fail condition</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.RequestParentSelect">
             <summary>
            read the request_parent_select</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.Include">
             <summary>
            read the include</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.PropertyLink">
             <summary>
            read the property link</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.Prefix">
             <summary>
            read prefix</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.Postfix">
             <summary>
            read postfix</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.PostProcess">
             <summary>
            read post_process</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.OrderByRedirect">
             <summary>
            read order_by_redirect</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSettings.SpecialQuery">
             <summary>
            read special query</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadParentLink">
             <summary>
            class to read a parent link</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadParentLink.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initalize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadParentLink.SimpleParentLink">
             <summary>
            read a simple parent link</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadParentLink.MultipleLink">
             <summary>
            read a multiple_link</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelect">
             <summary>
            class to read a request_parent_select</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelect.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelect.Field">
             <summary>
            get attribute - field</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSimpleParentLink">
             <summary>
            class to read a simple parent linkd</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSimpleParentLink.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSimpleParentLink.Next">
             <summary>
            go to the next local-parent pair ( link tag )</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSimpleParentLink.Local">
             <summary>
            get the local property</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSimpleParentLink.Parent">
             <summary>
            get the parent property</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelectField">
             <summary>
            claa to read a parent select field</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelectField.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelectField.Next">
             <summary>
            go to the next field</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlRequestParentSelectField.Name">
             <summary>
            get attribute - name</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadMultipleLink">
             <summary>
            class to read a multiple link</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadMultipleLink.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadMultipleLink.No">
             <summary>
            get attribute - number of links</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadMultipleLink.Expression">
             <summary>
            get attribute - link expression</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadMultipleLink.LinkFields">
             <summary>
            read the link_fileds</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LinkFieldType">
             <summary>
            type of the field in link</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.LinkFieldType.Parent">
             <summary>   
            parent property</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.LinkFieldType.Local">
             <summary>       
            local property</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.LinkFieldType.Computed">
             <summary>
            computed property</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.LinkFieldType.Filter">
             <summary>
            property is deduced from filter</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadLinkFields">
             <summary>
            class to read link_fields</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadLinkFields.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>
            initialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadLinkFields.Type">
             <summary>
            get attribute - link filed type</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadLinkFields.Field">
             <summary>
            get attribute - field name</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadLinkFields.DefaultValue">
             <summary>
            get attribute - default value if it cannot be deduced from the filter</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink">
             <summary>
            class to read a property link</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.Next">
             <summary>
            get attribute - get the next property link</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.Fields">
             <summary>
            get attribute - list of triggering fields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.Table">
             <summary>
            get attribute - table name</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.TableAlias">
             <summary>
            get attribute - table alias in the query</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.InnerJoin">
             <summary>
            get attribute - join table name</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.ExpressionIsForTableName">
             <summary>
            get attribute - expression is not for the filter by it is the actuall table name 
            ( used to create the table name with multiple link )</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.LeftJoin">
             <summary>
            get attribute - read the left join table</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.Filter">
             <summary>
            get attribute - read the filter</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadPropertyLink.MultipleLink">
             <summary>
            get a multiple_link</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement">
             <summary>
            class to read a conditioned statement</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement.Sql">
             <summary>
            get attribute - tsql</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement.Fields">
             <summary>
            get attribute - list of triggering fields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatement.MultipleLink">
             <summary>
            read multiple_link</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPrefix">
             <summary>
            class to read a prefix tag</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPrefix.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPrefix.Next">
             <summary>
            go to the next prefix</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementFailCondition">
             <summary>
            class to read a fail_condition</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementFailCondition.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementFailCondition.Next">
             <summary>
            go to the next fail_condition</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostfix">
             <summary>
            class to read postfix</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostfix.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostfix.Next">
             <summary>
            get next postfix</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess">
             <summary>
            class to read a post_process</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess.Next">
             <summary>
            get the next post process</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess.ClassName">
             <summary>
            get attribute - post process clr class name</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess.Fields">
             <summary>
            get attribute - list of triggering fields</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadConditionedStatementPostProcess.TriggeredFields">
             <summary>
            get attribute - list of triggered fields</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadOrderByRedirect">
             <summary>
            read an redirect_orderby</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadOrderByRedirect.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadOrderByRedirect.Next">
             <summary>
            get next redirect_orderby</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadOrderByRedirect.Field">
             <summary>
            get attribute - field for which to redirect</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadOrderByRedirect.RedirectFields">
             <summary>
            get attribute - list of redirect fields</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSpecialQuery">
             <summary>
            class to read a special query</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSpecialQuery.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XmlRead)">
             <summary>   
            initialize with reader</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSpecialQuery.Database">
             <summary>
            get attribute - database name</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XmlReadSpecialQuery.Query">
             <summary>
            get attribute - query</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility">
            <summary>
            colection of functions for parsing an xml using SAX
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.#ctor">
            <summary>
            default constructor - hidden
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.SelectChildrenByName(System.Xml.XmlTextReader,System.String)">
            <summary>
            select children elements by name
            </summary>
            <param name="reader"></param>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.SelectChildrenByAttribute(System.Xml.XmlTextReader,System.String,System.String)">
            <summary>
            select children elements by attribute
            </summary>
            <param name="reader"></param>
            <param name="strAttribute"></param>
            <param name="strValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.SelectNextSibling(System.Xml.XmlTextReader)">
            <summary>
            select the next sibbling of the current element
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.SelectNextElementOnLevel(System.Xml.XmlTextReader)">
            <summary>
            select the next element on the same level
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.SelectElementByName(System.Xml.XmlTextReader,System.String)">
            <summary>
            select the first eleemtn with the given name
            </summary>
            <param name="reader"></param>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.GetFirstElementOnLevel(System.Xml.XmlTextReader)">
            <summary>
            get the first element on the current level
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.GoDownOneLevel(System.Xml.XmlTextReader)">
            <summary>
            read until we go down one level
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.GoUpOneLevel(System.Xml.XmlTextReader)">
            <summary>
            read until we go up one level
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.SelectNextElement(System.Xml.XmlTextReader)">
            <summary>
            select the next element
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.SelectNextElement(System.Xml.XmlTextReader,System.String)">
            <summary>
            select the next element by name
            </summary>
            <param name="reader"></param>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XmlUtility.IsElement(System.Xml.XmlTextReader,System.String)">
            <summary>
            true if the current entity is an element with the given name
            </summary>
            <param name="reader"></param>
            <param name="strName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.Success">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.UnclosedString">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.TokenExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.NodeTestExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.ExpressionExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.NumberExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.BooleanExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.QueryExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.UnknownMethod">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.TestExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidArgument">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidNumArgs">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidName">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidNodeType">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidToken">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.FunctionExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.NodeSetExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.NoXPathActive">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.NotSupported">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidPattern">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.BadQueryObject">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidDataRecordFilter">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidPrefix">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.NoSelectedSet">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.MovedFromSelection">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.ConstantExpected">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.InvalidVariable">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.UndefinedXsltContext">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.BadContext">
            <summary>
            TODO
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode.Last">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException">
            <summary>
            exception denoting a syntax error in the xpath
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.#ctor(System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.#ctor(System.String,System.Exception)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode,System.String[])">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.XPathExceptionCode,System.String)">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.ErrorCode">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XPathException.Message">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression">
            <summary>
            syntactical representation of the XPATH expression
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.#ctor(System.String)">
            <summary>
            Constructs XPathExpression from a string
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.#ctor(System.Collections.Generic.IList{Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock})">
            <summary>
            Constructs the XPathExpression from a list of
            XPathExpressionBlocks.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.Compile(System.String)">
            <summary>
            compile the XPATH in the syntactical tree
            </summary>
            <param name="strXPathExpression"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.Load(Microsoft.SqlServer.Management.Sdk.Sfc.AstNode)">
            <summary>
            load from the .Net parser output
            </summary>
            <param name="ast"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.ToString">
            <summary>
            Returns the string representation of this expression.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.GetHashCode">
            <summary>
            Gets XPathExpression has code by combining individual block hash codes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.BlockExpressionSkeleton(System.Int32)">
            <summary>
            Returns the expression stripped of all filters, up to and
            including the given block index. For an expression
            "A/B/C", passing an index of 0 will get you "A", passing 1
            will get you "A/B", and passing 2 or higher will get you
            "A/B/C".
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.Compare(Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression,Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression,System.Globalization.CompareOptions[],System.Globalization.CultureInfo)">
            <summary>
            compare to expressions
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="compInfoList"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.GetAttribute(System.String,System.String)">
            <summary>
            get attribute for the given level from the filter
            </summary>
            <param name="attributeName">attribute name</param>
            <param name="type">level name</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.Item(System.Int32)">
            <summary>
            get the tree for the level given by the index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.Length">
            <summary>
            number of levels
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression.ExpressionSkeleton">
            <summary>
            Returns the expression stripped of all filters.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock">
            <summary>
            represents an XPATH level
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.#ctor(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode)">
            <summary>
            Name and FilterNode constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.Copy">
            <summary>
            make a shallow copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.ToString">
            <summary>
            Returns the string representation of this block.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.GetHashCode">
            <summary>
            Overrides Object.GetHashCode
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.AddFixedProperty(System.String,System.Object)">
            <summary>
            add a fixed property to the internal list
            </summary>
            <param name="name"></param>
            <param name="fnc"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.AddFixedProperty(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator)">
            <summary>
            add fixed property if valid
            </summary>
            <param name="fno"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.ComputeFixedProperties(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode)">
            <summary>
            parse the tree and indentify fixed properties
            ( in the form [@Name='ddd'] or [@Name = 'ddd' and ( ) ]
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.GetUniqueAttribute(Microsoft.SqlServer.Management.Sdk.Sfc.FilterNode)">
            <summary>
            get the value of an attribute for a filter of the form [@Attribute = ddd]
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.GetAttributeFromFilter(System.String)">
            <summary>
            get the attribute from filter if its value is specified
            </summary>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.Name">
            <summary>
            level name
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.Filter">
            <summary>
            syntactical tree representation of a filter block
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpressionBlock.FixedProperties">
            <summary>
            get the list of fixed properties
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollectionInfo">
            <summary>
            Class that wraps collections. PS expands collections in the pipeline by default
            for enumreable types, so this stops that.
            I moved this into SFC, as it needs to be shared between cmdlets and provider. I did
            not want to add a new shared GAC'ed assembly to setup for this, hence explains why it
            is here.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ConnectionHelpers">
            <summary>
            Provides methods to provide database-scoped connections in place of a server-scoped connection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConnectionHelpers.UpdateConnectionInfoIfCloud(System.Object@,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
                takes care of updating connectionInfo to take care of Cloud DB
                 as Database Scope Operations in Cloud DB need a direct connection to the Database in question
                 it checks if the connectionInfo represents a CloudDB connection
                 &amp; if so, transparently switches the connection based on the database name in the request.Urn
            </summary>
            <param name="connectionInfo"></param>
            <param name="urn"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConnectionHelpers.UpdateConnectionInfoIfContainedAuthentication(System.Object@,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            If using contained authentication, adds a database name to the connection string and validates the caller has access using the credential
            </summary>
            <param name="connectionInfo"></param>
            <param name="urn"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConnectionHelpers.GetServerConnection(System.Object)">
            <summary>
            Returns a ServerConnection object if the input is either a SqlConnectionInfoWithConnection or a ServerConnection, null otherwise
            </summary>
            <param name="connectionInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ConnectionHelpers.ToScopedServerConnection(System.Data.SqlClient.SqlConnection,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Given a SqlConnection and Urn, returns the ServerConnection scoped to the database specified by the Urn.        
            If the Urn does not require a database scope, the ServerConnection will be scoped to whichever database the input SqlConnection
            is using.
            </summary>
            <param name="sqlConnection"></param>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IScriptedByParent">
            <summary>
            Inform Sfc that this object is scripted by its parent and does not generate its own CRUD scripting.
            There are no methods to implement, this is a sentinel interface.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCreatable.ScriptCreate">
            <summary>
            Produce the script to create this object to storage in its current state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDroppable.ScriptDrop">
            <summary>
            Produce the script to drop this object from storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcAlterable.ScriptAlter">
            <summary>
            Produce the script to alter the storage to match the current object state.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable">
            For single string-oriented renaming use Common.IRenamable
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.Rename(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey)">
            <summary>
            Rename this object to the given key and update storage to reflect it.
            This assumes the object can logically rename itself based on all or part of the key data,
            and Sfc internally will adjust the object's Key and collection membership.
            A rename event will fire after internal updates succeed to allow listeners to adjust
            similar external collections and such.
            For single string-oriented renaming see ISfcRenamable.
            For KeyChain-oriented moving see ISfcMovable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcRenamable.ScriptRename(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey)">
            <summary>
            Produce the script to rename this object to the given key.
            This assumes the object can logically rename itself based on all or part of the key data.
            For single string-oriented renaming see ISfcRenamable.
            For KeyChain-oriented moving see ISfcMovable.
            </summary>
            <returns>The script to rename this object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcMovable.Move(Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance)">
            <summary>
            Move this object under the given parent object and update storage to reflect it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcMovable.ScriptMove(Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance)">
            <summary>
            Produce the script to move this object under the given parent object.
            </summary>
            <returns>The script to move this object</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetOptions">
            <summary>
            Possible specialized PhysicalFacet types
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetOptions.None">
            No options
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetOptions.ReadOnly">
            Read-only facet
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetAttribute.#ctor">
            <summary>
            Creates a PhysicalFacet with no options selected
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetAttribute.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetOptions)">
            <summary>
            Creates a PhysicalFacet with the options specified in the constructor
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.PhysicalFacetAttribute.IsReadOnly">
            <summary>
            Indicates whether the facet is read-only
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.RootFacetAttribute">
            <summary>
            Custom attribute that identifies root facets 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.RootFacetAttribute.#ctor(System.Type)">
            <summary>
            Ctor--takes type of root as parameter
            </summary>
            <param name="rootType"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.RootFacetAttribute.RootType">
            <summary>
            Returns rootType originally specified in ctor
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IDmfFacet">
            <summary>
            Base Facet interface - indicates inheriting interface is a Facet
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcException">
             <summary>
             This is the base class for all SFC exceptions. Never throw this exception directly.
            
             TODO: Left the Serializable flag in and the FxCop directives. We need to apply these
             to all other exception classes (next improvement).
             </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyReadOnlyException">
            <summary>
            This exception gets thrown when trying to set a readonly property
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyReadOnlyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization helper
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyNotSetException">
            <summary>
            This exception gets thrown when a property is not set but it
            is required for the current operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyNotSetException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization helper
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidKeyException">
            <summary>
            This exception gets thrown when a property is not set but it
            is required for the current operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidKeyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization helper
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidKeyChainException">
            <summary>
            This exception gets thrown when a key chain is set on an object
            but the parent is already set to a different parent than the keychain parent
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidRenameException">
            <summary>
            This exception is thrown when an invalid rename is attempted.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidMoveException">
            <summary>
            This exception is thrown when an invalid move is attempted.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectInitializationException">
            <summary>
            This exception gets thrown when a property is not set but it
            is required for the current operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization helper
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidArgumentException">
            <summary>
            This exception is thrown any time an invalid argument is passed into an Sfc class or service.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidArgumentException.#ctor(System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidStreamException">
            <summary>
            This exception is thrown any time a stream that is closed or in an invalid error state is passed into an Sfc class or service.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidStreamException.#ctor(System.String)">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializationException">
            <summary>
            This exception is thrown during serialization if the output generated is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializationException.#ctor">
            <summary>
            TBD
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcNonSerializableTypeException">
            <summary>
            This exception is thrown during serialization if the output generated is invalid.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnregisteredXmlDomainException">
            <summary>
            This exception is thrown during deserialization if the Xml contains an unregistered domain
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnregisteredXmlTypeException">
            <summary>
            This exception is thrown during deserialization if the Xml contains an unregistered type within a domain
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcNonSerializablePropertyException">
            <summary>
            This exception is thrown during deserialization if the Xml contains invalid properties.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnsupportedVersionSerializationException">
            <summary>
            This exception is thrown during deserialization if the Xml contains invalid properties.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcEmptyXmlException">
            <summary>
            This exception is thrown during deserialization if the Xml is either empty or does not contain
            any xml that could be deserialized
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidXmlParentTypeException">
            <summary>
            This exception is thrown during deserialization if a parent Type is given and it is not the correct Type to parent the top-level
            objects the Xml contains
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidQueryExpressionException">
            <summary>
            This exception is thrown when an invalid type of query is passed to the ObjectQuery
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryConnectionUnavailableException">
            <summary>
            This exception is thrown during GetConnection(ObjectQueryMode) on a domain root object if a suitable connection cannot be returned
            to support the type of query mode requested. It is usually due to a muptiple query request with a server in single user mode, or some other
            inability to return a connection other than the current default one.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidStateException">
            <summary>
            This exception is thrown on attempt to perform an operation that is invalid for an object in given state
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCRUDOperationFailedException">
            <summary>
            This exception is thrown on attempt to perform an operation that is invalid for an object in given state
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcMissingParentException">
            <summary>
            Can't perform this operation when Parent isn't set
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectNotScriptableException">
            <summary>
            Can't find scripting operation for this object
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSecurityException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSecurityException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSecurityException.#ctor(System.String)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidConnectionContextModeChangeException">
            <summary>
            This exception gets thrown when an invlaid connection context mode change is attempted.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInvalidConnectionContextModeChangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization helper
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSqlCeNotInstalledException">
            <summary>
            This exception is thrown when SQLCE is not installed properly.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPathConversionException">
            <summary>
            Thrown when a URN to PS Path conversion fails.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPathConversionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPathConversionException.#ctor(System.String,System.Exception)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPathConversionException.#ctor(System.String)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPathConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDesignModeException">
            <summary>
            This exception is thrown when the Design Mode switch failed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDesignModeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDesignModeException.#ctor(System.String,System.Exception)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDesignModeException.#ctor(System.String)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDesignModeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnsupportedVersionException">
            <summary>
            This exception is thrown when a property in not supported for current Server Version.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnsupportedVersionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnsupportedVersionException.#ctor(System.String)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnsupportedVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUnsupportedVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite">
            <summary>
            A light weight interface exposing basic properties of a SfcDomain.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection">
            <summary>
            ISfcDomain domain roots must implement this interface.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection">
            <summary>
            Get the connection query on to backing storage. Defaults to assuming a single open query will exist at one time.
            </summary>
            <returns>The connection to use.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.SetConnection(Microsoft.SqlServer.Management.Common.ISfcConnection)">
            <summary>
            Sets the active connection for the domain root. This is used for domain instantiation / hopping.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection.GetConnection(Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode)">
            <summary>
            Get the connection to backing storage to support the requested query processing mode.
            Any connection which supports multiple open queries must assume that the regular connection returned by GetConnection() may be busy at any time.
            <param name="activeQueriesMode">Cache results, or use a live data reader iterator where Single or multiple open queries are expected.</param>
            </summary>
            <returns>The connection to use, or null to use Cache mode. Cache mode avoids connection and open data reader issues.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.GetLogicalVersion">
            <summary>
            Logical version indicates the changes in the OM of the domain. This acts independent of
            assembly fileversion or version.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainName">
            <summary>
            The name of the domain used to distinguish it from other domains. This is usually the end of the namespace qualifier.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomainLite.DomainInstanceName">
            <summary>
            The logical name of a domain instance usually derived from the connection and domain information.
            This name does not have to be unique on the client, but should be different whenever the server representation would be.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain">
            <summary>
            A root SfcInstance-derived object must implement ISfcDomain
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetType(System.String)">
            <summary>
            Get the System.Type of the Sfc object class within the domain for the given string name.
            </summary>
            <param name="typeName"></param>
            <returns>The type object, or null if the name is not a type in the domain.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetKey(Microsoft.SqlServer.Management.Sdk.Sfc.IUrnFragment)">
            <summary>
            Gets an instance of Key given urn fragment interface and domain
            </summary>
            <param name="urnFragment"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetExecutionEngine">
            <summary>
            Returns execution engine for this domain
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.GetTypeMetadata(System.String)">
            <summary>
            Given type, return metadata for that type
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain.UseSfcStateManagement">
            <summary>
            Return true if you want SFC-provided State management, or false otherwise
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain2">
            <summary>
            Extension for ISfcDomain to accommodate domain specific functionality
            like generating 'view' path for an object (as opposed to its 'physical' path)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain2.GetUrnSkeletonsFromType(System.Type)">
            <summary>
            
            </summary>
            <param name="inputType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcExecutionEngine">
            <summary>
            ISfcExecutionEngine is an abstraction over a domain-provided component that is able to execute an ISfcScript
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcExecutionEngine.Execute(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScript)">
            <summary>
            Execute a script
            </summary>
            <param name="script">Script to be executed</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcNotifyPropertyMetadataChanged">
            <summary>
            Notifies clients that a property metadata has changed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Name">
            <summary>
            Name of property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Type">
            <summary>
            Type of property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Enabled">
            <summary>
            Check whether the value is enabled or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Value">
            <summary>
            Value of property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Required">
            <summary>
            Indicates whether the property is required to persist the current state of the object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Writable">
            <summary>
            Indicates that Consumer should be theat this property as read-only
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Dirty">
            <summary>
            Indicates whether the property value has been changed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.IsNull">
            <summary>
            Indicates whether the properties data has been read, and is null
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty.Attributes">
            <summary>
            Aggregated list of custom attributes associated with property
            TODO: this needs to be delay-loaded
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertyProvider">
            <summary>
            This interface needs to be provided by top level classes (or by a base class of a top level class).
            It provides an interface into the object's properties.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertyProvider.GetPropertySet">
            <summary>
            Gets the interface reference to the set of properties of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet">
            <summary>
            This is the interface that gives access to a set (collection, list or other aggregation)
            of properties.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.Contains(System.String)">
            <summary>
            Checks if the property with specified name exists
            </summary>
            <param name="propertyName">property name</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.Contains(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty)">
            <summary>
            Checks if the property with specified metadata exists
            </summary>
            <param name="property">Property</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.Contains``1(System.String)">
            <summary>
            Checks if the property with specified name and type exists
            </summary>
            <typeparam name="T">property type</typeparam>
            <param name="name">property name</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.TryGetPropertyValue``1(System.String,``0@)">
            <summary>
            Attempts to get property value from provider
            </summary>
            <typeparam name="T">property type</typeparam>
            <param name="name">name name</param>
            <param name="value">property value</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.TryGetPropertyValue(System.String,System.Object@)">
            <summary>
            Attempts to get property value from provider
            </summary>
            <param name="name">property name</param>
            <param name="value">property value</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.TryGetProperty(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcProperty@)">
            <summary>
            Attempts to get property metadata
            </summary>
            <param name="name">property name</param>
            <param name="property">property information</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet.EnumProperties">
            <summary>
            Enumerates all properties
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScript">
            <summary>
            ISfcScript interface is an abstraction over a script concept. Most domains would implement
            this interface via text
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScript.Add(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScript)">
            <summary>
            Add a "batch" to the script to be executed individually
            </summary>
            <param name="script">Partial Script</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScriptCollector">
            <summary>
            Provide an access to the Script Collector instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScriptCollector.OpenWriter``1">
            <summary>
            Opens writer of the supplied type
            </summary>
            <typeparam name="T">type of the writer</typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcScriptCollector.OpenWriter``1(System.Boolean)">
            <summary>
            Opens or Reopens writer of the supplied type 
            </summary>
            <typeparam name="T">type of the writer</typeparam>
            <param name="append">indicates that previous writer of the same type should be reused</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleMap`2">
            <summary>
            A simple interface for indexer
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList">
            <summary>
            A simple interface for IEnumerable
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList.ListReference">
            <summary>
            The actual list that this simple list represents
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDefaultStorage">
            <summary>
            SFC Default implementation to the default storage interface
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSupportsDesignMode">
            <summary>
            The interface's only purpose is to “mark” types that we want to work in Design Mode. 
            A type (class) needs to inherit from this interface if it wants to work in Design Mode. 
            That mechanism also allows a client of the model to programmatically discover which classes 
            support Design Mode, which can be useful in certain scenarios. 
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyOrderAttribute">
            <summary>
            add this attribute to a property to specify the position that will be used
            when designer doesnt apply a "Categorized" or "Alphabetical" sort order
            (e.g. when PropertyGrid doesnt override the sort order - has PropertySort=NoSort)
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizedPropertyResourcesAttribute">
            <summary>
            The name of the resources containing localized property category, name, and description strings
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizedPropertyResourcesAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="resourcesName">The name of the resources (e.g. Microsoft.SqlServer.Foo.BarStrings)</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizedPropertyResourcesAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
             </summary>
            <param name="resourcesName">the name of the resource (e.g. Microsoft.SqlServer.Foo.BarStrings)</param>
            <param name="useDefaultKeys"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizedPropertyResourcesAttribute.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="resourceType">The type of the resources (e.g. Microsoft.SqlServer.Foo.BarStrings)</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizedPropertyResourcesAttribute.ResourcesName">
            <summary>
            The name of the resources containing localized property category and name strings
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizedPropertyResourcesAttribute.UseDefaultKeys">
            <summary>
            Returns true if the keys should be picked up by defaults or if they should be retrieve as attributes
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.GetDisplayKey(System.Type)">
            <summary>
            A factory method for getting an instance of the type that implements IDisplayKey
            </summary>
            <param name="keyAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.GetValueFromCustomAttribute(System.Reflection.FieldInfo,System.Type,System.Resources.ResourceManager,System.Boolean)">
            <summary>
            Gets the Display value for a field
            </summary>
            <param name="field"></param>
            <param name="keyAttribute"></param>
            <param name="resourceManager"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.GetValueFromCustomAttribute(System.Reflection.PropertyInfo,System.Type,System.Resources.ResourceManager,System.Boolean)">
            <summary>
            Gets the Display value for a property
            </summary>
            <param name="property"></param>
            <param name="keyAttribute"></param>
            <param name="resourceManager"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.GetValueFromCustomAttribute(System.Type,System.Type,System.Resources.ResourceManager,System.Boolean)">
            <summary>
            Gets the Display value for a Type
            </summary>
            <param name="type"></param>
            <param name="keyAttribute"></param>
            <param name="resourceManager"></param>
            <param name="isDefault"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.GetDisplayValue(System.String,System.Resources.ResourceManager)">
            <summary>
            Retrieves the key from the resource manager
            </summary>
            <param name="key"></param>
            <param name="resourceManager"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.GetCustomDisplayValue(System.Object[],System.Resources.ResourceManager)">
            <summary>
            Retrieves the first key value from the customAttribute and retrives the value from the resource manager
            </summary>
            <param name="customAttributes"></param>
            <param name="resourceManager"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.ConvertNullToEmptyString(System.String)">
            <summary>
            A helper class for getting an empty string if the value is null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.ConstructDefaultKey(System.String,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Returns the default key for a property
            </summary>
            <param name="postfix"></param>
            <param name="delim"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.ConstructDefaultKey(System.String,System.String,System.Type)">
            <summary>
            /// Returns the default key for a type
            </summary>
            <param name="postfix"></param>
            <param name="delim"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayKeyHelper.ConstructDefaultKey(System.String,System.String,System.Reflection.FieldInfo)">
            <summary>
            /// Returns the default key for a field
            </summary>
            <param name="postfix"></param>
            <param name="delim"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayCategoryKeyAttribute">
            <summary>
            The key used to look up the localized property category
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayCategoryKeyAttribute.GetDefaultKey(System.Reflection.PropertyInfo)">
            <summary>
            The key used to look up a localized property category in a default resource file
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayCategoryKeyAttribute.GetDefaultKey(System.Type)">
            <summary>
            The key used to look up a localized type category in a default resource file
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayCategoryKeyAttribute.GetDefaultKey(System.Reflection.FieldInfo)">
            <summary>
            The key used to look up a localized field category in a default resource file
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayCategoryKeyAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">The key used to look up the localized property category</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayCategoryKeyAttribute.Key">
            <summary>
            The key used to look up the localized property category
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayNameKeyAttribute">
            <summary>
            The key used to look up the localized property name
            </summary>
            <remarks>
            The AttributeTargets.Field is added to allow this attribute to be placed on Enum
            elements which the EnumConverter will use to localize each Enum value
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayNameKeyAttribute.GetDefaultKey(System.Reflection.PropertyInfo)">
            <summary>
            The key used to look up a localized property category in a default resource file
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayNameKeyAttribute.GetDefaultKey(System.Type)">
            <summary>
            The key used to look up a localized property category in a default resource file
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayNameKeyAttribute.GetDefaultKey(System.Reflection.FieldInfo)">
            <summary>
            The key used to look up a localized property category in a default resource file
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayNameKeyAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">The key used to look up the localized property name</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayNameKeyAttribute.Key">
            <summary>
            The key used to look up the localized property name
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayDescriptionKeyAttribute">
            <summary>
            The key used to look up the localized description
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayDescriptionKeyAttribute.GetDefaultKey(System.Reflection.PropertyInfo)">
            <summary>
            The key used to look up a localized property category in a default resource file
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayDescriptionKeyAttribute.GetDefaultKey(System.Type)">
            <summary>
            The key used to look up a localized property category in a default resource file
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayDescriptionKeyAttribute.GetDefaultKey(System.Reflection.FieldInfo)">
            <summary>
            The key used to look up a localized property category in a default resource file
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayDescriptionKeyAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="key">The key used to look up the localized property description</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.DisplayDescriptionKeyAttribute.Key">
            <summary>
            The key used to look up the localized property description
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicVisible">
             <summary>
             The IDynamicVisible interface should be implemented by any class that wants to limit
             the visibility of certain Enum values based on state of the class at that moment.
            
             If a class contains a property which exposes an Enum and that class implements the
             IDynamicVisible interface then it will be called for each property that is of an Enum type.
            
             The context param can be used to determine for which Enum this method is being called. If a class
             only has one Enum it is not necessary to make this check.
            
             The way to limit the visibility of certain items is to simply remove the unwanted Enum values
             from the values ArrayList. This method is called on every drop down of the enum so it is possible
             to change the list on each and every drop down. If the list will not change once it has been
             initially determined caching the ArrayList and returning it would be helpful.
            
             Care should be taken to ensure that you are not removing values that the Enum property is already
             set to. This will not cause any errors as all Enum values are still valid but when the user clicks
             on the dropdown they will not see the current choice as an option.
            
             Also no new values should be added to the list since these values will not be convertable to valid
             Enum values and an error will be thrown at runtime. If more dynamic control is needed then
             consider using the DynamicValues design.
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicVisible.ConfigureVisibleEnumFields(System.ComponentModel.ITypeDescriptorContext,System.Collections.ArrayList)">
             <summary>
             Removing items from the values list and returning that new list will control
             the values shown in the Enum specified in context.
            
             The enum can be determined with code similar to the following
                 if (context.PropertyDescriptor.PropertyType == typeof(myEnum))
             </summary>
             <param name="context"></param>
             <param name="values"></param>
             <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicValues">
             <summary>
             The IDynamicValues interface is used to create dynamic lists for string properties. A class
             should implement this interface, and use the DynamicValuesAttribute (below), to enable the
             generation of dynamic values.
            
             This interace and attribute can be used when a list of strings that will not be known until run-time
             should be shown in a drop down list. Good examples of this are database names, users, collations, etc.
            
            
             </summary>
             <example>
             public TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
             {
                 string[] collationName = new string[] { "first item", "second itme" };
                 return new TypeConverter.StandardValuesCollection(collationName);
             }
             </example>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicValues.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetStandardValues should return a StandardValuesCollection which contains all the
            items to be displayed in the list of the property specifiec in context.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicProperties">
            <summary>
            Allows an object to dynamicaly add properties to the property grid
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicProperties.AddProperties(System.ComponentModel.PropertyDescriptorCollection,System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Dynamically add properties to the Properties Collection.
            </summary>
            <param name="properties">Properties collection</param>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicReadOnly">
            <summary>
            Allows an object to dynamicaly override the IsReadOnly value for any property
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IDynamicReadOnly.OverrideReadOnly(System.Collections.Generic.IList{Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor},System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Called with a list of LocalizablePropertyDescriptor which can then be called
            to override the IsReadOnly attribute of any property
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyPropertyChangedEventArgs">
            <summary>
            EventArgs raised by the ReadOnlyPropertyChagned event to indicate which property was changed
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyPropertyChangedEventArgs.#ctor(System.String)">
            <summary>
            Construct a new ReadOnlyPropertyChangedEventArgs with a property name
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyPropertyChangedEventArgs.PropertyName">
            <summary>
            Set or retrieve the Property Name
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DynamicValuesAttribute">
             <summary>
             add this attribute to a property where you would like the values to be a dynamic list.
             The class that has a property with this attribute set must implement the IDynamicValues interface as
             the GetStandardValues mothod on that interface will be called to retrieve the valid values.
            
             If the attribute is present but not the interface no list will be returned so it will usually result
             in an empty drop down list being shown.
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.DynamicValuesAttribute.#ctor(System.Boolean)">
            <summary>
            Used to enable or disable dynamic values. Passing false in the constructor can be helpful
            in debugging without removing the attribute
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor">
            <summary>
            LocalizablePropertyDescriptor.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.#ctor(System.Reflection.PropertyInfo,System.Resources.ResourceManager,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="property">The property that is being described</param>
            <param name="resourceManager">The resource manager containing the localized category and name strings</param>
            <param name="isDefaultResourceManager"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Whether resetting an object changes its value
            </summary>
            <remarks>
            Property can't be reset using this descriptor
            </remarks>
            <param name="component">The object to test for reset capability</param>
            <returns>true if value can be reset, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Whether the value of this property should be persisted.
            </summary>
            <remarks>
            This property should not be persisted..  If the underlying class is serializable,
            the underlying field (if any) should be persisted instead.
            </remarks>
            <param name="component">Referenced object</param>
            <returns>true if value should be serialized, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Reset to the default value
            </summary>
            <param name="component">Referenced object</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.GetValue(System.Object)">
            <summary>
            Get the property value
            </summary>
            <param name="component">The object whose property value is to be retrieved</param>
            <returns>The property value</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Set the property value
            </summary>
            <param name="component">The object whose property value is to be set</param>
            <param name="value">The new property value</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.ForceReadOnly">
            <summary>
            Forces this property descriptor to return True for IsReadOnly
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.Category">
            <summary>
            The localized category string for the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.ComponentType">
            <summary>
            The type of the class containing the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.Description">
            <summary>
            The localized description of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.DesignTimeOnly">
            <summary>
            Whether the property can only be set at design time
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.DisplayName">
            <summary>
            The localized name that is to be displayed in object browsers such as PropertyGrid
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.IsBrowsable">
            <summary>
            Whether the property should be displayed in object browsers such as PropertyGrid
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.IsLocalizable">
            <summary>
            Whether the property value should be localized
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.IsReadOnly">
            <summary>
            Whether the property is read-only
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.Name">
            <summary>
            The unlocalized property name
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.PropertyType">
            <summary>
            The type of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.DisplayOrdinal">
            <summary>
            The ordinal at which the property should be displayed
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyDescriptor.Converter">
            <summary>
            Returns the TypeConverter to be used for this property. If not overwridden returns the default
            for this type.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyComparer">
            <summary>
            Orders properties by ordinal, then by display name
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizablePropertyComparer.Compare(System.Object,System.Object)">
            <summary>
            Compare properties a and b
            </summary>
            <param name="a">First property</param>
            <param name="b">Second proprety</param>
            <returns>less than zero if a is less than b, 0 if a and b are equal, and greater than zero if a is greater than b</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor">
            <summary>
            LocalizableMemberDescriptor is a generic descriptor that LocalizableTypeConverter uses to return
            MemberDescriptor information for Types.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor.#ctor(System.Type,System.Resources.ResourceManager,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="type"></param>
            <param name="resourceManager">The resource manager containing the localized category and name strings</param>
            <param name="isDefaultResourceManager"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor.Category">
            <summary>
            The localized category string for the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor.Description">
            <summary>
            The localized description of the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor.DesignTimeOnly">
            <summary>
            Whether the property can only be set at design time
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor.DisplayName">
            <summary>
            The localized name that is to be displayed in object browsers such as PropertyGrid
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor.IsBrowsable">
            <summary>
            Whether the property should be displayed in object browsers such as PropertyGrid
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableMemberDescriptor.Name">
            <summary>
            The unlocalized property name
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter">
            <summary>
            A type converter to show the properies of a class using localized name, description, and category
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Get a collection of PropertyDescriptors describing the properties of the input object
            </summary>
            <param name="context">Unused, the context of the object</param>
            <param name="value">The object whose properties are being described</param>
            <param name="filter">Unused, attributes to filter the properties with.</param>
            <returns>A collection of PropertyDescriptors</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter.GetProperties(System.Reflection.PropertyInfo[])">
            <summary>
            Get a collection of PropertyDescriptors describing the properties passed in.  The ResourceManager will be retrieved from
            the declaring type of the first property in the list of properties.
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Whether custom property descriptions supported
            </summary>
            <param name="context">Unused, the context for which descriptions are to be requested</param>
            <returns>Whether custom property descriptions supported</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableTypeConverter.GetTypeMemberDescriptor(System.Type)">
            <summary>
            Retrieves the MemberDescriptor for the type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter">
            <summary>
            The LocalizableEnumConverter allows for the values of an Enum to be converted to localized
            strings based on the DisplayNameKey attribute applied to the individual items in the Enum.
            </summary>
            <example>
                public enum ScriptModeOptions
                {
                    [DisplayNameKey("CreateOnlyMode")] scriptCreateOnly,
                    [DisplayNameKey("DropOnlyMode")] scriptDropOnly
                }
            </example>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.LoadLocalizedNames(System.Type,System.Resources.ResourceManager)">
            <summary>
            Load display names for the enum fields
            </summary>
            <param name="type">The .NET Type for the enum</param>
            <param name="manager">The resource manager used to load localized field names</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.LoadLocalizedFieldNames(System.Type,System.Resources.ResourceManager)">
            <summary>
            Load localized display names for the enum fields from a resource manager
            </summary>
            <param name="type">The .NET Type for the enum</param>
            <param name="manager">The resource manager used to load localized field names</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.LoadUnlocalizedFieldNames(System.Type)">
            <summary>
            Load the field names for the enum
            </summary>
            <remarks>
            this is called when there are no localized strings for the field names.  In lieu of localized
            field names, the method puts the C# enum field names in the field name dictionary.
            </remarks>
            <param name="type">The .NET Type for the enum</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.#ctor(System.Type,System.Resources.ResourceManager)">
            <summary>
            This constructor is used by our internal PropertyDescriptor when it is created automatically
            for any Enum property.
            </summary>
            <param name="type"></param>
            <param name="manager"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.#ctor(System.Type)">
            <summary>
            This constructor is the default constructor that would be used if this converter is placed
            on an Enum class directly and not via the abstraction through the LocalizedTypeConverter attribute
            on the containing class.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.GetEnumDescription(System.Enum)">
            <summary>
            used to translate the enum value into the localized string.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.GetEnumValue(System.String)">
            <summary>
            Get the enum value based on the string. This uses the hashtable lookup to increase perf.
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Does the conversion from Enum to string and the odd string to string. All others are passed on to the base
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Does the conversion from string to enum and the odd enum to enum. All others are passed on to the base
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.LocalizableEnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns the list of values for the list box in the property grid.
            If the IDynamicVisible interface is defined then we call into that to get the manipulated values
            array. If not then we just return the list of values.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DynamicValueTypeConverter">
             <summary>
             The DynamicValueTypeConverter is used to call into the containing class to allow the
             class to generate the dynamic list.
            
             This TypeConverter is created and returned for any properties that have the DynamicValues
             attribute enabled.
             </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.NonSfcObjectIterator">
            Internal IEnumerable utility class that walks over the
            given table and creates objects based on the string in
            the first column of each row.
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2">
            <summary>
            A generic struct that only exposes the read-only interface of a dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2">
            <summary>
            Represents a generic read-only collection of key/value pairs.
            </summary>
            <typeparam name="K">The type of keys in the dictionary.</typeparam>
            <typeparam name="T">The type of values in the dictionary.</typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyCollection`1">
            <summary>
            An interface to an immutable collection.
            </summary>
            <typeparam name="T">The item type of the collection.</typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyCollection">
            <summary>
            The readonly collection minimal base interface.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyCollection.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>True if the item is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an
             array, starting at a particular array index.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements
            copied from the collection. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2"/> contains an 
            element with the specified key.
            </summary>
            <param name="key">The key to locate in this <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2"/>.</param>
            <returns>
            <c>true</c> if the <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2"/> contains an element 
            with the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if 
            the key is found; otherwise, the default value for the type of the value parameter. 
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if the object that implements <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2"/>
            contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <returns>The value with the specified key.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the keys of the 
            <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the values of the 
            <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2"/> that wraps the
            specified <see cref="T:System.Collections.Generic.IDictionary`2"/> in a read-only interface.
            </summary>
            <param name="dictionary">A <see cref="T:System.Collections.Generic.IDictionary`2"/> object to be wrapped in read-only interface</param>
            <remarks>If <paramref name="dictionary"/> is <c>null</c>, it is treated as an empty dictionary.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.Contains(`1)">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
            <param name="item">The object to locate in the dictionary.</param>
            <returns><c>true</c> if <paramref name="item"/> is found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the dictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the dictionary.</param>
            <returns><c>true</c> if the dictionary contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; 
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the dictionary contains an element with the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator that can be used to iterate through the list of key/value pairs.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of values in the dictionary.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the list of values.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.op_Implicit(System.Collections.Generic.Dictionary{`0,`1})~Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary{`0,`1}">
            <summary>
            Implicit conversion from <see cref="T:System.Collections.Generic.Dictionary`2"/> to 
            <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2"/>.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/> object to convert.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2"/> that wraps the specified dictionary.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.op_Implicit(System.Collections.Generic.SortedList{`0,`1})~Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary{`0,`1}">
            <summary>
            Implicit conversion from <see cref="T:System.Collections.Generic.SortedList`2"/> to 
            <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2"/>.
            </summary>
            <param name="sortedList">The <see cref="T:System.Collections.Generic.SortedList`2"/> object to convert.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2"/> that wraps the specified sorted list.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an IEnumerable{TValue} containing the keys of the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an IEnumerable{TValue} containing the values of the dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyDictionary`2.Enumerable">
            <summary>
            An empty enumerable struct that provides an empty enumerator.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyList`1">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet">
            <summary>
            An interface to an immutable set.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet.IsSubsetOf(System.Collections.IEnumerable)">
            <summary>
            Check if this set is a subset of other.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set is a subset of other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet.IsSupersetOf(System.Collections.IEnumerable)">
            <summary>
            Check if this set is a superset of other.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set is a superset of other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet.IsProperSubsetOf(System.Collections.IEnumerable)">
            <summary>
            Check if this set is a subset of other, but not the same as it.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set is a proper subset of other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet.IsProperSupersetOf(System.Collections.IEnumerable)">
            <summary>
            Check if this set is a superset of other, but not the same as it.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set is a proper subperset of other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet.Overlaps(System.Collections.IEnumerable)">
            <summary>
            Check if this set has any elements in common with other.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set has any elements in common with other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet.SetEquals(System.Collections.IEnumerable)">
            <summary>
            Check if this set contains the same and only the same elements as other.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set contains the same and only the same elements as other; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet`1">
            <summary>
            An interface to an immutable set.
            </summary>
            <typeparam name="T">The element type of the set.</typeparam>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if this set is a subset of other.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set is a subset of other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if this set is a superset of other.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set is a superset of other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if this set is a subset of other, but not the same as it.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set is a proper subset of other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if this set is a superset of other, but not the same as it.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set is a proper subperset of other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if this set has any elements in common with other.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set has any elements in common with other; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Check if this set contains the same and only the same elements as other.
            </summary>
            <param name="other">The sequence to check against.</param>
            <returns>True if this set contains the same and only the same elements as other; otherwise false.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1">
            <summary>
            A generic struct that exposes the read-only interface of a list while hides
            its mutable interface.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/> that wraps the
            specified <see cref="T:System.Collections.Generic.IList`1"/> in a read-only interface.
            </summary>
            <param name="list">A <see cref="T:System.Collections.Generic.IList`1"/> object to be wrapped in read-only interface</param>
            <remarks>If <paramref name="list"/> is <c>null</c>, it is treated as an empty list.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the list.</param>
            <returns><c>true</c> if item is found in the list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/> to an <see cref="T:System.Array"/>, 
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements
            copied from <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/>.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the list.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the list.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.op_Implicit(`0[])~Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList{`0}">
            <summary>
            Implicit conversion from <see cref="T:System.Array"/> to <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/>.
            </summary>
            <param name="array">The <see cref="T:System.Array"/> object to convert.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/> that wraps the specified array.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.op_Implicit(System.Collections.Generic.List{`0})~Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList{`0}">
            <summary>
            Implicit conversion from <see cref="T:System.Collections.Generic.List`1"/> to <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/>.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> object to convert.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/> that wraps the specified list.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ReadOnlyList`1.Enumerable">
            <summary>
            An empty enumerable struct that provides an empty enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.Serialize(System.Object)">
            <summary>
            This function compiles the list of the instances which are need to be serialize 
            the root successfully. 
            </summary>
            <param name="instance">The root instance to serialize</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.Write(System.Xml.XmlWriter)">
            <summary>
            This function serializes the dependency list instances along with the root
            </summary>
            <param name="xmlWriter">XmlWriter where the whole serialized document is committed to</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.WriteInstancesDocInfo(System.Xml.XmlWriter,System.String,System.Int32)">
            <summary>
            Writes the docinfo
            </summary>
            <param name="docWriter"></param>
            <param name="smlUri"></param>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.Write(System.Xml.XmlWriter,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Serializes each instance
            </summary>
            <param name="instanceWriter"></param>
            <param name="instance">the element to be serialized</param>
            <param name="namespaces"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.WriteAllInstances">
            <summary>
            Writes all the dependent list of instances
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.WriteInternal(System.Xml.XmlWriter,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="instanceWriter"></param>
            <param name="instance"></param>
            <param name="namespaces"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            The public interface for clients to deserialize the file stream
            </summary>
            <param name="xmlReader">The stream which holds the serialized document</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.Deserialize(System.Xml.XmlReader,Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState)">
            <summary>
            The public interface for clients to deserialize the file stream
            </summary>
            <param name="xmlReader">The stream which holds the serialized document</param>
            <param name="state">All of the deserialized objects will have this state</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.Deserialize(System.Xml.XmlReader,System.String,System.Object@,Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState)">
            <summary>
            Deserializes each instance and adds to the internal cache
            </summary>
            <param name="reader"></param>
            <param name="instanceUri"></param>
            <param name="instance"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.ParseXmlData(System.Xml.XmlReader,System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstanceSerializedData}@,System.Boolean)">
            <summary>
            This method reads the whole IF document and either fills data into the instance
            or creates the serialized data bag needed for the domain to upgrade the instance.
            </summary>
            <param name="reader"></param>
            <param name="serializedData"></param>
            <param name="isUpgrade"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.CreateInstanceFromSerializedData(System.Type,System.String,System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstanceSerializedData})">
            <summary>
            Creates object of appropriate type and state based on deserialized data.
            </summary>
            <param name="instanceType"></param>
            <param name="instanceUri"></param>
            <param name="serializedData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.GetPropertyValueFromXmlString(System.String,System.Type,Microsoft.SqlServer.Management.Sdk.Sfc.IXmlSerializationAdapter)">
            <summary>
            Creates .net object from value in xml format.
            </summary>
            <param name="xmlString"></param>
            <param name="propType"></param>
            <param name="serializationAdapter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.SetParent(Microsoft.SqlServer.Management.Sdk.Sfc.IAlienObject,System.String)">
            <summary>
            Sets parent property on the object if we have already deserialized the parent and it lives in cache.
            
            Throw SfcSerializationException if parent is missing.
            </summary>
            <param name="instance"></param>
            <param name="instanceUri"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializer.GetSerializationAdapter(Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation)">
            <summary>
            Helper method to extract the serialization adapter for a property if it was specified (as an attribute).
            </summary>
            <param name="propertyRelation">Metadata record for the property to be serialized</param>
            <returns>adapter object or null if no adapter type was specified</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplicationEvents">
            <summary>
            This class holds global Sfc events
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication">
            <summary>
            The Sfc system and its global events and data.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication.SfcObjectCreatedEventHandler">
            <summary>
            Called when an object is successfully created
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication.SfcObjectDroppedEventHandler">
            <summary>
            called when an object is successfully dropped
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication.SfcBeforeObjectRenamedEventHandler">
            <summary>
            called when an object is successfully renamed, before the client-side updating
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication.SfcAfterObjectRenamedEventHandler">
            <summary>
            called when an object is successfully renamed, after the client-side updating
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication.SfcBeforeObjectMovedEventHandler">
            <summary>
            called when an object is successfully moved, before the client-side updating
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication.SfcAfterObjectMovedEventHandler">
            <summary>
            called when an object is successfully moved, after the client-side updating
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcApplication.SfcObjectAlteredEventHandler">
            <summary>
            called when an object is successfully altered
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcEventArgs">
            <summary>
            Base argument class for Sfc events
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcEventArgs.Urn">
            <summary>
            The current urn of the current object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcEventArgs.Instance">
            <summary>
            The current object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectCreatedEventArgs">
            <summary>
            Event arguments passed when an object is created.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectAlteredEventArgs">
            <summary>
            Event arguments passed when an object is altered.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectDroppedEventArgs">
            <summary>
            Event arguments passed when an object is dropped.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcBeforeObjectRenamedEventArgs">
            <summary>
            Event arguments passed when an object is successfully renamed, before the client-side updating.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcBeforeObjectRenamedEventArgs.NewUrn">
            <summary>
            The new Urn of the object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcBeforeObjectRenamedEventArgs.NewKey">
            <summary>
            The new Key of the object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcAfterObjectRenamedEventArgs">
            <summary>
            Event arguments passed when an object is successfully renamed, after the client-side updating.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcAfterObjectRenamedEventArgs.OldUrn">
            <summary>
            The old urn of the object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcAfterObjectRenamedEventArgs.OldKey">
            <summary>
            The old Key of the object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcBeforeObjectMovedEventArgs">
            <summary>
            Event arguments passed when an object is successfully moved, before the client-side updating.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcBeforeObjectMovedEventArgs.NewUrn">
            <summary>
            The new urn of the object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcBeforeObjectMovedEventArgs.NewParent">
            <summary>
            The new parent object of the object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcAfterObjectMovedEventArgs">
            <summary>
            Event arguments passed when an object is successfully moved, after the client-side updating.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcAfterObjectMovedEventArgs.OldUrn">
            <summary>
            The old urn of the object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcAfterObjectMovedEventArgs.OldParent">
            <summary>
            The old parent object of the object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.AttributeUtilities">
            <summary>
            Various attribute helper methods
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.AttributeUtilities.GetValuesOfProperties(System.Object,System.String[])">
            <summary>
            Returns the argument values for a given instance
            </summary>
            <param name="instance">Instance for which property values need to be retrieved</param>
            <param name="properties">Names of properties</param>
            <returns>Array of property values</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.AttributeUtilities.GetValueOfProperty(System.Object,System.String)">
            <summary>
            Gets the argument value based on instance and property name
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.AttributeUtilities.GetValueOfProperty(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the argument value based on instance and property name list
            </summary>
            <param name="instance">Instance that holds the first property in the list</param>
            <param name="names">List of property names (such as Parent, Parent, Name)</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.AttributeUtilities.SplitNames(System.String)">
            <summary>
            Splits a propertyname into separate elements.
            Example: "Parent.Parent.Name"
            The properties are separated by a '.'
            The '.' may be escaped: "\."
            Example: "Dot\.Net"
            An escape may be escaped: "\\"
            Example: "Slash\\Dot"
            Any other escape is ignored: "\n" for example will not have a special meaning
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ReferenceResolverDelegate">
            <summary>
            Reference resolver delegate type for single object targets.
            </summary>
            <param name="instance"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceResolverFactoryDelegate">
            <summary>
            Reference resolver factory delegate type called to obtain a single target reference resolver interface.
            </summary>
            <param name="parameters">Any parameters needed for the resolver method.</param>
            <returns>The resolver interface which can be used to resolve from a source to a target.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionResolverFactoryDelegate">
            <summary>
            Reference resolver factory delegate type called to obtain an enumerable target references resolver interface.
            </summary>
            <param name="parameters">Any parameters needed for the resolver method.</param>
            <returns>The resolver interface which can be used to resolve from a source to a target enumeration.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute">
            <summary>
            Attribute for (soft) references to a single target.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.#ctor(System.Type)">
            <summary>
            Reference will be resolved by creating an instance of the given resolver type.
            </summary>
            <param name="resolverType">The type to instantiate a collection resolver from.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.#ctor(System.Type,System.String[])">
            <summary>
            Reference will be resolved by creating an instance of the given resolver type with optional keys and parameters.
            </summary>
            <param name="resolverType">The type to instantiate a resolver from.</param>
            <param name="parameters">Any parameters needed for the resolver method.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.#ctor(System.Type,System.String,System.String[])">
            <summary>
            Reference will be resolved with values of passed in property names
            </summary>
            <param name="urnTemplate"></param>
            <param name="parameters">Parameters for reference type</param>
            <param name="referenceType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.#ctor(System.Type,System.Type,System.String,System.String[])">
            <summary>
            Reference will be resolved by calling a delegate
            </summary>
            <param name="methodName">A static resolver method.</param>
            <param name="parameters">Arguments that will be passed into the method.</param>
            <param name="referenceType"></param>
            <param name="resolverType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.#ctor(System.Type,System.String[],System.String,System.String[])">
            <summary>
            Reference will be resolved with values of passed in property names
            </summary>
            <param name="referenceType"></param>
            <param name="keys">All keys if this is a multi-key reference</param>
            <param name="urnTemplate"></param>
            <param name="parameters">Parameters for path expression</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.#ctor(System.Type,System.String[],System.Type,System.String,System.String[])">
            <summary>
            Reference will be resolved by calling a delegate
            </summary>
            <param name="referenceType"></param>
            <param name="keys">All keys if this is a multi-key reference</param>
            <param name="resolverType">Type on which resolver exists.</param>
            <param name="methodName">A static resolver method.</param>
            <param name="parameters">Arguments that will be passed into the method.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.Resolve``2(``1)">
            <summary>
            Resolve a strongly-typed single target object from the given source object.
            If a custom resolver interface is defined, it uses that.
            Otherwise if a custom resolver delegate helper is defined it uses that.
            In the absence of custom resolvers, it evaluates the given Urn path expression template with arguments.
            </summary>
            <typeparam name="S">The type of the source instance to resolve from.</typeparam>
            <typeparam name="T">The type of the target instance.</typeparam>
            <param name="instance">The source instance to resolve from.</param>
            <returns>The resolved target instance according to the rules mentioned, or null if there is no custom resolver or valid Urn path given.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.Resolve(System.Object)">
            <summary>
            Resolve a single target object from the given source object.
            If a custom resolver interface is defined, it uses that.
            Otherwise if a custom resolver delegate helper is defined it uses that.
            In the absence of custom resolvers, it evaluates the given Urn path expression template with arguments.
            </summary>
            <param name="instance">The source instance to resolve from.</param>
            <returns>The resolved target instance according to the rules mentioned, or null if there is no custom resolver or valid Urn path given.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.GetUrn(System.Object)">
            <summary>
            Returns the Urn reference. Returns null if the attribute does not have a pathexpression defined.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.UrnTemplate">
            <summary>
            Urn template that takes the form of a String.Format string. Example "Server/Login[@Name = '{0}']".
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.Arguments">
            <summary>
            Arguments for the urnTemplate.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.Resolver">
            <summary>
            Custom resolver method.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.InstanceResolver">
            <summary>
            Custom resolver interface.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.Keys">
            <summary>
            The keys that participate in the reference.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceAttribute.Type">
            <summary>
            The type of the reference
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceSelectorAttribute">
            <summary>
            Attribute that allows valid values to be returned that can be applied to
            a property that is also a soft reference.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceSelectorAttribute.PathExpression">
            <summary>
            Path expression that is used to resolve the reference
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceSelectorAttribute.Arguments">
            <summary>
            Arguments for the PathExpression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceSelectorAttribute.Field">
            <summary>
            The field that needs to be returned by the query
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionAttribute">
            <summary>
            Attribute for (soft) references to an enumerable target.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionAttribute.#ctor(System.Type)">
            <summary>
            Reference collection will be resolved by the given resolver object.
            </summary>
            <param name="resolverType">The type to instantiate a collection resolver from.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionAttribute.#ctor(System.Type,System.String[])">
            <summary>
            Reference collection will be resolved by creating an instance of the given resolver type with optional keys and parameters.
            </summary>
            <param name="resolverType">The type to instantiate a collection resolver from.</param>
            <param name="parameters">Any parameters needed for the resolve.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionAttribute.ResolveCollection(System.Object)">
            <summary>
            Resolve a target enumerable from the given source object.
            </summary>
            <param name="instance">The source instance to resolve from.</param>
            <returns>The resolved target enumerable.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionAttribute.ResolveCollection``2(``1)">
            <summary>
            Resolve a strongly-typed target enumerable from the given source object.
            </summary>
            <typeparam name="S">The type of the source instance to resolve from.</typeparam>
            <typeparam name="T">The type of the target instance.</typeparam>
            <param name="instance">The source instance to resolve from.</param>
            <returns>The resolved target enumerable.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionAttribute.CollectionResolver">
            <summary>
            Custom resolver interface.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcReferenceCollectionAttribute.Arguments">
            <summary>
            Arguments for the resolver.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationshipAttribute">
            <summary>
            Base class for various attribute classes. May be used directly, but typically one of the derived form is used.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationshipAttribute.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship)">
            <param name="relationship">Specifies the relationship to its parent</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationshipAttribute.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship,Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcCardinality)">
            <param name="relationship">Specifies the relationship to its parent</param>
            <param name="cardinality">Specifies the cardinality of the type in relationship to its parent</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationshipAttribute.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship,Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcCardinality,System.Type)">
            <param name="relationship">Specifies the relationship to its parent</param>
            <param name="cardinality">Specifies the cardinality of the type in relationship to its parent</param>
            <param name="containsType">Specifies the type the container holds</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationshipAttribute.Relationship">
            <summary>
            Specifies the relationship to its parent
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationshipAttribute.Cardinality">
            <summary>
            Specifies the cardinality of the type in relationship to its parent
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationshipAttribute.ContainsType">
            <summary>
            Specifies the type this container holds. Only available for containers.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectRelationship">
            <summary>
            Relationship types for objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectCardinality">
            <summary>
            Cardinality for objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectAttribute">
            <summary>
            Attribute for object relationships (such a Server.FullTextService)
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcIgnoreAttribute">
            <summary>
            Indicates this property or class is to be ignored
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcInvalidForTypeAttribute">
            <summary>
            Attribute for excluding the resolve for some properties for some types
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcInvalidForTypeAttribute.#ctor(System.Type)">
            <summary>
            Exclude list will be set to the list coming for the constructor
            </summary>
            <param name="excludedType">The excluded type for a specific property</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcInvalidForTypeAttribute.ExcludedType">
            <summary>
            Get the excluded types list.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcNonSerializableAttribute">
            <summary>
            Attribute to skip serialization of properties. Currently, the attribute only applies to container type relationships.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyAttribute">
            <summary>
            Attribute for regular properties, which data is to be managed by the defining class.
            These are typically scalar properties, but can be of arbitrary complexity.
            Example: Database.Size, Table.Name
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcKeyAttribute">
            <summary>
            Attribute to specify a identifying key (such a Database.Name)
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcKeyAttribute.Position">
            <summary>
            Key ordinal
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcParentAttribute">
            <summary>
            Attribute to specify a valid possible parent of a Type.
            Use one of these for each possible parent.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcParentAttribute.Parent">
            <summary>
            The possible parent type name. The name can be namespace qualified, or if it is not then the
            namespace of the type containing this atrribute will be used.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcVersionAttribute">
            <summary>
            Attribute class to specify supported version of a property or class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="beginMajor"></param>
            <param name="beginMinor"></param>
            <param name="beginBuild"></param>
            <param name="beginRevision"></param>
            <param name="endMajor"></param>
            <param name="endMinor"></param>
            <param name="endBuild"></param>
            <param name="endRevision"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="beginMajor"></param>
            <param name="beginMinor"></param>
            <param name="beginBuild"></param>
            <param name="beginRevision"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcVersionAttribute.BeginVersion">
            <summary>
            Version on which support for this property started. Null if start version is undefined.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcVersionAttribute.EndVersion">
            <summary>
            Version on which support for this property ended. Null if open-ended.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSkuAttribute">
            <summary>
            Attribute class to specify supported SKU of a property or class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSkuAttribute.#ctor(System.String,System.Boolean)">
            <param name="skuName">SKU name.</param>
            <param name="exclusive">Indicates whether the SKU that is specified, is exclusive or inclusive.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSkuAttribute.#ctor(System.String[],System.Boolean)">
            <param name="skuNames">List of SKU names.</param>
            <param name="exclusive">Indicates whether the SKU's that are specified, are exclusive or inclusive.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSkuAttribute.SkuNames">
            <summary>
            List of SKUs
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSkuAttribute.Exclusive">
            <summary>
            Indicates whether the SKU's that are specified, are exclusive support of the property or inclusive.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementTypeAttribute">
            <summary>
            Attribute that is used when the type name is different from the Enumerator type
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementTypeAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the SfcElementTypeAttribute
            </summary>
            <param name="elementTypeName">The element type name</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementAttribute">
            <summary>
            Attribute for regular sfc elements.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementAttribute.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementFlags)">
            <summary>
            Creates a new instance of the SfcElementAttribute
            </summary>
            <param name="flags"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcBrowsableAttribute">
            <summary>
            Indicates whether Powershell (OE?) should be able to browse (cd) into this node
            The default is true (no attribute means true).
            If set to false, then the node is not visible in Powershell (OE?)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcBrowsableAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the SfcElementTypeAttribute
            </summary>
            <param name="isBrowsable"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSerializationAdapterAttribute">
            <summary>
            Attribute to specify the type of serialization adapter to use for a particular property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcSerializationAdapterAttribute.SfcSerializationAdapterType">
            <summary>
            The type of the serialization adapter
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ObjectContainer">
            <summary>
            Holder for any instance in the cache 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCache.GetSingletonPropertyNameFromType(System.Type,System.Type)">
            <summary>
            Gets the property name of singleton property marked as a child of an object (using metadata), given the parent's
            and the singleton's type.
            </summary>
            <param name="containingType"></param>
            <param name="singletonType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollection`3">
            <summary>
            The Sfc collection base for all domain collections. 
            It abstracts all the necesssary handshaking between the parent object, and the collection or element objects.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <typeparam name="ParentT"></typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection">
            <summary>
            This interface is available on all Sfc collections and is passed to the non-generic SfcInstance class to perform necessary 
            collection operations such as child initialization.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollection`3.Add(`0)">
            <summary>
              Adds the obj to the collection
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollection`3.RemoveInternal(`0)">
            <summary>
            Remove the item given by the key.
            Existing object are marked with a state of ToBeDropped for dropping when their parent is Altered or Dropped.
            At that time the marked object will be removed fro the collection.
            Pending, None or Dropped objects are removed from the collection immediately.
            </summary>
            <param name="obj">The instance to remove.</param>
            <returns>If the object is successfully marked to be dropped it returns true, else false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollection`3.PreprocessObjectForAdd(`0)">
            <summary>
              Handles the preprocessing for the Add operation on the collection:
                If the collection has a duplicate item in the ToBeDropped state, removes it from the collection
                and changes the state of obj to "Recreate"
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollatedDictionaryCollection`3.ResetInnerCollection">
            <summary>
            Call this if any of the CultureInfo, IgnoreCase, or Ascending properties change after Initialzation.
            The collection is reset to honor the new settings.
            TODO: The user is responsible for calling this after changing whatever properties they desire, it should be automated.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollatedDictionaryCollection`3.System#Collections#Generic#IComparer{K}#Compare(`1,`1)">
            <summary>
            Compare keys based on our current CultureInfo and IgnoreCase properties
            unless a custom comparer has been passed in.
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollatedDictionaryCollection`3.CultureInfo">
            <summary>
            Sorting the collection will use this .NET culture info.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollatedDictionaryCollection`3.IgnoreCase">
            <summary>
            Sort in a case-insensitive manner for the current collection culture.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcCollatedDictionaryCollection`3.Ascending">
            <summary>
            Sort in an ascending order manner for the current collection culture.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcConnectionContextMode">
            <summary>
            The mode of the object tree for client and server processing rules.
            Offline - no connection to the server for reads or writes at all.
            Online - full connection to the server for both reads and writes.
            TransactedBatch - full connection for reads, queue all writes to action log.
                mode changed to Online, or explicit FlushActionLog() - perform all writes with transaction bracketing, do not pop queue.
                mode changed to Offline - discard action log.
            NonTransactedBatch - full connection for reads, queue all writes to action log.
                mode changed to Online, or explicit FlushActionLog() - perform all writes, pop queue as each action done.
                mode changed to Offline - discard action log.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcConnectionContext.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcHasConnection)">
            <summary>
            Construct the context for tracking and transitioning between offlinf, online and batch update modes.
            </summary>
            <param name="domain">The domain instance for this context. 
            If null, then the mode is fixed as Offline and cannot be changed, otherwise it is initialized to Online.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation">
            <summary>
            TODO: Move to the SfcTypeInfo when defined.
            The SfcTypeRelation enum describes the type of relation between two objects. 
            It defines whether the relation is of a parent-child vs. referential nature, 
            the direction of the relation if any, and determines which types of relations are applicable 
            in different DepedencyDIscoveryMode processing scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation.ContainedChild">
            <summary>
            A direct containment relation which is not required for completeness of the parent container.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation.RequiredChild">
            <summary>
            A direct containment relation which is required for completeness of the parent container. 
            These relations are proxy candidates where applicable.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation.StrongReference">
            <summary>
            An indirect reference relation which has a direction for ordering.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation.WeakReference">
            <summary>
            An indirect reference relation which has no inherent directionality to it. It represents discovery with no particular ordering ties.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction">
            <summary>
            The SfcDependencyAction enum indicates the intended action for which this graph instance is to applied. it is made available to the client code
            as discovery, filtering and results enumeration are processed to make use of this information. It is assumed that domain-specific decisions
            will take this intent into account as processing proceeds.
            This is a fixed enum which may not be extended at present.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Unknown">
            <summary>
            An unknown or generic action.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Serialize">
            <summary>
            A serialization action.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Create">
            <summary>
            A create action.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Drop">
            <summary>
            A drop action.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Alter">
            <summary>
             An alter action.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Rename">
            <summary>
            A rename action involving a new SfcKey.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Move">
            <summary>
            A move action involving a new SfcParent.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Merge">
            <summary>
            A combination of Create, Drop, Alter and Rename as needed to merge object trees.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Diff">
            <summary>
            A difference comparison action.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction.Copy">
            <summary>
            A copy or transfer action.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDirection">
            <summary>
            The SfcDependencyDirection enum indicates the direction of the relation relative to the current object. 
            This is used when the direction is not already somehow implied.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDirection.None">
            <summary>
            No direction implies association of two objects without a particular ordering.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDirection.Inbound">
            <summary>
            An inbound relation means another object is dependent on the current object. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDirection.Outbound">
            <summary>
            An outbound relation means the current object is dependent on another object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDiscoveryMode">
            <summary>
            The DiscoveryMode enum indicates the types of relationships which should be processed in the dependency graph.
            These are pre-defined permutations of the lower-level relation flags which we currently do not expose direct control over picking.
            It is the responsibility of the domains and objects called on to add relations to honor this mode.
            1. Children - follow all children of the root objects recursively. No references are followed.
            2. Full - follow all children and all references of root objects recursively.
            3. Propagate - follow all children to emulate what PropagateInfo does in SMO in Yukon.
            3. UsedBy - follow direct parent and inbound references of root objects. No recursion.
            4. Uses - follow direct children and outbound references of root objects. No recursion.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDiscoveryMode.Children">
            <summary>
            Include only required children for minimal completeness of parent objects.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDiscoveryMode.Full">
            <summary>
            Include all children even those not necessary for minimal completeness of parent objects.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDiscoveryMode.Propagate">
            <summary>
            Include all children as needed for PropagateInfo emulation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDiscoveryMode.UsedBy">
            <summary>
            Include only immmediate parents of required children and immediate inbound references.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDiscoveryMode.Uses">
            <summary>
            Include only immediate required children and immediate outbound references.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink">
            <summary>
            The ISfcDependencyDiscoveryObjectSink interface is implemented by the SfcDependencyEngine class. 
            It is passed to SfcInstance objects as a sink to add relationships into the graph. 
            Note that the target objects receiving the interface are always one side of the relation tuple, 
            hence limiting addition to directly-related relationships.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink.Add(Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDirection,Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance,Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation,System.Boolean)">
            <summary>
            Add a directional reference from this object to the target object.
            The relation type and discovered state is applied to the target object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink.Add(Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDirection,System.Collections.IEnumerator,Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation,System.Boolean)">
            <summary>
            Add a directional reference from this object to each of the target objects or keychains.
            The relation type and discovered state is applied to each target object or keychain added.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink.Add``1(Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyDirection,System.Collections.Generic.IEnumerable{``0},Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation,System.Boolean)">
            <summary>
            Add a directional reference from this object to each of the target objects or keychains.
            The relation type and discovered state is applied to each target object or keychain added.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink.Action">
            <summary>
            Get the discovery action this dependency session is processing. 
            This may affect which relationships are added.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepStackNode.node">
            <summary>
            The current graph DepNode we are processing.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepStackNode.state">
            <summary>
            The current iteration state of the stack node. Either we are on ourself, looking at our ancestors via index, or at our children via index.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepStackNode.index">
            <summary>
            The next index slot to process. Depends on State to determine whether the index is for the ancestor or child list.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DepStackNode.ProcessingState">
            <summary>
            The processingState indicates the progress as to which part of processing a graph node we are currently on.
            A forward iteration through the graph visits: node ancestors recursively, then the node itself is returned, then node children recursively.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DepNode">
            <summary>
            The DepNode class is the basic node storage unit in the SfcDependencyEngine graph. It is expected
            to be used in a KeyedCollection which maps embedded key identity (via a Keychain) to the DepNode for that object.
            A list of parent and child nodes related to this node are kept, as well as a flag for discovery visitation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepNode.keychain">
            <summary>
            The embedded Keychain key which cannot be changed after construction
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepNode.ancestors">
            <summary>
            List of ancestor DepNodes
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepNode.physicalAncestorMask">
            <summary>
            Physical Ancestor relations mask indicating which Ancestors are related in a Parent-Child manner (i.e. not References).
            Since we don't have named field indexers in C# just have a get and set method.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepNode.children">
            <summary>
            List of children DepNodes
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepNode.physicalChildMask">
            <summary>
            Physical Child relations mask indicating which Children are related in a Parent-Child manner (i.e. not References).
            Since we don't have named field indexers in C# just have a get and set method.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.DepNode.discovered">
            <summary>
            Whether this DepNode has been visited for discovery purposes
            (currently this is all or nothing; someday we could support partial discovery on some relations)
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode">
            <summary>
            The SfcDependencyNode is used for enumerator access to the Sfc objects and their KeyChains resulting from a SfcDependencyEngine discovery.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.IsPhysicalAncestor(System.Int32)">
            <summary>
            The ancestor relation state of this node.
            Indicates whether this ancestor is a physical relation or not. Filter via this flag to process only Parent-Child relations.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.IsPhysicalChild(System.Int32)">
            <summary>
            The child relation state of this node.
            Indicates whether this child is a physical relation or not. Filter via this flag to process only Parent-Child relations.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.SfcKeyChain">
            <summary>
            The SfcKeyChain of this dependency node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.Instance">
            <summary>
            The Instance of this dependency node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.Discovered">
            <summary>
            The discovered state of this node.
            Domain-level discovery should set this accordingly per node, whereas object-level discovery will have it set automatically for self.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.Children">
            <summary>
            Enumerate over the children of this dependency node.
            </summary>
            <returns>A enumerator for the children of the current node, or null if there are no children.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.ChildCount">
            <summary>
            The number of children of the this dependency node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.Ancestors">
            <summary>
            Enumerate over the ancestors of this dependency node.
            </summary>
            <returns>A enumerator for the ancestors of the current node, or null if there are no ancestors.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyNode.AncestorCount">
            <summary>
            The number of ancestors of the this dependency node.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine">
            <summary>
            The DepEngine class provides the graph manipulation, population, storage and discovery execution logic to 
            perform complete discovery services, and is then accessed from DepIterators afterwards to walk results in various ways.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.m_mode">
            <summary>
            The discovery mode for the dependency engine instance. This is set at construction and cannnot be changed.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.m_action">
            <summary>
            The intended action for the dependency engine instance. This is set at construction and cannnot be changed.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.m_DependencyRootList">
            <summary>
            The set of SfcInstance objects to act as originating roots for the dependency graph.
            The graph will expand starting from these objects according to the Mode set.
            Getting or setting the root list is always done via copying the internal list.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.nodeDict">
            <summary>
            Map a node to its list of Ancestors (predecessors) and Children (successors).
            The embedded Keychain unique key and the discovered flag are also in the DepNode value.
            This is the graph core data structure.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.nodeQueue">
            <summary>
            Queue for nodes waiting to be discovered.
            All adds to nodedict also add to queue. Dupes are skipped since it always looks up the keychain stored in the queue to find
            the internal DepNode to process, and check its Discovered flag.
            All removes from nodedict do not affect the queue, again since it will attempt to lookup each keychain when it comes to it
            and removed ones will not be found so will be skipped.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.m_currentNode">
            <summary>
            The current DepNode for use by sink methods to know which node we are currently processing.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.FindUnparentedNodes">
            <summary>
            Determine the list of DepNodes which are traversal starters since they have no parent relation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.FindPhysicallyUnparentedNodes">
            <summary>
            Determine the list of DepNodes which are children-only traversal starters since they have no non-reference parent relation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.Add(Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance,Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance,Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeRelation)">
            <summary>
            Add a new tuple relation of a parent node and its child node which depends on it.
            A node can be added multiple times as a parent, child or single node in successive calls.
            </summary>
            <param name="objParent">The parent node of the dependent child node.</param>
            <param name="objChild">The child node dependent on the existence of the parent node.</param>
            <param name="relation"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.Add(Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance)">
            <summary>
            Add a new single object node with no directional relation to either a parent or child node.
            If the node already exists in ther graph any existing relations will not be disturbed
            since Add() always only augments but never detracts.
            A node can be added multiple times as a parent, child or single node in successive calls.
            </summary>
            <param name="obj">The single node.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.Discover">
            <summary>
            Perform complete dependency relation discovery. Start with asking each DomainContext to do what it can, then each DomainContext Type
            and finally resort to asking each node about its own relationships.
            
            Currently we only ask for bulk per DomainContext once, then simply do individual discovery until all nodes have had a discovery pass.
            
            For v2, we would introduce bulk DomainContext Type discovery after doing the DomainContext discovery, and maybe even repeat bulk
            discovery until no new nodes are contributed from it, then resort to individual discovery.
            
            Also we may need to give bulk handlers an iterator, unless we want to rely on handing them acess to the DepEngine
            itself as a sink for adding new nodes discovered as well as traversing directly on the nodes. This is okay as long as we assume (or know)
            that the bulk handlers themselves just make a temp collection to hold the nodes before making the query. They have to be done walking the graph
            before they start adding nodes. Just like any other iterator use, if they try to violate this order and add nodes before they are finished Next'ing
            on the iterator, the iterator will throw (which is what we want to happen).
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.GetListEnumerator">
            <summary>
            Return a DependencyListEnumerator which can be used to walk the graph as a list by the client.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.GetTreeEnumerator">
            <summary>
            Return a DependencyTreeEnumerator which can be used to walk the graph tree by the client.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.Item(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            The default indexer for the dependency engine is to expose a SfcDependencyNode object which can be used to enumerate
            ancestors or children, and to get or set the discovered state of a node. You can set properties of the node but cannot assign the node itself.
            </summary>
            <param name="kc"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.DependencyTreeEnumerator">
            <summary>
            The DependencyTreeEnumerator is the top-level enumerator obtained from a SfcDependencyEngine to traverse results of the graph.
            Use the Children property of the current SfcDependencyNode item to request a DependencyNodeEnumerator for the item children, if any.
            The Current item is presented as a SfcDependencyNode, and the client is responsible for traversal in whatever manner desired.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.DependencyNodeEnumerator">
            <summary>
            The DependencyNodeEnumerator is general graph node enumerator which can be obtained in two ways:
            1. From the current item of a DependencyTreeEnumerator via the Children property.
            2. From the current item of a DependencyNodeEnumerator via the Ancestors or Children property. 
            The Current item is presented as a SfcKeyChain, and the client is responsible for traversal in whatever manner desired.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyEngine.DependencyNodeEnumerator.#ctor(System.Collections.Generic.IEnumerator{Microsoft.SqlServer.Management.Sdk.Sfc.DepNode},System.Collections.Generic.List{System.Boolean})">
            <summary>
            Pass a physicalMask from the node we are coming from if you want physical relations only.
            </summary>
            <param name="nodeEnumerator"></param>
            <param name="physicalMask"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTSqlScript.ExecutionMode">
            <summary>
            Will set the execution mode of the script.
            DC needs this to set the execution mode to return a result set
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTSqlScript.ExecutionType">
            <summary>
            Will set the execution type of the script.
            IS needs this to run multiple batches in one execution
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState.None">
            <summary>
              the object not yet set or unknown. It is just there as a completeness enum value. No code has ever seem to have used it (in SFC or externally)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState.Pending">
            <summary>
              the object is just instantiated, not yet committed to the backend.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState.Existing">
            <summary>
             the object corresponds to an existing object in the backend.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState.Dropped">
            <summary>
              the object is dropped in the backend and/or is no longer in a valid state.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState.ToBeDropped">
            <summary>
              the Object is marked for Deletion. Actual deletion is deferred till a commit operation like Create() etc. is called.  Added for DC support.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState.Recreate">
            <summary>
             the object is to be dropped and then created again. Required to enable dropping/adding again the same object to the collections.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDiscoverObject">
            <summary>
            The ISfcDiscoverObject interface is implemented on all SfcInstanced-derived objects and is used to ask an individual object 
            to report all known relationships in or out of the object for the dependency discovery engine. The object will automatically be marked 
            as discovered by the dependency system upon return.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDiscoverObject.Discover(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDependencyDiscoveryObjectSink)">
            <summary>
            Allow the object to indicate relationships for dependency discovery requests via the passed sink.
            </summary>
            <param name="sink"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance">
            <summary>
            The base class for all Sfc object types in a domain.</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.m_state">
            <summary>
            Returns the state of the object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.Refresh">
            <summary>
             refreshes the object's properties by reading them from the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.GetChildCollection(System.String)">
            <summary>
            Get the child collection in this instance for the given element name string.
            </summary>
            <param name="elementType">The element name string. Note that it is singular not plural like the collection name often is.</param>
            <returns>The child collection instance.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.Validate">
            <summary>
            Basic child object's validation
            </summary>
            <returns>The validation state of the object to be validated</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.InitializeUIPropertyState">
            <summary>
            Overridable from the child objects who care about initializing their states (dynamic metadata which is currently
            the ".Enabled" property)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.GetSupportedResultTypes(Microsoft.SqlServer.Management.Common.ISfcConnection,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Returns the result types supported by the URN level
            </summary>
            <param name="connection"></param>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.InitReferenceLevel(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection)">
            <summary>
            Initialize a referential collection from the containing parent object via the regular initialization mechanism.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.InitChildLevel(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection)">
            <summary>
            This function that receives a generic urn initializes for scripting all the objects of a 
            certain type that are returned by a query with the urn, e.g. for an urn that ends in 
            /Table/Column the function would initialize all the columns from all the tables in that
            database. The enumerator currently does not support this feature
            accross databases, but we do not need this for transfer anyway
            The function can also initialize a child collection via the regular initialization mechanism 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.InitObjectsFromEnumResultsRec(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcCollection,System.Data.IDataReader,System.Int32,System.Object[])">
            <summary>
            the general philosophy of this function is like this:
            we are doing a query that returns a potentially large table, and we would 
            like to minimize the lookups in the collections; we have arranged 
            for the results to be ordered in the same order as our collections, 
            so dumping the results into the objects' properties becomes something 
            like a merge operation between two data sets that have the same ordering
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.AdvanceInitRec(System.Data.IDataReader,System.Int32)">
            <summary>
            move one row down if we are on the last level of the Urn
            otherwise it move one level to the right into the Urn
            </summary>
            <returns>true if there are still records to read </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.CompareRows(System.Data.IDataReader,System.Object[],System.Int32,System.Int32)">
            <summary>
            Returns true if the current row of the reader and the parent row are equal 
            up to the specified column
            </summary>
            <param name="reader"></param>
            <param name="parentRow"></param>
            <param name="columnStartIdx"></param>
            <param name="columnStopIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.CheckObjectState">
            <summary>
            To be called from domain for any access to the object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.CheckObjectCreated">
            <summary>
            To be called from domain for when an API requires the object to be Created
            Stronger than CheckObjectState
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.Urn">
            <summary>
            Create a new Urn string on each request and return it.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.PropertyStorageProvider">
            <summary>
            This property returns the default implementation of SFC for ISfcPropertyStorageProvider interface, it can be overriden in the
            child classes to return another storage provider (i.e. flat properties list)
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance.Parent">
            <summary>
            Parent is not something that is kept local, it is implied from the keychain
            The concept of a parent is really about the hiearchy up and under the root
            if we only do this via parents then we will not be able to instantiate objects with
            only lightweight SfcKeyChain sets
            
            Setting the parent is therefor a helper operation to set a keychain
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2">
            <summary>
            The generic base class for all Sfc object types in a domain.
            </summary>
            <typeparam name="K">The type of the key for the instance class.</typeparam>
            <typeparam name="T">The type of the instance class.</typeparam>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.GetTypeMetadata">
            <summary>
            Internal static class type metadata access.
            Usually called from the domain root instance via switch.
            To customize a type's TypeMetadata, skip calling this method and return your own SfcTypeMetadata-derived object for the class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.GetTypeMetadataImpl">
            <summary>
            Internal instance class type metadata access.
            This returns the default static implementation of a type's SfcTypeMetadata.
            To customize a type's TypeMetadata, override this method in the derived type class to point to your own SfcTypeMetadata-derived object singleton for that class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.GetObjectFactory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.CreateKey">
            <summary>
            Derived classes must implement this to create a key for a class instance from its properties.
            </summary>
            <returns>The key.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.CreateIdentityKey">
            <summary>
            Wrapper for our strongly-typed version. The non-generic SfcInstance base needs this.
            </summary>
            <returns>The key.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.IdentityKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.ObjectFactory">
            <summary>
            Always create an object factory per class type.
            This is not generic since the SFC core that uses factories is still non-generic and weakly-typed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.TypeMetadata">
            <summary>
            Always create a type metadata per class type.
            The only thing a derived class may want to do is override any of the nested partial class's virtual methods it does differently.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTypeMetadata">
            <summary>
            Provide type metadata for the object (information that doesn't change with every instance)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance`2.TypeMetadata.IsCrudActionHandledByParent(Microsoft.SqlServer.Management.Sdk.Sfc.SfcDependencyAction)">
            <summary>
            The default handling of CRUD dependency based on which action is performed.
            All actions assume they are performed explicitly except dropping, which assumes the parent takes care of it
            since in most providers, deleting an object naturally deletes everything "under" it.
            </summary>
            <param name="depAction">The CRUD action.</param>
            <returns>True if the parent handles the action for this objet; false if the object handles itself.</returns> 
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.PropertyDataDispatcher">
            <summary>
            A proxy class to allow SfcPropertyCollection set and get property data in SFC instance class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcProxyInstance`3">
            <summary>
            The generic base class for a proxy to another target instance.
            The properties available are the proxy instance properties plus plus the target instance properties.
            If both the proxy and target instances have the same name for a property, then the proxy property is the one that is exposed.
            All target instance properties can always be obtained by explicitly accessing the proxy.Reference property which is the target instance.
            </summary>
            <typeparam name="K">The type of the key for the proxy instance class.</typeparam>
            <typeparam name="T">The type of the proxy instance class.</typeparam>
            <typeparam name="TRef">The type of the target reference instance class.</typeparam>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcProxyInstance`3.#ctor">
            <summary>
            Construct a new proxy instance to an unknown target reference.
            The reference will be resolved upon first access to the Reference property.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcProxyInstance`3.#ctor(`2)">
            <summary>
            Construct a new proxy instance to a known target reference.
            </summary>
            <param name="reference">The target reference instance.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcProxyInstance`3.GetReferenceImpl">
            <summary>
            Get the referenced object based on the proxy.
            Must be implemented.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcProxyInstance`3.Reference">
            <summary>
            The instance that this proxy refers to.
            This is only set once when this property is first accessed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey">
            <summary>
            The SfcKey class is the base class for all nested Key classes which every SfcInstance-derived object must have.
            It implements equality and hashing but not comparison, since Keys are only required to know if they are equal or not.
            
            Keys are meant to be immutable once constructed, hence a Key should not contain data which can change during the Key object's lifetime.
            Do not use field(s) as part of a Key which are not truly part of the identity the Key represents. We may enforce this by disallowing set()
            on the internal properties for the Key.
            
            Any ordering or collation needs are addressed by implementing:
            1. IComparable on the SfcKey-derived class
            2. IComparer or IComparer&lt;T> on the SfcCollection-derived collection class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey.Equals(System.Object)">
            <summary>
            Each Key must do proper value comparison of its data members.
            Do *not* rely solely on reference equality checking like object does.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey.GetHashCode">
            <summary>
            Each Key must provide a reasonable hash code for its data members.
            Internally, strings can use their default hash codes, and numeric values can be used directly or bit-shifted and truncated to int.
            Multiple hash codes for internal data can usually be XOR'd together to produce a decent result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey.ToString">
            <summary>
            Each Key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey.GetUrnFragment">
            <summary>
            Each Key must implement how to produce a valid XPath-oriented identity string fragmentwhich is used
            to build complete and valid Urn from a SfcKeyChain of Key[].
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey.InstanceType">
            <summary>
            The Type of the instance class associated with this key class.
            Default impl is the way a nested key class would do it for compatiblity with existing models using that technique.
            This should be overriden in any key class which is not a nested class of the instance type.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IUrnFragment">
            <summary>
            IUrnFragment is a communication interface between SFC and key creation mechanisms in domains
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.DomainRootKey">
            <summary>
            Keys of domain roots must inherit from this class, not SfcKey
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain">
            <summary>
            A SfcKeyChain is a domain root and a key list which is a full identity path to an Sfc instance object.
            The domain root determines which domain and instance it represents.
            The list of SfcAbstractKeys determines what domain type instance objects at each level it represents.
            They can be compared for equality and used as unique dictionary keys even when mixed domains are present.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.DomainRootKey)">
            <summary>
            The top-level constructor used to create Server-level SfcKeyChains from the domain instance root itself.
            This is the starting point for which domain instance a SfcKeyChain applies to, for purposes ranging from
            SfcKeyChain, datagrid/property bag caching to OQ-maintained object dictionaries.
            </summary>
            <param name="topKey"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey,Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            The constructor to be used for all SfcKeyChains which are not topmost Server-level ones.
            This is commonly used to construct SfcKeyChains in a step-down fashion from a common parent SfcKeyChain.
            </summary>
            <param name="key"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain)">
            <summary>
            The constructor to be used for creating SfcKeyChains when the fully qualified URN is known.
            This is used when a fully qualified URN is known but we do not have an object yet
            </summary>
            <param name="urn"></param>
            <param name="domain"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.BodyEquals(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            Compares for body equality of the Keys in the Keychains once either the client or server part has been checked.
            This logic is common to both cases.
            </summary>
            <param name="kc">The other keychain. It cannot be null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.ClientEquals(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            Compares for client equality of the same instance object in the same object tree.
            </summary>
            <param name="otherKeychain">The keychain to compare.</param>
            <returns>True if equivalent, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.ServerEquals(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            Compares for server equivalence of the same logical server-side entity regardless of client-side object tree.
            </summary>
            <param name="otherKeychain">The keychain to compare.</param>
            <returns>True if equivalent, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.BodyDescendant(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            Compares for body descendancy using the Keys in the Keychains once either the client or server part has been checked.
            This logic is common to both cases.
            Inside is defined as comparing as equal from the top-down until the shorter (containing) keychain is exhausted.
            Note that comparing as equivalent, or either being null means not inside.
            </summary>
            <param name="kc">The other keychain. It cannot be null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.IsClientAncestorOf(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            Check if the given keychain is inside this one, using the rules of ClientEquality().
            Inside is defined as comparing as equal from the top-down until the shorter (containing) keychain is exhausted.
            Note that comparing as equivalent, or either being null means not inside.
            </summary>
            <param name="otherKeychain">The keychain to check.</param>
            <returns>True if the given keychain is a descendant, else false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.IsServerAncestorOf(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            Check if the given keychain is inside this one, using the rules of ServerEquality().
            Inside is defined as comparing as equal from the top-down until the shorter (containing) keychain is exhausted.
            Note that comparing as equivalent, or either being null means not inside.
            </summary>
            <param name="otherKeychain">The keychain to check.</param>
            <returns>True if the given keychain is a descendant, else false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.Equals(System.Object)">
            <summary>
            Two SfcKeyChains are equal iff
            1. They are both from the same domain and domain instance tree
            2. They have the same number of Keys
            3. Each Key is equal, checked from the bottom up to avoid nearby-but-not-equal comparisons
            Each Key class must implement a reasonable operator== that compares the Key values and not rely on the default object.Equals(object)
            which only checks for reference equality.
            </summary>
            <param name="obj">The object to compare, which must be a keychain.</param>
            <returns>True if equivalent, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.GetHashCode">
            <summary>
            The hash code for a SfcKeyChain is simply a XOR of all its component Key hash codes.
            Each Key class must implement a reasonable GetHashCode() for this to distribute itself well.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.Equals(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            The strongly-typed equality check used by the strongly-typed operators.
            Compares for client equality of the same instance in the same object tree.
            </summary>
            <param name="otherKeychain">The keychain to compare.</param>
            <returns>True if equivalent, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.op_Equality(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain,Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            The == operator compares two SfcKeyChains.
            1. If both are null valued, they are equal.
            2. If both are to the same object reference, they are equal.
            3. If one is null but not the other, they are not equal.
            4. If the number of key level in the two SfcKeyChains are not the same, they are not equal.
            5. If the contents of each key level in both SfcKeyChains does not compare as equal, they are not equal.
            If it passes all of these tests, they are considered equal.
            </summary>
            <param name="leftOperand">The first keychain to compare.</param>
            <param name="rightOperand">The second keychain to compare.</param>
            <returns>True if equivalent, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.op_Inequality(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain,Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain)">
            <summary>
            The != operator compares two SfcKeyChains for inequality by using the == operator and negating the result.
            See the == operator on the SfcKeyChain class for details on equality checking.
            </summary>
            <param name="leftOperand">The first keychain to compare.</param>
            <param name="rightOperand">The second keychain to compare.</param>
            <returns>True if equivalent, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.GetObject">
            <summary>
            Get the Sfc object associated with this SfcKeyChain. This will look the object up in the hierarchy
            starting from the root of this key chain, and create new one (with putting it into collection)
            on demand. This is important so we never get orphaned objects
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.ToString">
            <summary>
            The ToString() implementation should return a string representation usable in sorting by an external comparer.
            It should not respresent an XPath or any other format, unless intended as an actual collation format.
            TODO: Either add a GetComparerString() virtual, or make Keys do comprisons using an externally-provided Comparer.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.Parent">
            <summary>
            Get the SfcKeyChain for the parent of this one.
            An SfcKeyChain is immutable so you must construct a new one to change the parent.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.LeafKey">
            <summary>
            Get the key of the leaf node
            An SfcKeyChain is immutable so you must construct a new one to change the leaf key.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.RootKey">
            <summary>
            Get the key of the root node
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.Domain">
            <summary>
            Return the domain interface for given KeyChain
            </summary>
            <returns>ISfcDomain</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcKeyChain.Urn">
            <summary>
            A SfcKeyChain can always be converted into the equivalent Urn format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1">
            <summary>
            The single string name key for an instance class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.#ctor">
            <summary>
            Default constructor for a name key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey{`0})">
            <summary>
            Construct a name key from another name key.
            </summary>
            <param name="other">The other name key.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.#ctor(System.String)">
            <summary>
            Construct a name key from a string.
            </summary>
            <param name="name">The name string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Construct a name key from a field dictionary.
            </summary>
            <param name="fields">The dictionary of field value pairs.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.Equals(System.Object)">
            <summary>
            Compare a name key to this key for value equality.
            </summary>
            <param name="obj">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.Equals(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey)">
            <summary>
            Compare a name key to this key for value equality.
            </summary>
            <param name="other">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.Equals(Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey{`0})">
            <summary>
            Compare a name key to this key for value equality.
            </summary>
            <param name="other">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.GetHashCode">
            <summary>
            Generate a hash code for the key.
            </summary>
            <returns>The hash code for the key value.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.ToString">
            <summary>
            The string value for the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.Equals(System.Object,System.Object)">
            <summary>
            Equals static operator for a key.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if the keys are equal; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.op_Equality(Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey{`0},Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey{`0})">
            <summary>
            Compare two keys for value equality.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if both keys are equal or are both null; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.op_Inequality(Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey{`0},Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey{`0})">
            <summary>
            Compare two keys for value inequality.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if both keys are not equal or only one is null; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.GetUrnFragment">
            <summary>
            The Urn level fragment obtains its name from the key name property by default.
            Override in a derived key class if you need a different fragment format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.Name">
            <summary>
            The name key value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.InstanceType">
            <summary>
            The instance type which this key represents.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.NamedKey`1.UrnName">
            <summary>
            The Urn level name corresponding to the instance type which this key respresents.
            It is normally the instance type class name.
            Overriding this typically is done with typeof(T).urnName or similar.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1">
            <summary>
            The composite string schema and name key for an instance class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.#ctor">
            <summary>
            Default constructor for a schema name key
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.#ctor(System.String)">
            <summary>
            Construct a schema name key from a name string and default schema.
            </summary>
            <param name="name">The name key value.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.#ctor(System.String,System.String)">
            <summary>
            Construct a schema name key from strings.
            </summary>
            <param name="schema">The schema string.</param>
            <param name="name">The name string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey{`0})">
            <summary>
            Construct a schema name key from another schema name key.
            </summary>
            <param name="other">The other schema name key.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Construct a schema name key from a field dictionary.
            </summary>
            <param name="fields">The dictionary of field value pairs.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.Equals(System.Object)">
            <summary>
            Compare a schema name key to this key for value equality.
            </summary>
            <param name="obj">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.Equals(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey)">
            <summary>
            Compare a schema name key to this key for value equality.
            </summary>
            <param name="other">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.Equals(Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey{`0})">
            <summary>
            Compare a schema name key to this key for value equality.
            </summary>
            <param name="other">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.GetHashCode">
            <summary>
            Generate a hash code for the key.
            </summary>
            <returns>The hash code for the key value.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.ToString">
            <summary>
            The string value for the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.Equals(System.Object,System.Object)">
            <summary>
            Equals static operator for a key.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if the keys are equal; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.op_Equality(Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey{`0},Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey{`0})">
            <summary>
            Compare two keys for value equality.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if both keys are equal or are both null; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.op_Inequality(Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey{`0},Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey{`0})">
            <summary>
            Compare two keys for value inequality.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if both keys are not equal or only one is null; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.GetUrnFragment">
            <summary>
            The Urn level fragment obtains its name from the key schema and name properties by default.
            Override in a derived key class if you need a different fragment format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.Schema">
            <summary>
            The schema key value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.Name">
            <summary>
            The name key value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.InstanceType">
            <summary>
            The instance type which this key represents.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SchemaNamedKey`1.UrnName">
            <summary>
            The Urn level name corresponding to the instance type which this key respresents.
            It is normally the instance type class name.
            Overriding this typically is done with typeof(T).urnName or similar.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1">
            <summary>
            The domain key with a string name for a general SFC domain root instance class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.#ctor">
            <summary>
            Default constructor for a general SFC named domain key.
            The caller must remember to set the Root property post-construction.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain)">
            <summary>
            Construct a general SFC named domain key from a domain root instance using its domain instance name.
            </summary>
            <param name="domain">The domain instance.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain,System.String)">
            <summary>
            Construct a general SFC named domain key from a domain root instance using the given name.
            </summary>
            <param name="domain">The domain instance.</param>
            <param name="name">The name string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Construct a general SFC named domain key from a domain root instance using the given field dictionary.
            </summary>
            <param name="domain">The domain instance.</param>
            <param name="fields">The dictionary of field value pairs.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.Equals(System.Object)">
            <summary>
            Compare a named domain key to this key for value equality.
            </summary>
            <param name="obj">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.Equals(Microsoft.SqlServer.Management.Sdk.Sfc.SfcKey)">
            <summary>
            Compare a named domain key to this key for value equality.
            </summary>
            <param name="other">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.Equals(Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey{`0})">
            <summary>
            Compare a named domain key to this key for value equality.
            </summary>
            <param name="other">A key to compare.</param>
            <returns>True if the keys are equal in value; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.GetHashCode">
            <summary>
            Generate a hash code for the key.
            </summary>
            <returns>The hash code for the key value.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.ToString">
            <summary>
            The string value for the key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.Equals(System.Object,System.Object)">
            <summary>
            Equals static operator for a key.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if the keys are equal; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.op_Equality(Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey{`0},Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey{`0})">
            <summary>
            Compare two keys for equality.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if both keys are equal or are both null; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.op_Inequality(Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey{`0},Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey{`0})">
            <summary>
            Compare two keys for inequality.
            </summary>
            <param name="leftOperand">A key to compare.</param>
            <param name="rightOperand">A key to compare.</param>
            <returns>True if both keys are not equal or only one is null; otherwise false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.GetUrnFragment">
            <summary>
            The Urn level fragment obtains its name from the key name property by default.
            Override in a derived key class if you need a different fragment format.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.Name">
            <summary>
            The name key value.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.InstanceType">
            <summary>
            The instance type which this key represents.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.NamedDomainKey`1.UrnName">
            <summary>
            The Urn level name corresponding to the instance type which this key respresents.
            It is normally the instance type class name.
            Overriding this typically is done with typeof(T).urnName or similar.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcCardinality">
            <summary>
            Specifies the cardinality of the type in relationship to its parent
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcCardinality.One">
            <summary>
            Always one reference (default)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcCardinality.ZeroToOne">
            <summary>
            The reference may be null
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcCardinality.ZeroToAny">
            <summary>
            Zero to any (typical for SFC/SMO collections)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcCardinality.OneToAny">
            <summary>
            At least one to any (rare, but it happens, such as (Table.)Columns.Column)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship.None">
            <summary>
            No relationship
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship.Object">
            <summary>
            Standalone objects (such as SMO Server, Database, Table, and regular (value type and other) properties)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship.ObjectContainer">
            <summary>
            A container that contains independent objects (such as SMO Server.Databases)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship.ChildObject">
            <summary>
            A child object (such as SMO Server.Information, or Columns.Column) 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship.ChildContainer">
            <summary>
            A container that contains children (such as SMO Table.Columns)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship.ParentObject">
            <summary>
            A back reference to the parent
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcRelationship.Ignore">
            <summary>
            Ignore this object, not a part of SFC type system
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementFlags.Standalone">
            <summary>
            ElementType is supported in Standalone database engine type.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcElementFlags.SqlAzureDatabase">
            <summary>
            ElementType is supported in SqlAzure database engine type.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.Required">
            <summary>
            Property is required to have a value to create or alter the object.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.Expensive">
            <summary>
            Property is expensive to retrieve.
            Non-expensive properties marked in the Enumerator are usually retrieved on initial access to an object.
            The model and Enumerator are independently specifies but should agree.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.Computed">
            <summary>
            Property is computed. This implies that the property is not Required.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.Encrypted">
            <summary>
            Property contains encrypted data.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.ReadOnlyAfterCreation">
            <summary>
            Proprety cannot be set after the instance has been persisted.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.Data">
            <summary>
            Property contains data (such as CreateDate). It is never set, directly or indirectly.
            This implies that the property is not Required.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.Standalone">
            <summary>
            Property is applicable to the SQL Server standalone database engine model.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.SqlAzureDatabase">
            <summary>
            Property is applicable to the Microsoft Azure SQL Database engine model.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.Design">
            <summary>
            Property is relevant for Design purposes. 
            A property with this flag will be processed by the Differentiator service.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcPropertyFlags.Deploy">
            <summary>
            Property is relevant for Deploy purposes. 
            A property with this flag will be processed by the Differentiator service.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectFlags.None">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectFlags.NaturalOrder">
            <summary>
            The NaturalOrder Flag indicates whether the ordering of the children in a 
            parent-child relationship is important (true) or not (false). 
            
            The flag affects the behaviour of Differentiator. If it is true, then when 
            the order of a child in one graph differs from that of another graph, the 
            child object will appear as a “remove” entry from its original position, and 
            as an “add” to the new position.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectFlags.Design">
             <summary>
             Property is relevant for Design purpose. 
            
             The flag affects the behaviour of Differentiator. Property with this flag
             will processed by the Differentiator.
             </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcObjectFlags.Deploy">
             <summary>
             Property is relevant for Deploy purpose. 
            
             The flag affects the behaviour of Differentiator. Property with this flag
             will processed by the Differentiator.
             </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceResolver">
            <summary>
            Interface for resolving from a source to a single target.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceResolver`2">
            <summary>
            Generic interface for resolving from a source to a single target.
            </summary>
            <typeparam name="S">The type of the source object to resolve from.</typeparam>
            <typeparam name="T">The type of the target object.</typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceCollectionResolver">
            <summary>
            Interface for resolving from a source to an enumerable target.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceCollectionResolver`2">
            <summary>
            Generic interface for resolving from a source to an enumerable target.
            </summary>
            <typeparam name="S">The type of the source object to resolve from.</typeparam>
            <typeparam name="T">The element type of the target enumeration.</typeparam>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.#ctor(System.Type)">
            <summary>
            Create an instance of the SfcMetadataDiscovery class
            </summary>
            <param name="type">An SFC type</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.GetParentType(System.Type)">
            <summary>
            Temporary function, will be replaced by a call to domain registration
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.GetParentsFromType(System.Type)">
            <summary>
            The list of valid parent Types which an instance of this child type may have as its parent.
            Usually there is a single Type that can be the parent, but sometimes there are more.
            </summary>
            <returns>null if there is no parent for the type, otherwise the list of possible parent Types</returns>
            <param name="childType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.GetUrnSkeletonsFromType(System.Type)">
            <summary>
            Get the list of possible Urn skeleton strings that lead to this type.
            </summary>
            <param name="inputType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.AddToPropertyInfoCache(System.RuntimeTypeHandle,System.String,System.Reflection.PropertyInfo)">
            <summary>
            We limit the number of types to avoid too much memory pressure
            </summary>
            <param name="handle"></param>
            <param name="propertyName"></param>
            <param name="property"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.CleanupCaches">
            <summary>
            This function is used to clean the static caches. It is used by serialization to dispose of unused objects.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.Type">
            <summary>
            Specifies the type of this node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.ElementTypeName">
            <summary>
            Returns the element type name, if it is different from the type name.
            This element type name is used in a URN.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.IsBrowsable">
            <summary>
            Indicates whether the type should be browseable -- used for UI such as Powershell
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.Relations">
            <summary>
            Returns the list of properties this object contains
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.ReadOnlyCollectionRelations">
            <summary>
            Returns a readonly list of properties this object contains.
            This is much faster than the public Relations properties since it avoids copying each element to a new list.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.Keys">
            <summary>
            If this is an object with one or more identifying keys, the list of properties holding the keys will be returned.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataDiscovery.TypeHandlePropertyNameKey">
            <summary>
            This is a key used in the TypePopertyInfo cache and contains the type handle and the property Name
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.Resolve(System.Object)">
            <summary>
            Helper method to resolve references
            If the metadata relation is a reference relationship, it will use the reference attribute's resolver to return the target instances.
            If the metadata relation is a simple property value, it will return the value itself.
            </summary>
            <returns>The target value.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.Resolve``2(``1)">
            <summary>
            Helper method to resolve a single-target reference.
            It returns a strongly-typed instance.
            </summary>
            <typeparam name="S">The type of the source instance.</typeparam>
            <typeparam name="T">The type of the target instance.</typeparam>
            <param name="instance">The source instance to resolve for.</param>
            <returns>The target instance.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.ResolveCollection(System.Object)">
            <summary>
            Helper method to resolve reference collections.
            If the metadata relation is a reference collection relationship, it will enumerate the target collection instances.
            If the metadata relation is a simple property value, it will enumerate the value itself.
            </summary>
            <param name="instance">The source instance to resolve for.</param>
            <returns>The target instance enumeration.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.ResolveCollection``2(``1)">
            <summary>
            Helper method to resolve reference collections.
            It yields strongly-typed instances.
            Any enumerated values which are not compatible as type <typeparamref name="T"/> are skipped over.
            </summary>
            <typeparam name="S">The type of the source instance.</typeparam>
            <typeparam name="T">The type of the target enumeration.</typeparam>
            <param name="instance">The source instance to resolve for.</param>
            <returns>The target values enumeration.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.PropertyName">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.Cardinality">
            <summary>
            Specifies the cardinality of this type in relationship with its parent.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.Relationship">
            <summary>
            Relationship with the parent.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.PropertyFlags">
            <summary>
            If this is a property type, this will return the flags that have been defined for it.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.PropertyDefaultValue">
            <summary>
            If htis is a property type, this will return a default value for the property
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.RelationshipAttributes">
            <summary>
            Attributes for this node.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.ContainerType">
            <summary>
            If this is a container, this is the type it contains
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.IsBrowsable">
            <summary>
            Indicates whether the type should be browseable -- used for UI such as Powershell
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.SfcMetadataRelation.SupportsDesignMode">
            <summary>
            Indicates whether the type supports design mode
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcMetadata">
            <summary>
            Interface that returns metadata for the type instance on which it is implemented
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcMetadataProvider">
            <summary>
            Interface that returns the root instance of the metadata provider. As each domain
            may implement its own provider, this is the method that will return the domain's implementation
            of the metadata provider.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1">
            <summary>
            Used as a base class for objects that needs to be extended with additional properties
            Allows to add these new properties to the PropertySet, so they can be accessed using PropertyProvider
            Also, it helps to establish dependancy between extended property and original one
            </summary>
            <typeparam name="TSfcInstance"></typeparam>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.#ctor">
            <summary>
            default ctor. Used in code-generation scenarios
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.#ctor(`0)">
            <summary>
            ctor
            </summary>
            <param name="parent">parent object. Used as a bese property provider</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.RegisterProperty(System.Reflection.PropertyInfo)">
            <summary>
            Register an additional reflected property
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.RegisterParentProperty(System.Reflection.PropertyInfo)">
            <summary>
            Register property of the parent, that has not been included in properties collection
            (like 'Name' in SMO or collections
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.RegisterProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Register an additional reflected property, dependant on the property from the parent object
            </summary>
            <param name="propertyInfo">Reflected property</param>
            <param name="parentPropertyName">Parent property name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.GetParentSfcPropertySet">
            <summary>
            Returns an instance of the parent's property set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.OnPropertyChanged(System.String)">
            <summary>
            Fires PropertyChanged event, when it has any subscriber
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.OnPropertyMetadataChanged(System.String)">
            <summary>
            Fires PropertyMetadataChanged event, when it has any subscriber
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.GetPropertySet">
            <summary>
            returns collection of the properties
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.Parent">
            <summary>
            Parent object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.PropertyDictionary">
            <summary>
            Property dictionary accessor
            Garantied to return an instance of SfcPropertyDictionary
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.SfcPropertyDictionary">
            <summary>
            Property dictionary
            It encapsulates properties form the parent provider and allows to add 
            an additional properties.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.SfcPropertyDictionary.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcPropertySet)">
            <summary>
            ctor
            </summary>
            <param name="parent">parent propety provider</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectExtender`1.SfcPropertyDictionary.Properties">
            <summary>
            Internal property dictionary
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ExtendedPropertyAttribute">
            <summary>
            Indicated that this property depends on another property
            for metadata and value changes
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExtendedPropertyAttribute.#ctor">
            <summary>
            default ctor. no parent propety provided
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ExtendedPropertyAttribute.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="parentPropertyName">parent property</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ExtendedPropertyAttribute.ParentPropertyName">
            <summary>
            Parent Property name
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ExtendedPropertyAttribute.HasParent">
            <summary>
            Indicates that property has a parent properety
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectIterator">
            Internal IEnumerable utility class that walks over the
            given table and creates objects based on the string in
            the first column of each row.
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectIterator.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain,Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode,Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryExpression,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            Basic iterator over a query against a Sfc connection
            </summary>
            <param name="root">The domain root instance indicating the object hierarchy and connection.</param>
            <param name="activeQueriesMode">Indicates the cache or connection mode disposition needed to process this iterator successfully.
            This may affect how GetConnection on the domain root responds.</param>
            <param name="query">The query string to process.</param>
            <param name="fields">The field names to retrieve. If null, all default inexpensive fields are retrieved.</param>
            <param name="orderByFields"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectIterator.Close">
            <summary>
            Close the iterator and its resources including the data reader used.
            Either call this method or use the Dispose() pattern to ensure resources are reclaimed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectIterator.CloseDataReader">
            <summary>
            Close the DataReader (and the DataTable if we have one).
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectIterator.CloseClonedConnection">
            <summary>
            Close the connection if it was cloned.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectIterator.GetConnection">
             <summary>
             Determine the actual connection to use (original or clone).
             This is tricky since the DataReader we open and allow to live until this iterator object dies will conflict with any
             other DataReader the caller implicitly or explicitly needs while processing the results.
             
             If multiple concurrent queries are supported on the connection (i.e. MARS), or we are not allowed to clone the connection
               Use the one we have
             Else
               try {Use a clone of the connection}
               catch {Use the one we have}
             
             We leave it to the caller to handle invalid cloning attempts, and to adjust their code to use the iterator to
             cache the results into their own temp collection before proceeding to perform more operations that also need a DataReader.
             
            Also, if we are running in the SQLCLR context connection, we cannot directly clone it and have to make a "loopback" clone connection.
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain,Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode)">
            <summary>
            Create an object query for a particular domain instance.
            The query mode determines how requests to return an open iterator are handled and the particular connection to use.
            </summary>
            <param name="domain">The root of the SfcInstance object tree to query.</param>
            <param name="activeQueriesMode">CachedQueries avoids any issues with more than one running query by first caching the query results and closing the query data reader.
            SingleActive
            MultipleActiveQueries indicated that any provided connection via the domain's GetConnection method should assume that the main connection is busy with an already-active query and
            an alternate connection may be more suitable to use.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain)">
            <summary>
            Create an object query for a particular domain instance object hierarchy and connection.
            If you use ExecuteIterator and want to make another query before closing it, consider using the overload
            which indicates support for multiple active queries, or simply use ExecuteCollection to avoid it.
            </summary>
            <param name="domain">The domain of the SfcInstance object tree to query.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.IAlienRoot)">
            This function should only exist as long as the SMO.Server
            class is not an SfcInstance. The given object must be
            an instance of SMO.Server.
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery.ExecuteDataTable(Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryExpression,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            Execute the query string to retrieve the specified fields and return a fully populated DataTable.
            </summary>
            <param name="query">The query string to process.</param>
            <param name="fields">The field names to retrieve. If null, all default inexpensive fields are retrieved.</param>
            <param name="orderByFields">The field names that we need to order on. If null no order will be used.</param>
            <returns>The data table of results.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery.ExecuteIterator(Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryExpression,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            Execute the query string and return an SfcObjectIterator to enumerate the results without caching them.
            If MultipleActiveQueries is true, then you must either provide a suitable connection when requests by GetConnection
            or use the ExecuteCachedIterator instead to avoid this issue.
            </summary>
            <param name="query">The query string to process.</param>
            <param name="fields">The field names to retrieve. If null, all default inexpensive fields are retrieved.</param>
            <param name="orderByFields"></param>
            <returns>A SfcObjectIterator to enumerate the results. This is suitable for IEnumerable use and must be disposed when done.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery.Init(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcDomain,Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode)">
            <summary>
            Common constructor init.
            </summary>
            <param name="domain"></param>
            <param name="mode"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery.SfcQueryExpression">
            <summary>
            The most recent query string processed. This is readonly since each query execution is passed the query to perform.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQuery.ActiveQueriesMode">
            <summary>
            Single or multiple active queries?
            If multiple queries is indicated, then the connection returned must be capable of performing a query and getting results
            assuming the main connection is busy with an already-active query.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSqlPathUtilities.ConvertUrnToPath(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Converts a URN to a path
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSqlPathUtilities.EncodeSqlName(System.String)">
            <summary>
            Encodes the string into a URL encoded string.
            Note that we encode ':'. This is a known bug in PowerShell 1.0 that you cannot cd into
            a location that has a ':'.
            We need to receive the '\' escaped as we do not know whether it is a path separator or a part
            of a name (which is a legal id character in SQL).
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSqlPathUtilities.DecodeSqlName(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSqlPathUtilities.DecodeSqlName(System.String[])">
            <summary>
            Decodes an array of names.
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcProperty">
            <summary>
            The element type of PropertyCollections which specifies the value, info and state of a particular property of an object instance.
            It uses the SfcPropertyCollection and its access to the Sfc type-specific IPropertyDataDispatch data interface for value access,
            and its access to the metadata for property info.
            
            All management of the value and state of a property must pass through here or it may not be tracked correctly such as dirty state
            and retrieved state. If a strongly-typed property in the derived class simply wants to talk directly to its PropertyBag member, it would have to updat
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyCollection">
            <summary>
            Each instance has a SfcPropertyCollection which is used for general access to the property names, values and info.
            It uses the metatdata each type provides for info about the properties. It also uses the PropertyDataDispatch proxy class
             to map property indexes to strongly-typed data members in the PropertyBag of each Sfc instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryExpression.ToUrn">
            For ease of use with the current Enumerator, allow us to
            be a Urn.
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryExpression.GetLeafTypeName">
            <summary>
            Returns the string Type name of the expression leaf.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryExpression.Expression">
            Returns the compiled form of this expression.
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcQueryExpression.ExpressionSkeleton">
            Returns the expression as a string stripped of all filters.
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcReferenceCollection`3">
            <summary>
            The Sfc collection base for all domain collections. 
            It abstracts all the necesssary handshaking between the parent object, and the collection or element objects.
            </summary>
            <typeparam name="S">The type of the collection owner.</typeparam>
            <typeparam name="T">The element type of the target collection.</typeparam>
            <typeparam name="K">The key type of the target collection.</typeparam>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcReferenceCollection`3.#ctor(`2,Microsoft.SqlServer.Management.Sdk.Sfc.Metadata.ISfcReferenceCollectionResolver{`1,`2},System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a collection of instance references.
            </summary>
            <param name="owner">The parent of the collection.</param>
            <param name="resolver">The resolver used to determine the target references for collection initialization or refresh.</param>
            <param name="comparer">The key comparer for the collection.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcReferenceCollection`3.GetKeyFromValue(`1)">
            <summary>
            Derived types implement this to obtain a key from the item value.
            </summary>
            <param name="value">The current item to use to obtain or calculate its key.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.GetObjectTypeFromFullName(System.String)">
            <summary>
            Get a fully qualified .Net type from fully qualified type name
            If assembly is not registered, exception is thrown.
            </summary>
            <param name="fullTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.GetObjectTypeFromFullName(System.String,System.Boolean)">
            <summary>
            Get a fully qualified .Net type from fully qualified type name
            If assembly is not registered, exception is thrown.
            </summary>
            <param name="fullTypeName"></param>
            <param name="ignoreCase">true to ignore the case of the type name; otherwise, false.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.TryGetObjectTypeFromFullName(System.String)">
            <summary>
            Get a fully qualified .Net type from fully qualified type name
            If assembly is not registered, null is returned.
            </summary>
            <param name="fullTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.LocateSfcExtension(System.String)">
            <summary>
            Loads a specific assembly based on domain's name
            </summary>
            <param name="domainName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.LocateSfcExtension(System.String,System.Boolean)">
            <summary>
            Loads a specific assembly based on domain's name
            </summary>
            <param name="domainName"></param>
            <param name="throwOnUnregisteredDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.GetRegisteredDomainForType(System.String)">
            <summary>
            Returns the domain name for a specific type
            </summary>
            <param name="fullTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.GetRegisteredDomainForType(System.String,System.Boolean)">
            <summary>
            Returns the domain name for a specific type
            </summary>
            <param name="fullTypeName"></param>
            <param name="throwOnUnregisteredDomain"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.GetRegisteredDomainForType(System.Type)">
            <summary>
            Returns the domain Information object for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.GetFullAssemblyName(System.String)">
            <summary>
            Construct the full assembly name out of just an assembly/dll name [microsoft.sqlserver.dmf.dll for example]. 
            Since we don't support external plugins in this release,
            all parts of its strong name except for the assembly name should be exactly the same as ours,
            so we use this logic for creating the full name.
            NOTE: assembly name can be both with or without .DLL or .EXE extensions
            (adapted from OE StaticHelpers.cs)
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcRegistration.Domains">
            <summary>
            A static function to return the current registered domains, currenly it will return a hard coded list for the only known
            domains: SMO, DC, Acme and DMF
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDomainInfo">
            <summary>
            Class to hold domains' information
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDomainInfo.LateLoadRootType">
            <summary>
            Load root type from an assembly
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDomainInfoCollection">
            <summary>
            Readonly Collection to hold the current domains information
            Currently it holds information only about SMO, DC, DMF and ACME
            TODO: Add extensions to support loading more domains information from XML documents.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDomainInfoCollection.Contains(System.String)">
            <summary>
            Finds if a specific domain exists in the collection or not using domain's name.
            </summary>
            <param name="domainName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDomainInfoCollection.GetDomainForNamespaceQualifier(System.String)">
            <summary>
            Get domain from the current collection using Namespace Qualifier name
            </summary>
            <param name="namespaceQualifier"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcDomainInfoCollection.Item(System.String)">
            <summary>
            Get domain from the current collection using domain's name
            </summary>
            <param name="domainName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.IXmlSerializationAdapter">
            <summary>
            Interface of adapter that serializes and deserializes object of a some non SFC type for SfcSerializer.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IXmlSerializationAdapter.ReadXml(System.Xml.XmlReader,System.Object@)">
            <summary>
            Deserializes object from its xml representation (which will a valid xml). Implementation of this interface should unescape
            invalid xml characters that were escaped in WriteXml(), using SfcSecureString.XmlUnEscape()
            </summary>
            <param name="reader"></param>
            <param name="deserializedObject"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.IXmlSerializationAdapter.WriteXml(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serialize an object to its xml representation. Implementation of this interface should:
            1. produce a valid xml document(not just a fragment), just as XmlSerializer does.
            2. escape invalid xml characters in the string representation of the given object, if any, using SfcSecureString.XmlEscape()
            </summary>
            <param name="writer"></param>
            <param name="objectToSerialize"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSerializableUpgrade">
            <summary>
            This interface supports upgrading older version's serialized
            content to conform to the newer version
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstanceSerializedData">
            <summary>
            This struct is used to transfer serialized information of any
            sfc instance to its corresponding domain
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSerializedTypes">
            <summary>
            This enum represents all possible SML nodes in
            serialized content of an sfc instance
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.UpgradeSession">
            <summary>
            This class supplies the information of each instance to the domain
            and seeks upgraded content, which conforms to the current version
            of an object model
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UpgradeSession.UpgradeInstance(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstanceSerializedData},System.Int32,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This function transfers the serialized information to the domain and 
            seeks the upgraded object instance
            
            The output needs to be a list of pairs, of sml uri and corresponding instance.
            An upgrade can result in multiple instances and hence we expect a list.
            If the instance is deleted, a null can be returned.
            </summary>
            <param name="sfcInstanceData"></param>
            <param name="fileVersion"></param>
            <param name="smlUri"></param>
            <param name="sfcCache"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UpgradeSession.UpgradeInstance(System.Type,System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstanceSerializedData})">
            <summary>
            This is a helper function for the domain to get instance from serialized instance data
            </summary>
            <param name="newInstanceType"></param>
            <param name="sfcInstanceData"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UpgradeSession.PostProcessUpgrade(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int32)">
            <summary>
            The post process is an additional help to the domains to be able to adjust 
            any hierarchy, uri changes or any such overall changes. This function is 
            called once deserialization of each instance is done.
            </summary>
            <param name="sfcCache"></param>
            <param name="fileVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.UpgradeSession.IsUpgradeRequiredOnType(System.String,System.Int32)">
            <summary>
            SFC calls this function on the domain for each type (with version) before
            it would like to deserialize.
            
            A false return value indicates a no-upgrade and hence SFC can deserialize the 
            content itself. If a true is returned, the upgrade sequence needs to be run.
            </summary>
            <param name="instanceType"></param>
            <param name="fileVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNodeFactory">
            <summary>
            This factory is used to obtain SfcSimpleNode from legacy Smo object. It allows Smo or Sfc 
            object model to be walked in the same code path.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNodeFactory.factory">
            <summary>
            Singleton object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNodeFactory.GetSimpleNode(System.Object)">
            <summary>
            Obtains a SfcSimpleNode represents the specified legacy node. The specified node must
            be either a type of IAlienObject or SfcInstance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNodeFactory.GetSimpleNode(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter)">
            <summary>
            Obtains a SfcSimpleNode represents the specified legacy node. The specified node must
            be either a type of IAlienObject or SfcInstance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNodeFactory.IsSupported(System.Object)">
            <summary>
            Returns true of the specified object is supported.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNodeFactory.Factory">
            <summary>
            Obtains the singleton factory
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNode">
            <summary>
            Basic wrapper implementation of ISfcSimpleNode using reflection.
            
            The data structure is designed to be as non-retaining as possible, meaning that
            the actual objects and wrappers are released as soon as they are not needed. Asking
            for any value from the node might result in different instance being returned. 
            (because the node does not track any of them.)
            
            The class is not thread-safe. Multi-threaded program should start from distinct node.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNode.#ctor(System.Object,Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter)">
            <summary>
            Constructor with default access.
            
            The implementation only support IAlienObject or SfcInstance.
            </summary>
            <param name="reference"></param>
            <param name="adapter"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNode.ObjectReference">
            <summary>
            The actual object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcSimpleNode.Urn">
            <summary>
            The Urn of the actual object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcNodeMap">
            <summary>
            A simple map implementation. It does not retain any value it returns. 
            
            Asking the node multiple time will result in different instance backed by the same
            actual object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcPropertyMap">
            <summary>
            A simple map implementation. It does not retain any values it returns. 
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcContainerMap">
            <summary>
            A simple map implementation. It does not retain any value it returns. 
            
            Asking the children multiple time will result in different IEnumerable instance 
            to be returned.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcChildren">
            <summary>
            This is a support object for SfcContainerMap.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcChildrenEnumerator">
            <summary>
            This is a support object for SfcContainerMap.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter">
            <summary>
            A mechansim that let a client adapters a custom object model into SfcSimpleNode.
            
            The adapter provides default implementation by reflection, where possible.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter.IsSupported(System.Object)">
            <summary>
            Indicate if this provider support the specified graph. If it is, 
            returns true, false otherwise.
            
            The method is called only one on the top most node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter.GetUrn(System.Object)">
            <summary>
            Get the Urn of the specified object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter.GetProperty(System.Object,System.String)">
            <summary>
            Get the named Property of the specified object. The default implementation
            resolve the property by reflection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter.GetObject(System.Object,System.String)">
            <summary>
            Get the named Child of the specified object. The default implementation
            resolve the child by reflection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter.GetEnumerable(System.Object,System.String)">
            <summary>
            Get the named children enumerable of the specified object. The default implementation
            resolve the children by reflection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter.IsCriteriaMatched(System.Object)">
            <summary>
            Returns true if the specified children matches the adapter criteria and will be
            included in the result. The default implementation always return true.
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SimpleNodeAdapter.IsSystemGeneratedException(System.Exception)">
            <summary>
            Utility method to properly pass thru exception
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.GenerateScript(Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance)">
            <summary>
            
            </summary>
            <param name="sfcObject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.GenerateScript(Microsoft.SqlServer.Management.Sdk.Sfc.SfcInstance,System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.RuntimeArg},System.Boolean)">
            <summary>
            
            </summary>
            <param name="sfcObject"></param>
            <param name="runtimeArgs"></param>
            <param name="declareArguments"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.Procedure">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.Arguments">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.SprocArg">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.SprocArg.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="property"></param>
            <param name="required"></param>
            <param name="output"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.SprocArg.#ctor(System.String,System.Boolean)">
            <summary>
            This constructor is used when a parameter is not a
            property on an object but will be provided during the
            call to GenerateScript as a RuntimeArg.
            </summary>
            <param name="name"></param>
            <param name="required"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.SprocArg.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            This constructor is used when a parameter is not a
            property on an object but will be provided during the
            call to GenerateScript as a RuntimeArg.
            Output can be specified here
            </summary>
            <param name="name"></param>
            <param name="required"></param>
            <param name="output"></param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.SprocArg.argName">
            
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.SprocArg.property">
            
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.SprocArg.required">
            
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.SprocArg.output">
            
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.RuntimeArg">
            <summary>
            This struct is used for arguments that are not based on a
            SfcProperty inside of the object, but on some arbitrary
            value.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.RuntimeArg.#ctor(System.Type,System.Object)">
            <summary>
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.RuntimeArg.type">
            
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcTsqlProcFormatter.RuntimeArg.value">
            
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationResult">
            <summary>
            Provides detailed validation information.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationResult.Text">
            <summary>
            Gets the text result of the validation result item
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationResult.BindingKey">
            <summary>
            The property name which caused the error.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationResult.ErrorDetails">
            <summary>
            The detailed exception for the error
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationResult.IsWarning">
            <summary>
            True if warning, otherwise false
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationMethod">
            <summary>
            Encapsulates various common state operations
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState">
            <summary>
            Provides overall state information.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.#ctor">
            <summary>
            Constructs an object of type ValidationState
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs an object of type ValidationState
            </summary>
            <param name="message">The error/warning message</param>
            <param name="bindingKey">The property name which caused the problem</param>
            <param name="isWarning">True if warning, otherwise false</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.#ctor(System.Exception,System.String,System.Boolean)">
            <summary>
            Constructs an object of type ValidationState, the error message is set to the exception message
            </summary>
            <param name="error">The source exception for the error/warning</param>
            <param name="bindingKey">The property name which caused the problem</param>
            <param name="isWarning">True if warning, otherwise false</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.#ctor(System.String,System.Exception,System.String,System.Boolean)">
            <summary>
            Constructs an object of type ValidationState
            </summary>
            <param name="message">The error/warning message</param>
            <param name="error">The source exception for the error/warning</param>
            <param name="bindingKey">The property name which caused the problem</param>
            <param name="isWarning">True if warning, otherwise false</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.#ctor(System.String,System.String)">
            <summary>
            Constructs an object of type ValidationState, the fault type is set to error by default.
            </summary>
            <param name="message">The error/warning message</param>
            <param name="bindingKey">The property name which caused the problem</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.#ctor(System.Exception,System.String)">
            <summary>
            Constructs an object of type ValidationState, the error message is set to the exception message, the fault type is set to error by default.
            </summary>
            <param name="error">The source exception for the error/warning</param>
            <param name="bindingKey">The property name which caused the problem</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.#ctor(System.String,System.Exception,System.String)">
            <summary>
            Constructs an object of type ValidationState, the fault type is set to error by default.
            </summary>
            <param name="message">The error/warning message</param>
            <param name="error">The source exception for the error/warning</param>
            <param name="bindingKey">The property name which caused the problem</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.AddError(System.String,System.String)">
            <summary>
            Adds a new error to the errors list
            </summary>
            <param name="message">The error message</param>
            <param name="bindingKey">The property name which caused the error</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.AddError(System.Exception,System.String)">
            <summary>
            Adds a new error to the errors list, the error message is set to the exception message.
            </summary>
            <param name="error">The source exception for the error</param>
            <param name="bindingKey">The property name which caused the error</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.AddError(System.String,System.Exception,System.String)">
            <summary>
            Adds a new error to the errors list
            </summary>
            <param name="message">The error message</param>
            <param name="error">The source exception for the error</param>
            <param name="bindingKey">The property name which caused the error</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.AddWarning(System.String,System.String)">
            <summary>
            Adds a new warning to the warnings list
            </summary>
            <param name="message">The warning message</param>
            <param name="bindingKey">The property name which caused the warning</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.AddWarning(System.Exception,System.String)">
            <summary>
            Adds a new warning to the warnings list, the warning message is set to the exception message.
            </summary>
            <param name="error">The source exception for the warning</param>
            <param name="bindingKey">The property name which caused the warning</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.AddWarning(System.String,System.Exception,System.String)">
            <summary>
            Adds a new warning to the warnings list
            </summary>
            <param name="message">The warning message</param>
            <param name="error">The source exception for the warning</param>
            <param name="bindingKey">The property name which caused the warning</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.Results">
            <summary>
            Get the list of the results associated with this validation state
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.HasErrors">
            <summary>
            True if this validation state contains one error or more, otherwise false
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.ValidationState.HasWarnings">
            <summary>
            True if this validation state contains one warning or more, otherwise false
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.ISfcValidate">
            <summary>
            Interface that allows object state to be validated.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection">
            <summary>
            This class is a connection to a Sql Server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            
            </summary>
            <param name="sqlConnection"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection.ToEnumeratorObject">
            Temporary function needed as long as the sql enumerator is
            unaware of the SqlStoreConnection type
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection.Equals(Microsoft.SqlServer.Management.Sdk.Sfc.SfcConnection)">
            <summary>
            
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection.Connect">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection.Disconnect">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection.Copy">
            <summary>
            Performs a deep copy
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Sdk.Sfc.SqlStoreConnection.IsOpen">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode">
            <summary>
            This enumeration determines the use of query iterators on object query results. It only applies to queries returning an iterator.
            Caching avoids these issues entirely at the expense of first caching all of the query results in memory.
            Single or multiple active queries both use a non-cached iterator, but affect how the domain instance responds the GetConnection method.
            
            All iterators of query results must always be disposed as soon as they are no longer in use regardless of mode.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode.CachedQuery">
            <summary>
            CachedQueries avoids any issues with nested or overlapping active queries by internally caching the query results and iterating on that.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode.SingleActiveQuery">
            A non-cached iterator is desired since no other query will be issued on the same domain instance connection while this iterator is open and in use.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectQueryMode.MultipleActiveQueries">
            A non-cached iterator is desired, but since other queries may be issued on the domain instance's connection while this iterator is still open and in use,
            a more suitable cloned or alternate connection may be used. Assume the domain instance connection is busy with another query even if it currently is not.
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUtility">
            <summary>
            Utility class for miscellaneous functions
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUtility.GetSmlUri(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.Type)">
            <summary>
            returns equivalent SML-URI for a given uri
            </summary>
            <param name="urn"></param>
            <param name="instanceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUtility.GetSmoChildType(System.String,System.String,System.Type)">
            <summary>
            Calls the SqlSmoObject.GetChildType for the string type passed as a parameter
            </summary>
            <param name="type"></param>
            <param name="parentName"></param>
            <param name="instanceType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUtility.GetSmlUri(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.Type,System.Boolean)">
            <summary>
            returns equivalent SML-URI for a given uri
            </summary>
            <param name="urn"></param>
            <param name="instanceType"></param>
            <param name="useCache">if true then a urn cache is used to improve performance</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUtility.TryGetSqlCeToolsPath">
            <summary>
            We use the managed RegistryKey type to get the highest version of the SQLCE tools installed -
            SSMS always binds to the highest (not latest) version available. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUtility.GetSqlCeToolsPath">
            <summary>
            We use the managed RegistryKey type to get the highest version of the SQLCE tools installed -
            SSMS always binds to the highest (not latest) version available. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.SfcUtility.LoadSqlCeAssembly(System.String)">
            <summary>
            This function loads the highest version of SQLCE client assemblies SSMS might need.
            
            So as to load using a path (fetched from registry key) and still with strong name, AssemblyName is used.
            Note that the public key of SFC.dll (Executing assembly) is same as sqlce assemblies. So, it's used for strong
            name verification
            </summary>
            <param name="assemblyName"> The name of the assembly to load - can be with/without extension</param>
            <returns>SQLCE assembly</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.SQLToolsCommonTraceLvl">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code.
            Defines values used for tracing.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Sdk.Sfc.TraceHelper">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code.
            This class defines methods used for tracing.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.TraceHelper.Trace(System.String,System.String,System.Object[])">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.TraceHelper.Trace(System.String,System.UInt32,System.String,System.Object[])">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.TraceHelper.Assert(System.Boolean)">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.TraceHelper.Assert(System.Boolean,System.String)">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Sdk.Sfc.TraceHelper.LogExCatch(System.Exception)">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
    </members>
</doc>
