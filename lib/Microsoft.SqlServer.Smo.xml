<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SqlServer.Smo</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.Alert">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/Alert
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlSmoObject">
            <summary>
             Contains common functionality for all the instance classes
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoObjectBase.SetState(Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Sets the object state (Existing, Dropped etc.)
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoObjectBase.SetState(Microsoft.SqlServer.Management.Smo.PropertyBagState)">
            <summary>
             Sets the state of the property bag (Empty, Lazy or Full).
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoObjectBase.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            This function is overridden by instance classes that need to validate property 
            values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoObjectBase.GetPropertyDefaultValue(System.String)">
            <summary>
             Returns default value for the property, when object is in 'Pending' or 'Creating' state
             </summary>
             <param name="propname">property name</param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoObjectBase.OnPropertyMissing(System.String,System.Boolean)">
            <summary>
            Called when the value for this property is missing.
            </summary>
            <param name="propname"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoObjectBase.State">
            <summary>
            Returns the state of the object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.CheckObjectState(System.Boolean)">
            <summary>
            This is a virtual function, so that derived classes can
            override it if they want to do additional checks on the state of the object
            </summary>
            <param name="throwIfNotCreated"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.CheckObjectStateImpl(System.Boolean)">
            <summary>
            Checks object state
            Because it is not recusrive, this function can be called directly and
            which means derived classes can't supply their own validation
            </summary>
            <param name="throwIfNotCreated"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetTypeFromUrnSkeleton(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            This function returns the Type matching the given URN
            skeleton. It is the inverse of GetUrnSkeletonFromType.
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetUrnRecursive(System.Text.StringBuilder)">
            <summary>
            Computes the Urn for the object.
            </summary>
            <param name="urnbuilder"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetUrnRecursive(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.UrnIdOption)">
            <summary>
            Computes the Urn for the object, potentially including other fields in
            the definition besides the key fields.
            </summary>
            <param name="urnbuilder">holds the Urn</param>
            <param name="useIdAsKey">Us ID as key instead of the regular key
            fields. If the object does not have this property the regular key
            fields will still be used.</param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SqlSmoObject.singletonParent">
            <summary>
            Regular SMO objects access the parent class reference through parentColl (corresponding collection in parent class).
            Singleton class has no collection in parent.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AddDatabaseContext(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            method get called from the create script related method (from derived classes like Table, Index etc..)
            </summary>
            <param name="queries"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AddDatabaseContext(System.Collections.Specialized.StringCollection)">
            <summary>
            method get called from the create script related method (from derived classes like Table, Index etc..)
            </summary>
            <param name="queries"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AlterImplWorker" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AlterImpl" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Refresh">
            <summary>
             refreshes the object's properties by reading them from the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.OnPropertyMissing(System.String,System.Boolean)">
            <summary>
            Called when one of the properties is missing from the property collection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Initialize(System.Boolean)">
            <summary>
            Initializes the object, by reading its properties from the enumerator
            </summary>
            <param name="fullPropList">If false, only a specified subset of the properties
            are retrieved with this call</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetInitDataReader(System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            Retrieves a System.Data.IDataReader object that will contain the result of the query
            to obtain the object's properties.
            </summary>
            <param name="fields"></param>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetRejectFields">
            <summary>
            Returns fields we will not bring while initializing the object.
            Instance classes can customize behavior by overriding this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Microsoft#SqlServer#Management#Sdk#Sfc#ISqlSmoObjectInitialize#InitializeFromDataReader(System.Data.IDataReader)">
            <summary>
            Populates the object's property bag from the current row of the DataReader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AddObjectPropsFromDataReader(System.Data.IDataReader,System.Boolean)">
            <summary>
            Populates the object's property bag from the current row of the DataReader
            </summary>
            <param name="reader"></param>
            <param name="skipIfDirty">If true do not initialize the property if it has
            been changed by the user</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AddObjectPropsFromDataReader(System.Data.IDataReader,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Populates the object's property bag from the current row of the DataReader
            </summary>
            <param name="reader"></param>
            <param name="skipIfDirty">If true do not initialize the property if it has
            been changed by the user</param>
            <param name="startColIdx">Index of the first column</param>
            <param name="endColIdx">Index of the last column. If -1 then go to the end.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropValue(System.String)">
             <summary>
             Retrieve the property value from :
                 - The property bag directly if property is available (dirty or retrieved)
                 - A call to our OnPropertyMissing method otherwise
            
             Will throw an exception if the property value is NULL in either case.
             </summary>
             <param name="propName"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropValueOptional(System.String)">
            <summary>
            Retrieve the property value from :
                - The property bag if the state is creating or we're in Design Mode (possible NULL value)
                - A call to our OnPropertyMissing method otherwise (will throw exception if value is NULL)
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropValueOptional``1(System.String)">
            <summary>
            Retrieve the property value from :
                - The property bag if the state is creating or we're in Design Mode (possible NULL value)
                - A call to our OnPropertyMissing method otherwise (will throw exception if value is NULL)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropValueOptional``1(System.String,``0)">
            <summary>
            Retrieve the property value from :
                - The property bag if the state is creating or we're in Design Mode (will return default value if value is NULL)
                - A call to our OnPropertyMissing method otherwise (will throw exception if value is NULL)
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropValueOptionalAllowNull(System.String)">
            <summary>
            Retrieve the property value from :
                - The property bag if the state is creating or we're in Design Mode (possible NULL)
                - A call to our OnPropertyMissing method otherwise (possible NULL)
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropValueIfSupported``1(System.String,``0,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Retrieves the value of the specified property, the exact value is determined by the supportability of the source
            and target server:
               - If property is NOT supported on either source or target server(won't check target if 'sp' is NULL)
                 returns the default value
               - Otherwise returns the value of the property (default value if the actual value is NULL)
            </summary>
            <typeparam name="T">The type of the property's value.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="defaultValue">The default value if actual value is null.</param>
            <param name="sp">The scripting preferences (must be provided for target server check!)</param>
            <returns>The property or default value depending on if the property is supported.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropValueIfSupportedWithThrowOnTarget``1(System.String,``0,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Retrieves the value of the specified property, the exact value is determined by the supportability of the source
            and target server(possible to throw):
               - If property is NOT supported on source server returns the default value
               - If property is supported on source server and it's value is not the specified default value,
                 throw if NOT supported on target server(note if 'sp' is NULL this check is skipped)
               - Otherwise returns the value of the property (default value if the actual value is NULL)
            </summary>
            <typeparam name="T">The type of the property's value.</typeparam>
            <param name="propertyName">The property name.</param>
            <param name="defaultValue">The default value if actual value is null.</param>
            <param name="sp">The scripting preferences (must be provided for target server check!)</param>
            <returns>The property or default value depending on if the property is supported.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropertyOptional(System.String)">
            <summary>
            Retrieve the property from :
                - The property bag if the state is creating or we're in Design Mode (property may have NULL value)
                - A call to our OnPropertyMissing method otherwise (will throw exception if property value is NULL)
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetRealValue(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Returns the real value for the property.
            </summary>
            <param name="prop">The property object</param>
            <param name="value">Old value. If it is null the function queries the
            database for the old value.</param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SqlSmoObject.executeForScalar">
            <summary>
            Controls how CreateImpl executes a query. true means a single record is fetched after the query executes and the
            value is stored in the property ScalarResult
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SqlSmoObject.scalarResult">
            <summary>
            This is the result from a scalar query execution
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetParentObject(System.Boolean,System.Boolean)">
            <summary>
            Gets the parent object or collection of this object.
            </summary>
            <param name="throwIfParentIsCreating">If TRUE exception will be thrown if parent exists but its state is Creating</param>
            <param name="throwIfParentNotExist">If TRUE return null if a parent doesn't exist, if FALSE an exception will be thrown</param>
            <returns></returns>
            <remarks>Will throw FailedOperationException if Parent does not exist</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ExecuteNonQuery(System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
            executes sql statements
            </summary>
            <param name="queries"></param>
            <param name="executeForAlter"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ExecuteNonQuery(System.Collections.Specialized.StringCollection,System.Boolean,System.Boolean)">
            <summary>
            Executes sql statements
            </summary>
            <param name="queries"></param>
            <param name="includeDbContext">if true the statements are prefixed with
            setting the database context, if false they are not</param>
            <param name="executeForAlter">Whether this execution is for an alter.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PostCreate">
            <summary>
            this function is meant to be overriden by derived classes,
            if they have to do supplimentary actions after object creation
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PostAlter">
            <summary>
            this function is meant to be overriden by derived classes,
            if they have to do supplimentary actions after altering the object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PostDrop">
            <summary>
            this function is meant to be overriden by derived classes,
            if they have to do supplimentary actions after dropping the object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PostPropagate">
            <summary>
            this function is meant to be overriden by derived classes,
            if they have to do supplimentary actions after propagating the
            object state to subobjects
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts permissions for this object. The default implementation scripts only the
            object-level permissions if the object implements IObjectPermission
            </summary>
            <param name="query"></param>
            <param name="sp"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPermissionsFromCache(Microsoft.SqlServer.Management.Smo.PermissionWorker.PermissionEnumKind)">
            <summary>
            Returns a list of permissions that exist for the current object. If the query has been done
            before the permissions are returned from the cached UserPermissionsCollection
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetUserPermissions">
            <summary>
            Returns the object's permissions. Will be called by overrides of
            Permissions property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ClearUserPemissions">
            <summary>
            Clear the user permissions.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AddScriptPermissions(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.PermissionWorker.PermissionEnumKind,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts the permission DDL statements for this object.
            </summary>
            <param name="sc"></param>
            <param name="kind"></param>
            <param name="ver"></param>
            <param name="sp"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ScriptPermissionInfo(Microsoft.SqlServer.Management.Smo.PermissionInfo,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns permission script corresponding to the permission info passed as parameter.
            </summary>
            <param name="obj"></param>
            <param name="pi"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPermTargetObject">
            <summary>
            Overrides will return a parent object instead of the this pointer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.DropImpl(System.Boolean)">
            <summary>
             drops the object
            </summary>
             <param name="isDropIfExists">If true, function will not do anything if object is not in valid state
             for dropping.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.DropImplWorker(Microsoft.SqlServer.Management.Sdk.Sfc.Urn@,System.Boolean)">
            <summary>
             drops the object
            </summary>
             <param name="urn"></param>
             <param name="isDropIfExists">If true, drop will be called with existence check.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetDbCulture">
            <summary>
            Returns the CultureInfo object to be used when formatting culture
            sensitive strings related to this object (e.g. DateTime etc.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.SetAccessToken(Microsoft.SqlServer.Management.Common.IRenewableToken)">
            <summary>
            Set the accessToken for connection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsSupportedOnSqlAzure(System.Type)">
            <summary>
            Returns whether a smo object type is supported on Microsoft Azure SQL Database.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>This is for internal SQL usage and may not work correctly if used otherwise</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.SqlString(System.String)">
            <summary>
            Escapes all single-quotes in a string
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.MakeSqlString(System.String)">
            <summary>
            Returns a fully-escaped SQL string wrapped within the SQL string single-quotes
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.QuoteString(System.String,System.Char,System.Char)">
            <summary>
            Return name enclosing with delimiters.
            </summary>
            <param name="name">name to enclose</param>
            <param name="cStart">starting delimiter character for enclosing</param>
            <param name="cEnd">ending delimiter character for enclosing</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.MakeSqlStringForInsert(System.String)">
            <summary>
            Handles additional processing required for scriping insert startements for data
            </summary>
            <param name="s"> the column value to be processed</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Touch">
            <summary>
            Mark the object "touched" for unconditional scripting of Alter.
            </summary>
            <remarks>
            Properties are not marked dirty, so properties beyond the text definition
            will not be scripted for Alter.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.TouchImpl">
            <summary>
            Virtual method to allow derived classes to do additional
            work when touched.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropagateInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction)">
            <summary>
            to be overridden by objects that have to propagate actions to child
            collections
            </summary>
            <param name="action"></param>
            <returns>array of actions that are propagated</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetPropagateInfoForDiscovery(Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction)">
            <summary>
            to be overridden by objects that have to propagate actions to child
            collections
            </summary>
            <param name="action"></param>
            <returns>array of actions that are propagated</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateScript(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction)">
            <summary>
            Control loop for propagation of actions, works recursively
            </summary>
            <param name="query"></param>
            <param name="so"></param>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PreInitChildLevel">
            <summary>
            Classes that need to initialize properties needed during the prefetch
            operation should override this function. Because we are using System.Data.IDataReader
            and we don't have MARS this means we will throw an error if a property is
            faulted and that generates a query to the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.InitQueryUrns(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[],System.String[])">
            <summary>
            Init all the objects in the query so subsequent GetSmoObject calls are fast and client-side.
            Also return the list of Urns from the query, in order, so an iterator can be layered over all this.
            Code lifted from InitChildLevel.
            </summary>
            <param name="queryUrn"></param>
            <param name="fields"></param>
            <param name="orderByFields"></param>
            <returns>The list of string Urn paths that matched the query.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.InitQueryUrns(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[],System.String[],Microsoft.SqlServer.Management.Smo.ScriptingPreferences,Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Init all the objects in the query so subsequent GetSmoObject calls are fast and client-side.
            Also return the list of Urns from the query, in order, so an iterator can be layered over all this.
            Code lifted from InitChildLevel.
            We pass the edition as a parameter because prefetch calls this method on a Server object and the edition is tied to the database.
            </summary>
            <param name="queryUrn"></param>
            <param name="fields"></param>
            <param name="orderByFields"></param>
            <param name="edition">Engine edition of the database being scripted</param>
            <returns>The list of string Urn paths that matched the query.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsSupportedProperty(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Validates whether the specified property is supported both in current server and target
            scripting environment.
            </summary>
            <param name="propertyName">Property to check</param>
            <param name="sp">Scripting preference, which specify parameters to use for scripting</param>
            <returns>True if both supported, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsSupportedProperty(System.String)">
            <summary>
            Validate whether the specified property is supported in current server environment
            </summary>
            <param name="propertyName">Property to check</param>
            <returns>True if supported, false otherwise</returns>
            <remarks>
            This is for internal SQL usage and may not work correctly if used otherwise
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfPropertyNotSupported(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Throws an exception if the property is not supported by current server environment. If scripting
            preferences is not null, also throws an exception if the property is not supported by the target
            scripting environment.
            </summary>
            <param name="propertyName">Property to check</param>
            <param name="sp">Scripting preference, which specify parameters to use for scripting</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.InitChildLevel(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            This function that receives a generic urn initializes for scripting all the objects of a
            certain type that are returned by a query with the urn, e.g. for an urn that ends in
            /Table/Column the function would initialize all the columns from all the tables in that
            database. The enumerator currently does not support this feature
            across databases, but we do not need this for transfer anyway
            The function can also initialize a child collection via the regular initialization mechanism
            </summary>
            <param name="levelFilter"></param>
            <param name="so"></param>
            <param name="forScripting"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.InitChildLevel(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This function that receives a generic urn initializes for scripting all the objects of a
            certain type that are returned by a query with the urn, e.g. for an urn that ends in
            /Table/Column the function would initialize all the columns from all the tables in that
            database. The enumerator currently does not support this feature
            across databases, but we do not need this for transfer anyway
            The function can also initialize a child collection via the regular initialization mechanism.
            It loads the fields the default for each object and includes the fields passed as extraFields if there are not default fields
            </summary>
            <param name="levelFilter"></param>
            <param name="so"></param>
            <param name="forScripting"></param>
            <param name="extraFields"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.CompareAttributeToObject(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Sdk.Sfc.FilterNodeOperator)">
             <summary>
            
             </summary>
             <param name="current"></param>
             <param name="oper"></param>
             <returns>true if the operator fits the object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetParentStringComparer(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Returns Parent's String Comparer
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.InitObjectsFromEnumResultsRec(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression,System.Int32,System.Data.IDataReader,System.Int32,System.Object[],System.Boolean,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            the general philosophy of this function is like this:
            we are doing a query that returns a potentially large table, and we would
            like to minimize the lookups in the collections; we have arranged
            for the results to be ordered in the same order as our collections,
            so dumping the results into the objects' properties becomes something
            like a merge operation between two data sets that have the same ordering
            </summary>
            <param name="currentSmoObject">the current object</param>
            <param name="levelFilter">the Urn as a parsed XPath</param>
            <param name="filterIdx">the current level in the Urn</param>
            <param name="reader">the query results that we are
            transferring to the Smo objects in the tree</param>
            <param name="columnIdx">column index in the result table</param>
            <param name="rowIdx">row index in the result table</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetExistingOrCreateNewObject(System.Data.IDataReader,System.Int32,System.Type,Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,System.Boolean)">
            <summary>
            Gets existing object from child collection if possible
            otherwise create new object from the current row and add it to the child collection
            </summary>
            <param name="reader"></param>
            <param name="columnIdx"></param>
            <param name="childType"></param>
            <param name="childColl"></param>
            <param name="isOrderedByID"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AdvanceInitRec(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression,System.Int32,System.Data.IDataReader,System.Int32,System.Int32,System.Object[],System.Boolean,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            move one row down if we are on the last level of the Urn
            otherwise it move one level to the right into the Urn
            </summary>
            <param name="currentSmoObject"></param>
            <param name="levelFilter"></param>
            <param name="filterIdx"></param>
            <param name="reader"></param>
            <param name="columnIdx"></param>
            <param name="columnOffset"></param>
            <param name="parentRow"></param>
            <param name="forScripting"></param>
            <returns>true if there are still records to read </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetChildSingleton(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Sdk.Sfc.XPathExpression,System.Int32,Microsoft.SqlServer.Management.Common.ServerVersion)">
             <summary>
            
             </summary>
             <param name="parent"></param>
             <param name="filterUrn"></param>
             <param name="categorystr"></param>
             <param name="srvVer"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.CompareRows(System.Data.IDataReader,System.Object[],System.Int32,System.Int32)">
            <summary>
            Returns true if the current row of the reader and the parent row are equal
            up to the specified column
            </summary>
            <param name="reader"></param>
            <param name="parentRow"></param>
            <param name="columnStartIdx"></param>
            <param name="columnStopIdx"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfAboveVersion80(System.String)">
            <summary>
            Throws an exception if the ServerVersion major version for this object is above 8.0 (SQL 2000)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion80(System.String)">
            <summary>
            Throws an exception if the ServerVersion major version for this object is below 8.0 (SQL 2000)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfSourceOrDestBelowVersion80(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Throws an UnsupportedVersionException if either the source or destination server is below 8.0 (SQL 2000)
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion90(System.String)">
            <summary>
            Throws an exception if the ServerVersion major version for this object is below 9.0 (SQL 2005)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfSourceOrDestBelowVersion90(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Throws an UnsupportedVersionException if either the source or destination server is below 9.0 (SQL 2005)
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfAboveVersion100(System.String)">
            <summary>
            Throws an exception if the ServerVersion major version for this object is above 10.0 (SQL 2008)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion100(System.String)">
            <summary>
            Throws an exception if the ServerVersion major version for this object is below 10.0 (SQL 2008)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfSourceOrDestBelowVersion100(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Throws an UnsupportedVersionException if either the source or destination server is below 10.0 (SQL 2008)
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion110(System.String)">
            <summary>
            Throws an UnsupportedVersionException if either the source or destination server is below 11.0 (SQL 2012)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion110Prop(System.String)">
            <summary>
            Throws an exception with text saying the specified property is not supported
            if the ServerVersion major version for this object is below 11.0 (SQL 2012)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfSourceOrDestBelowVersion110(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Throws an UnsupportedVersionException if either the source or destination server is below 11.0 (SQL 2012)
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion120(System.String)">
            <summary>
            Throws an exception if the ServerVersion major version for this object is below 12.0 (SQL 2014)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion120Prop(System.String)">
            <summary>
            Throws an exception with text saying the specified property is not supported
            if the ServerVersion major version for this object is below 12.0 (SQL 2014)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfSourceOrDestBelowVersion120(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Throws an UnsupportedVersionException if either the source or destination server is below 12.0 (SQL 2014)
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion130(System.String)">
            <summary>
            Throws an exception if the ServerVersion major version for this object is below 13.0 (SQL 2016)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion130Prop(System.String)">
            <summary>
            Throws an exception with text saying the specified property is not supported
            if the ServerVersion major version for this object is below 13.0 (SQL 2016)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion140(System.String)">
            <summary>
            Throws an exception if the ServerVersion major version for this object is below 14.0 (SQL 2017)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion140Prop(System.String)">
            <summary>
            Throws an exception with text saying the specified property is not supported
            if the ServerVersion major version for this object is below 14.0 (SQL 2017)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfSourceOrDestBelowVersion130(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Throws an UnsupportedVersionException if either the source or destination server is below 13.0 (SQL 2016)
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfExpressSku(System.String)">
            <summary>
            Throws an exception if the SKU of the server is Express
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCloudProp(System.String)">
            <summary>
            Throws an exception saying that the specified property is unsupported
            if the DatabaseEngineType of this object is SqlAzureDatabase
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCloud(System.String)">
            <summary>
            Throws an exception if the DatabaseEngineType of this object is SqlAzureDatabase
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCloudAndVersionBelow12(System.String)">
            <summary>
            Checks and throws an UnsupportedFeatureException if the DatabaseEngineType is SqlAzureDatabase and
            the major version is below 12 (Sterling).
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsExpressSku">
            <summary>
            Returns whether the server containing this object is an Express SKU
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCloud(Microsoft.SqlServer.Management.Common.DatabaseEngineType)">
            <summary>
            Checks if the target engine type is Cloud, and if so
            throw an exception indicating that this is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCloud(Microsoft.SqlServer.Management.Common.DatabaseEngineType,System.String)">
            <summary>
            Checks if the target engine type is cloud, and if so
            throws an exception based the exceptionMessage
            </summary>
            <param name="targetEngineType"></param>
            <param name="exceptionMessage"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfNotCloud(Microsoft.SqlServer.Management.Common.DatabaseEngineType,System.String)">
            <summary>
            Checks if the target engine type is not cloud, and if so
            throws an exception based the exceptionMessage
            </summary>
            <param name="targetEngineType">The target database engine type.</param>
            <param name="exceptionMessage">Message to include in the exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfNotSqlDw(Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.String)">
            <summary>
            Checks if the target engine edition is not SQL DW, and if so
            throws an exception based the exceptionMessage
            </summary>
            <param name="targetEngineType">The target database engine type.</param>
            <param name="exceptionMessage">Message to include in the exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCloudAndBelowVersion120(Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target engine type is cloud and target version is under 12.0 and if so
            throw an exception indicating that this is not supported
            </summary>
            <param name="targetDatabaseEngineType"></param>
            <param name="targetVersion"></param>
            <param name="exceptionMessage"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion90(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target version is smaller than 9.0, and if so
            throw an exception indicating that this is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion100(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target version is smaller than 10.0, and if so
            throw an exception indicating that this is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion105(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target version is smaller than 10.5, and if so
            throw an exception indicating that this is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion110(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target version is smaller than 11.0, and if so
            throw an exception indicating that this is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion120(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target version is smaller than 12.0, and if so
            throw an exception indicating that this is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion130(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target version is smaller than 13.0, and if so
            throw an exception indicating that this is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion80(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target version is smaller than 8.0, and if so
            throw an exception indicating that this is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersionLimit(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the targetVersion is below the specified upperLimit version and throws an <see cref="T:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException"/> if it is.
            </summary>
            <param name="targetVersion"></param>
            <param name="upperLimit"></param>
            <param name="exceptionText"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetCompatibilityLevel">
            <summary>
            Returns the compatibility level of the object. If the object is
            has a database context then we return the compatibility level
            of the database, otherwise the translated server version.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetCompatibilityLevel(Microsoft.SqlServer.Management.Common.ServerVersion)">
             <summary>
            
             </summary>
             <param name="ver"></param>
             <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCompatibilityLevelBelow130">
            <summary>
            Throws an exception if the CompatabilityLevel for this object is below 130
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCompatibilityLevelBelow120">
            <summary>
            Throws an exception if the CompatabilityLevel for this object is below 120
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCompatibilityLevelBelow100">
            <summary>
            Throws an exception if the CompatabilityLevel for this object is below 100
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCompatibilityLevelBelow90">
            <summary>
            Throws an exception if the CompatabilityLevel for this object is below 90
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCompatibilityLevelBelow80">
            <summary>
            Throws an exception if the CompatabilityLevel for this object is below 80
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCompatibilityLevelBelowLimit(Microsoft.SqlServer.Management.Smo.CompatibilityLevel,Microsoft.SqlServer.Management.Smo.CompatibilityLevel)">
            <summary>
            Checks if the targetCompatLevel is below the specified upperLimit and throws an <see cref="T:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException"/> if it is
            </summary>
            <param name="targetCompatLevel"></param>
            <param name="upperLimit"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfCreateOrAlterUnsupported(Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal,System.String)">
            <summary>
            Checks if the target version is smaller than 13.0, and if so
            throw an exception indicating that create or alter is not supported.
            </summary>
            <param name="targetVersion"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsCloudAtSrcOrDest(Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineType)">
            <summary>
               Check if at least one of Source or Destination Engine types is Cloud DB
            </summary>
            <param name="srcEngineType"></param>
            <param name="destEngineType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.GetSqlServerVersionName">
            <summary>
            Gets the sqlserver public name for the current connection, e.g: will transfer "SQLTOOLS2008-2" to "SQL Server 2008".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.SqlDateString(System.DateTime)">
            <summary>
            Converts a DateTime to a string in a format that is
            unambiguous and can be converted into a sql datetime in
            T-SQL code regardless of the server's language setting.
            </summary>
            <param name="date"></param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ScriptImpl(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns a StringCollection object with the script for the object. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
            <param name="sp"></param>
            <returns>StringCollection object with the script for the object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ScriptImpl(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Returns a StringCollection object with the script for the object. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
            <param name="so"></param>
            <returns>StringCollection object with the script for the object</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.EnumScriptImpl(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ScriptImplWorker(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns a StringCollection object with the script for the objects. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
            <returns>StringCollection object with the script for objects</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.EnumScriptImplWorker(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ThrowIfBelowVersion80SP3">
            <summary>
            Throws an exception if the ServerVersion for this object is below
            8.760 (8.0 SP3)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.AddNewLineFormat(System.Text.StringBuilder)">
            <summary>
            adds
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsSystemObjectInternal">
            <summary>
            Determines if current object is a system object by checking property bag
            for IsSystemObject property. Purely for internal use, during SMO discovery
            for serialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Discover">
            <summary>
            Best Effort Discovery mechanism : This method
            reflects upon metadata and gets all available objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Microsoft#SqlServer#Management#Sdk#Sfc#IAlienObject#SetPropertyValue(System.String,System.Type,System.Object)">
            <summary>
            Sets the value of given property, if it is writable. If property is not in property bag, reflection is used.
            Throws exception if the property is not found.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Microsoft#SqlServer#Management#Sdk#Sfc#IAlienObject#GetPropertyValue(System.String,System.Type)">
            <summary>
            Retrieves value for a given property. Throws if property is not found.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsSpeciallyLoaded(System.Type,System.String)">
            <summary>
            In Smo, there are special properties exist in PropertiesMetadata, but not
            always loaded (returns null) into the Properties bag. It must be caused
            to load by using reflection.
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Microsoft#SqlServer#Management#Sdk#Sfc#IAlienObject#GetPropertyType(System.String)">
            <summary>
            Discovers type of property.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Microsoft#SqlServer#Management#Sdk#Sfc#IAlienObject#SetObjectState(Microsoft.SqlServer.Management.Sdk.Sfc.SfcObjectState)">
            <summary>
            Sets state of this object based on provided SfcObjectState.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.DoCustomAction(System.String,System.String)">
            <summary>
            This implements the common pattern for all the custom actions of an object
            </summary>
            <param name="script">The custom script for the action</param>
            <param name="toplevelExceptionMessage">The top level message to display in case of an exception</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ExecuteWithModes(Microsoft.SqlServer.Management.Common.SqlExecutionModes,System.Action)">
             <summary>
             Executes the given action under the given execution modes.
            
             Resets the original modes after the action completes or fails.
             </summary>
             <param name="modes">The modes to run the action under.</param>
             <param name="action">The action to run.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ParentColl">
            <summary>
            Pointer to the collection that holds the object, if any
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Urn">
            <summary>
            Returns the Urn of the object, computed on the fly
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.Permissions">
            <summary>
            The collection of UserPermission objects
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.DatabaseEngineType">
            <summary>
            Returns the DatabaseEngineType of the SMO object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.DatabaseEngineEdition">
            <summary>
            Returns the DatabaseEngineEdition of the SMO object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsCloudSupported">
            <summary>
            Will return if Cloud is not supported
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsTouched">
            <summary>
            Whether the object has been touched for unconditional scripting of Alter
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.ExecutionManager" -->
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.IsDesignMode">
            <summary>
            Verifies if the current object is in the design mode
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlSmoObject.SupportsDesignMode">
            <summary>
            Checks if the current object can be used in design mode
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateInfo">
            <summary>
            holds information that specifies to what child objects is going
            to be propagated  a create, alter or drop action
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateInfo.#ctor(Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="obj">The child object to propagate to</param>
            <param name="bWithScript">true if the child object should be scripted
                                    false if only it's state should be updated</param>
            <param name="urnTypeKey">Propagation ocurs only if the specified type is not in filter</param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateInfo.urnTypeKey">
            <summary>
            if any of these is not specified, we do not propagate the action
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction">
            <summary>
            represents the action on the parent object that need
            to be propagated to the child collections
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NamedSmoObject.RenameImpl(System.String)">
            <summary>
             change object name
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NamedSmoObject.ExecuteRenameQuery(System.String)">
            <summary>
            Creates the Rename query for a SqlSmoObject and Executes it on the Server.
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NamedSmoObject.FormatFullNameForScripting(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            format full object name for scripting
            </summary>
            <param name="sp"></param>
            <param name="nameIsIndentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NamedSmoObject.GetName(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns the name that will be used for scripting, in case we allow
            users to script the object with a different name.
            </summary>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NamedSmoObject.ScriptChangeOwner(System.Collections.Specialized.StringCollection,System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generate the script statements to change the owner of this object to the specified
            owner name.
            </summary>
            <param name="queries">Query collection to add the statements to</param>
            <param name="newOwner">The name of the new owner</param>
            <param name="sp">The scripting preferences</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NamedSmoObject.ScriptOwnerForShiloh(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.String)">
            <summary>
            Scripting the owner for shiloh (2005) which doesn't support the ALTER AUTHORIZATION statement
            </summary>
            <param name="sb">Builder to add the statements to</param>
            <param name="newOwner">The name of the new owner</param>
            <param name="sp">The scripting preferences</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NamedSmoObject.PermissionPrefix">
            <summary>
            This is the prefix that is added to the permission DDL for the object
            The list is extracted from file 'secmgr.cpp' in the array:
            static const SECPermMappings::SECClassNameStrings x_sps_Class[] =
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.ResetOccurrenceCount">
            <summary>
            The ResetOccurrenceCount method reinitializes history data for a 
            SQLServerAgent alert.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.AddNotification(System.String,Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods)">
            <summary>
            The AddNotification method associates operators with alerts. 
            Operators designated receive notification messages when an 
            event raising the alert occurs.
            </summary>
            <param name="operatorName"></param>
            <param name="notifymethod"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.RemoveNotification(System.String)">
            <summary>
            The RemoveNotification method drops all SQLServerAgent alert 
            notification assignments for an operator.
            </summary>
            <param name="operatorName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.UpdateNotification(System.String,Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods)">
            <summary>
            The UpdateNotification method configures SQL Server Agent operator 
            notification for alerts raised.
            </summary>
            <param name="operatorName"></param>
            <param name="notifymethod"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.EnumNotifications">
            <summary>
            EnumNotifications method returns a DataTable object that enumerates 
            notification operators for a given alert.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.EnumNotifications(Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods)">
            <summary>
            EnumNotifications method returns a DataTable object that enumerates 
            notification operators for a given alert.
            </summary>
            <param name="notifyMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.EnumNotifications(System.String)">
            <summary>
            EnumNotifications method returns a DataTable object that enumerates 
            notification operators for a given alert.
            </summary>
            <param name="operatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.EnumNotifications(Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods,System.String)">
            <summary>
            EnumNotifications method returns a DataTable object that enumerates 
            notification operators for a given alert.
            </summary>
            <param name="notifyMethod"></param>
            <param name="operatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Alert.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider">
            <summary>
            Extends PropertyMetadataProvider with version support
            We consider the organization of properties as follows:
             from indexes 0...n1 supported on 7/8/9
             from indexes n1...n2 supported on 8/9
             from indexes n2...n3 supported on 9
            This implies that there are no properties that are supported on a down-level and not on a up-level server.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider">
            <summary>
            Stores StaticMetadata and provides accessor functions
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.PropertyNameToIDLookup(System.String)">
            <summary>
            Translates a property name to the index in the corresponding metadata array
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.GetStaticMetadata(System.Int32)">
            <summary>
            Gets the static metadata corresponding to the given index
            </summary>
            <param name="id">The index to re</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.GetStaticMetadataArray(Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Gets the corresponding static metadata array for a given database Engine Type
            </summary>
            <param name="databaseEngineType"></param>
            <param name="databaseEngineEdition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.GetVersionArray(Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            This method returns the version count array for a given database engine type
            </summary>
            <param name="databaseEngineType"></param>
            <param name="databaseEngineEdition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.PropertyNameToIDLookupWithException(System.String,Microsoft.SqlServer.Management.Smo.PropertyAccessPurpose)">
            <summary>
            Translate from a property name to an index. Throws an exception if the name is unknown.
            </summary>
            <param name="propertyName"></param>
            <param name="pap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.PropertyNameToIDLookupWithException(System.String)">
            <summary>
            Translate from a property name to an index. Throws an exception if the name is unknown.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.CheckPropertyValid(System.Type,System.String,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            This method is used to check if the given property is valid in the given version and given database engine type
             This is mainly used to verify if a property is valid in the target server scripting options.
            </summary>
            <param name="type"></param>
            <param name="propertyName"></param>
            <param name="version"></param>
            <param name="databaseEngineType"></param>
            <param name="databaseEngineEdition"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.Count">
            <summary>
            The number of properties this provider contains
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.StandaloneVersionIndex">
            <summary>
            Enum used to identify the index in the version array a particular version of
            the Standalone engine is at
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyMetadataProvider.CloudVersionIndex">
            <summary>
            Enum used to identify the index in the version array a particular version of
            the Azure engine is at
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.currentVersionIndex">
            <summary>
            The index of the current version
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.#ctor(Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Provider initialized with a specific version, engine type and engine edition
            </summary>
            <param name="sv"></param>
            <param name="databaseEngineType"></param>
            <param name="databaseEngineEdition"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.PropertyNameToIDLookupWithException(System.String,Microsoft.SqlServer.Management.Smo.PropertyAccessPurpose)">
            <summary>
            Translate from a property name to an index. Throws an exception if the name is unknown.
            Takes into consideration version information, throwing an exception if the property isn't
            defined for this version.
            </summary>
            <param name="propertyName"></param>
            <param name="pap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.GetExceptionText(System.String,Microsoft.SqlServer.Management.Smo.PropertyAccessPurpose)">
            <summary>
            The exception text should be:
                Cannot read property {0}.IsSparse. This property is not available on {1}.
                Cannot write property {0}.IsSparse. This property is not available on {1}.
                {0} = class (as there are 2 classes that have IsSparse)
                {1} = SQL Server 7.0 or SQL Server 2000 or SQL Server 2005
                Of course, if a property is Unknown (through indexer/getter) then it still be the same old 'Unknown' error message.
            </summary>
            <param name="propertyName"></param>
            <param name="pap"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.GetServerNameFromVersionIndex(System.Int32)">
            <summary>
            Gets the name of the server associated with a particular version index. This is based off of the
            current DatabaseEngineType.
            </summary>
            <param name="index"></param>
            <returns>The server version name, or an empty string if an invalid index is specified</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.GetSupportedVersions(System.Int32)" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.GetPropertyInfo(System.Int32)">
            <summary>
            Get a SqlPropertyInfo for the property with the given index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.GetCountForVersions(Microsoft.SqlServer.Management.Smo.SqlServerVersions)">
            <summary>
            Get the count of properties supported for the given versions
            </summary>
            <param name="m_versions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.EnumPropertyInfo(Microsoft.SqlServer.Management.Smo.SqlServerVersions)">
            <summary>
            Get SqlPropertyInfo for every property supported on the given versions
            </summary>
            <param name="versions"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlPropertyMetadataProvider.VersionCount">
            <summary>
            Get the supported versions as ordinals
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.AlertCategory">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/AlertCategory
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.CategoryBase.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.CategoryBase.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.CategoryBase.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.AlertSystem">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/AlertSystem
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ApplicationRole">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ApplicationRole
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.ShouldScriptForNonCreate(Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.ScriptHeaderType)">
            <summary>
            returns whether it should script for non-create cases including Alter and CreateOrAlter
            </summary>
            <param name="scriptHeaderType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.ModifyTextForAlter(System.String,System.Int32)">
            <summary>
            replace CREATE with ALTER in a given text at a given position
            </summary>
            <param name="text"></param>
            <param name="indexCreate"></param>
            <returns>the modified text</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.ModifyTextForCreateOrAlter(System.String,System.Int32)">
            <summary>
            replace CREATE with CREATE OR ALTER in a given text at a given position
            </summary>
            <param name="text"></param>
            <param name="indexCreate"></param>
            <returns>the modified text</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.CheckObjectDirty">
             <summary>
            If there are some properties which are respected in special cases then use this function.
            currently applicable for DatabaseDdltriggers
             </summary>
             <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.CheckObjectSupportability(Microsoft.SqlServer.Management.Smo.DdlTextParserHeaderInfo,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Checks SMO object is supported by target scripting environment using its scripted T-SQL header. Note: very
            few edge cases were handled here, normally this suppotability check should be done in object itself's class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.CheckNameInTextCorrectness(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             checks that the name as apears in text maches the name as specified in metadata
             all name/schemas are expected in brakets
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.CheckTextCorrectness(System.String,System.Boolean,System.Boolean,System.String[],Microsoft.SqlServer.Management.Smo.DdlTextParserHeaderInfo@)">
            <summary>
            checks text syntax, that it manipulates the right type of object ( PROC, TRIGGER, etc )
            </summary>
            <param name="ddlText"></param>
            <param name="enforceCreate"></param>
            <param name="checkName"></param>
            <param name="expectedObjectTypes"></param>
            <param name="headerInfo"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.CheckTextCorrectness(System.String,System.Boolean,System.Boolean,System.Boolean,System.String[],Microsoft.SqlServer.Management.Smo.DdlTextParserHeaderInfo@)">
            <summary>
            checks text syntax, that it manipulates the right type of object ( PROC, TRIGGER, etc )
            </summary>
            <param name="ddlText"></param>
            <param name="enforceCreate"></param>
            <param name="checkName"></param>
            <param name="isOrAlterSupported"></param>
            <param name="expectedObjectTypes"></param>
            <param name="headerInfo"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.CheckAndManipulateText(System.String,System.String[],Microsoft.SqlServer.Management.Smo.ScriptingPreferences,Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.ScriptHeaderType)">
            <summary>
            put in one place the basic text manipulations that we do
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.CheckAndManipulateName(System.String@,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,Microsoft.SqlServer.Management.Smo.DdlTextParserHeaderInfo@,System.Boolean)">
            <summary>
            Check the script name with the Object's name and replace if necessary. ForceScripting name would force the name
             change even when the names are same. (This might lose original formatting but introduce standard naming convention
             like bracketting of identifiers.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.GetTextProperty(System.String)">
            <summary>
            get the text of the object, if not available, throw apropiate exception
            based on the State of the object
            </summary>
            <param name="requestingProperty">name of the property that should appear in the exception as failed to be
            retrived, useful when we have properties derived from Text</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.GetTextProperty(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            overloaded to allow for scriping options to be passed in
            </summary>
            <param name="requestingProperty"></param>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.GetExecutionContextString(Microsoft.SqlServer.Management.Smo.ServerDdlTriggerExecutionContext)">
            <summary>
            Returns a string representation of the ServerDdlTriggerExecutionContext   enumeration
            </summary>
            <param name="ec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.GetExecutionContextString(Microsoft.SqlServer.Management.Smo.DatabaseDdlTriggerExecutionContext)">
            <summary>
            Returns a string representation of the DatabaseDdlTriggerExecutionContext  enumeration
            </summary>
            <param name="ec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.GetExecutionContextString(Microsoft.SqlServer.Management.Smo.ExecutionContext)">
            <summary>
            Returns a string representation of the ExecutionContext enumeration
            </summary>
            <param name="ec"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.GetTextProperty(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            get the text of the object, if not available, throw apropiate exception
            based on the State of the object
            </summary>
            <param name="requestingProperty">name of the property that should appear in the exception as failed to be
            retrived, useful when we have properties derived from Text</param>
            <param name="bThrowIfCreating">if true throw also if the state of the object is Creating</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Deny(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[])">
            <summary>
            The Deny method negates granted user permission for one or more users or roles.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Deny(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String)">
            <summary>
            The Deny method negates granted user permission for one or more users or roles.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Deny(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.Boolean)">
            <summary>
            The Deny method negates granted user permission for one or more users or roles.
            Cascade specifies that permissions are denied from granteeNames as well as any
            other security accounts granted permissions by granteeNames. Use Cascade when
            denying a grantable permission.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="cascade"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Deny(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.Boolean)">
            <summary>
            The Deny method negates granted user permission for one or more users or roles.
            Cascade specifies that permissions are denied from granteeName as well as any
            other security accounts granted permissions by granteeName. Use Cascade when
            denying a grantable permission.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="cascade"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[])">
            <summary>
            The Grant method assigns permissions to one or more users or roles.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String)">
            <summary>
            The Grant method assigns permissions to one or more users or roles.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.Boolean)">
            <summary>
            The Grant method assigns permissions to one or more users or roles.
            When grantGrant is true, the grantee(s) specified are granted the ability
            to execute the GRANT statement referencing the object.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="grantGrant"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.Boolean)">
            <summary>
            The Grant method assigns permissions to one or more users or roles.
            When grantGrant is true, the grantee(s) specified are granted the ability
            to execute the GRANT statement referencing the object.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="grantGrant"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.Boolean,System.String)">
            <summary>
            The Grant method assigns permissions to one or more users or roles.
            When grantGrant is true, the grantee(s) specified are granted the ability
            to execute the GRANT statement referencing the object.
            Use the asRole argument to specify the role under which permission to
            execute the grant.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="grantGrant"></param>
            <param name="asRole"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.Boolean,System.String)">
            <summary>
            The Grant method assigns permissions to one or more users or roles.
            When grantGrant is true, the grantee(s) specified are granted the ability
            to execute the GRANT statement referencing the object.
            Use the asRole argument to specify the role under which permission to
            execute the grant.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="grantGrant"></param>
            <param name="asRole"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[])">
            <summary>
            Removes a previously granted or denied permission for the specified granteeNames.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String)">
            <summary>
            Removes a previously granted or denied permission for the specified granteeName.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Removes a previously granted or denied permission for the specified granteeNames.
            When revokeGrant is true, the ability to extend permissions is revoked.
            Cascade specifies that permissions are removed from granteeNames as well as
            any other security accounts granted permissions by granteeNames.
            Use Cascade when revoking a grantable permission.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="revokeGrant"></param>
            <param name="cascade"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Removes a previously granted or denied permission for the specified granteeName.
            When revokeGrant is true, the ability to extend permissions is revoked.
            Cascade specifies that permissions are removed from granteeName as well as
            any other security accounts granted permissions by granteeName. Use Cascade when
            revoking a grantable permission. Use the AsRole argument to specify the role under
            which permission to execute the revoke.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="revokeGrant"></param>
            <param name="cascade"></param>
            <param name="asRole"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.EnumObjectPermissions">
            <summary>
            Returns an array of Permission objects identifying all explicitly granted
            object access permissions.
            </summary>
            <returns>ObjectPermissionInfo[]</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.EnumObjectPermissions(System.String)">
            <summary>
            Returns an array of Permission objects identifying explicitly granted object
            access permissions for the grantee specified with the granteeName parameter.
            </summary>
            <param name="granteeName"></param>
            <returns>ObjectPermissionInfo[]</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.EnumObjectPermissions(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet)">
            <summary>
            Returns an array of Permission objects identifying explicitly granted object
            access permissions. The permissions parameter specifies the object access
            permissions enumerated for the referenced object.
            </summary>
            <param name="permissions"></param>
            <returns>ObjectPermissionInfo[]</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IObjectPermission.EnumObjectPermissions(System.String,Microsoft.SqlServer.Management.Smo.ObjectPermissionSet)">
            <summary>
            Returns an array of Permission objects identifying explicitly granted object
            access permissions for the grantee specified with the granteeName parameter,
            restricted to the object access permissions specified with the privilegeTypes
            parameter.
            </summary>
            <param name="granteeName"></param>
            <param name="permissions"></param>
            <returns>ObjectPermissionInfo[]</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ApplicationRole.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts permissions for this object. returns without scripting anything if source version is less
            than 9 since permissions on AppRoles were not supported in 8.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ApplicationRole.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ApplicationRole.Create(System.String)">
            <summary>
            Creates the object on the server.
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ApplicationRole.Create(System.Security.SecureString)">
            <summary>
            Creates the object on the server.
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ApplicationRole.Rename(System.String)">
            <summary>
            Renames the ApplicationRole.
            </summary>
            <param name="newname">new name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ApplicationRole.ChangePassword(System.String)">
            <summary>
            Changes the password for the ApplicationRole.
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ApplicationRole.ChangePassword(System.Security.SecureString)">
            <summary>
            Changes the password for the ApplicationRole.
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ApplicationRole.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ApplicationRole.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AsymmetricKey">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/AsymmetricKey
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.Create(Microsoft.SqlServer.Management.Smo.AsymmetricKeyEncryptionAlgorithm)">
            <summary>
             Creates an asymmetric key based on supplied encryption algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.Create(Microsoft.SqlServer.Management.Smo.AsymmetricKeyEncryptionAlgorithm,System.String)">
            <summary>
             Creates an asymmetric key based on supplied encryption algorithm. The password specifies the password the key is encrypted with.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.Create(System.String,Microsoft.SqlServer.Management.Smo.AsymmetricKeySourceType)">
            <summary>
             Loads the key from the source specified.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.Create(System.String,Microsoft.SqlServer.Management.Smo.AsymmetricKeySourceType,System.String)">
            <summary>
             Loads the key from the source specified. The password specifies the password the key is encrypted with. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.SetProperties">
            <summary>
            For design mode setting read only properties
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.SetEncryptionAlgorithm">
            <summary>
            For design mode setting encryption algorithm which is a read only property
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.Drop">
            <summary>
             Drops the object and removes it from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.AddPrivateKey(System.String)">
            <summary>
            Add private key using a password.
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.RemovePrivateKey">
            <summary>
             Removes the private key from the asymmetric key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.Alter">
            <summary>
             Persist all changes made in this object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.ChangePrivateKeyPassword(System.String,System.String)">
            <summary>
             Changes the password that is used to secure the private key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
             internal constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.GetNonAlterableProperties">
            <summary>
            Gets the non alterable properties for Asymmetric Keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.CheckNullArgument(System.Object,System.String)">
            <summary>
            	ArgumentNullException is the argument is null
             should be inlined
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             build the alter script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             build the drop script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AsymmetricKey.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             build the create script
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AsymmetricKey.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AsymmetricKey.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AsymmetricKey.UrnSuffix">
            <summary>
             returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Audit">
            <summary>
            Instance class encapsulating : Server[@Name='']/Audit
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.Create">
            <summary>
            Create an Audit
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.Alter">
            <summary>
            Alter an existing Audit
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.Drop">
            <summary>
            Drop an existing Audit with force drop Audit Specifications
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.Rename(System.String)">
            <summary>
            Rename an existing Audit
            </summary>
            <param name="newname"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.Script">
            <summary>
            Script an Audit
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script audit with specific scripting optiions
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.Enable">
            <summary>
            Enable an Audit
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.Disable">
            <summary>
            Disable an Audit
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.EnableDisable(System.Boolean)">
            <summary>
            Enable or Disable a Server Audit
            </summary>
            <param name="enable">true enables the audit specification</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generate the create server audit script
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generate the alter server audit script
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.ScriptRename(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.String)">
            <summary>
            Generate the alter server audit script to rename the audit
            </summary>
            <param name="renameQuery"></param>
            <param name="so"></param>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Audit.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generate the drop server audit script with force drop audit specifications
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Audit.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Audit.Name">
            <summary>
            Name of Audit
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase">
            <summary>
            Instance class encapsulating : Server[@Name='']/AvailabilityGroup/AvailabilityDatabase
            </summary>
            <summary>
            An Availability Database represents a database that is part of an Availability Group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.Create">
            <summary>
            Create an availability database.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.Drop">
            <summary>
            Remove an availability database from the availability group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.Script">
            <summary>
            Generate the script for creating this availability database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Generate a script for this availability database using the
            specified scripting options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.JoinAvailablityGroup">
            <summary>
            Join the local copy of the database on the instance to the availability group.
            The local copy of the database is identified by the Name property.
            This action assumes the instance is already an availability replica in the group
            and the local copy is a locally restored copy of the database on the primary replica.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.LeaveAvailabilityGroup">
            <summary>
            Remove the local copy of the database on the availability replica from the availability group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.SuspendDataMovement">
            <summary>
            Suspend data movement on this availability database.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.ResumeDataMovement">
            <summary>
            Resume data movement on this availability database.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Composes the create script for the availability database object.
            </summary>
            <param name="query">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityDatabase.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Create the script to drop the availability database
            </summary>
            <param name="dropQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityGroup">
            <summary>
            Instance class encapsulating : Server[@Name='']/AvailabilityGroup
            </summary>
            <summary>
            An Availability Group (AG) is the unit of high availability. 
            It represents a collection of related databases that form the business critical application 
            that needs high availability and disaster recovery capability.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.Failover">
            <summary>
            Perform a manual failover of this availability group to the server
            specified by the Parent property. This server should be participating
            in the availability group as a secondary replica.
            The result of the action will be to designate this server as the primary of
            this availability group.
            This action has no possibility of data loss.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.FailoverWithPotentialDataLoss">
            <summary>
            Perform a force failover of this availability group to the server
            specified by the Parent property. This server should be participating
            in the availability group as a secondary replica.
            The result of the action will be to designate this server as the primary of
            this availability group.
            This action has the possibility of data loss if the databases on the replica
            are not synchronized with the primary.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.DemoteAsSecondary">
            <summary>
            Demote the current replica as secondary
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.Create">
            <summary>
            Create an availability group that has been specified on the client on the back end.
            
            The availability group creation will include any availability replicas or 
            availability databases added to the object before creation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.Alter">
            <summary>
            Alter an availability group.
            
            This is called when the alterable AG properties are changed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.Drop">
            <summary>
            Drop an availability group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.Script">
            <summary>
            Generate the script for creating this availability group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Generate a script for this availability group using the
            specified scripting options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.EnumReplicaClusterNodes">
            <summary>
            Returns a DataTable with information about the cluster configuration of 
            the availability group. For each replica, a row is present for each node
            that hosts the replica. A replica can be hosted by multiple nodes if the 
            replica is hosted on an FCI. The schema of this table is:
            ReplicaName (sysname) | NodeName (sysname)  | MemberType (tinyint) | MemberState (tinyint) | NumberOfQuorumVotes (int) 
            </summary>
            <returns>A DataTable with information about the cluster configuration of the availability group.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Composes the create script for the availability group object.
            </summary>
            <param name="query">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Composes the Alter script for an AvalabilityGroup object
            </summary>
            <param name="alterQuery">A collection of T-SQL scripts performing the Alter action.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Create the script to drop the availability group
            </summary>
            <param name="dropQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences. This is not used here since they have no 
            bearing on the script.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.GetPropagateInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction)">
            <summary>
            Propagate information to the ARs and ADs, listener collections
            </summary>
            <param name="action">the action to propagate</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.PostCreate">
            <summary>
            After create, we may need to update keys for listener ip address objects that use DHCP.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.ClusterTypeWithDefault">
            <summary>
            Gets the cluster type of the availability group, if the primary server is 130 or lower, return Wsfc instead
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.AvailabilityReplicas">
            <summary>
            The collection of replicas participating in the availability group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.AvailabilityDatabases">
            <summary>
            The collection of availability databases contained in the availability group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.DatabaseReplicaStates">
            <summary>
            A collection of <seealso cref="T:Microsoft.SqlServer.Management.Smo.DatabaseReplicaState"/> objects represeting the states of physical
            database replicas participating in the availability groups.
            On an Availability Replica in a primary role, the collection returns information
            on all Database Replicas on all Availability Replicas.
            On an Availability Replica in a secondary role, the collection returns information
            on just the local Database Replicas.
            
            The collection is keyed on the "AvailabilityReplicaServerName" and "AvailabilityDatabaseName"
            properties of the DatabaseReplciaState object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroup.AvailabilityGroupListeners">
            <summary>
            The collection of replicas participating in the availability group.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener">
            <summary>
            Instance class encapsulating : Server[@Name='']/AvailabilityGroup/AvailabilityGroupListener
            </summary>
            <summary>
            this is the partial class of code-gen AvailabilityGroupListener
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.RestartListener">
            <summary>
            Restart the listener
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.Create">
            <summary>
            Create an availability group listener for the availability group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.Drop">
            <summary>
            Drop an availaiblity group listener from the availability group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.Alter">
            <summary>
            Alter an existing availabilit group listener options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.Script">
            <summary>
            Generate a create script this availability group listener.
            </summary>
            <returns>string collection contains the T-SQL</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Generate a script for this availability group listener using the
            specified scripting options.
            </summary>
            <param name="scriptingOptions">the script object</param>
            <returns>string collection contains the T-SQL</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Composes the create script for the availability group listener object.
            This requires the AG must exist.
            </summary>
            <param name="query">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.ValidateIPAddresses">
            <summary>
            validate the IP addresses used for Create AG or Alter AG Add IP
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.ScriptListenerOptions">
            <summary>
            script out the listener options
            </summary>
            <returns>the script for listener options</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            we can only change the port of a listener, add IP address will be done in AGListenerIPAddress class 
            </summary>
            <param name="query">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Create the script to alter the availability group listener
            </summary>
            <param name="dropQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.FetchIpAddressKeysPostCreate">
            <summary>
            This method ensures that each IP Address in the AvailabilityGroupListenerIPAddresses collection
            has a key after creation.  The work of fetching the key is delegated to the FetchKeyPostCreate
            method in the AvailabilityGroupListenerIpAddress class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.GetPropagateInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction)">
            <summary>
            Propagate information to IP address collections
            </summary>
            <param name="action">the action to propagate</param>
            <returns>The propagation targets</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.PostCreate">
            <summary>
            After creation, but before propagation, we need to populate the keys for IP addresses 
            obtained through DHCP.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.AvailabilityGroupListenerIPAddresses">
            <summary>
            Gets the collection of replicas participating in the availability group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListener.UrnSuffix">
            <summary>
            Gets returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress">
            <summary>
            Instance class encapsulating : Server[@Name='']/AvailabilityGroup/AvailabilityGroupListener/AvailabilityGroupListenerIPAddress
            </summary>
            <summary>
            this is the partial class of code-gen AvailabilityGroupListenerIPAddress
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.Create">
            <summary>
            add an availability group listener IP address into the availability group listener.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.Script">
            <summary>
            Generate a create script this availability group listener.
            </summary>
            <returns>string collection contains the T-SQL</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Generate a script for this availability group listener using the
            specified scripting options.
            </summary>
            <param name="scriptingOptions">the script object</param>
            <returns>string collection contains the T-SQL</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Composes the add ip address script for the availability group listener IP address object.
            This requires the AG listener must exist.
            </summary>
            <param name="query">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.GetEmptyKey">
            <summary>
            Gets an empty AvailabilityGroupListenerIPAddressObjectKey
            </summary>
            <returns>An empty key for this object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.UpdateObjectState">
            <summary>
            This object does not need to have a key specified to enter the Creating state,
            since this key can be filled in after creation.  So we override this method
            to remove the "key!=null" constraint.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.FetchKeyPostCreate">
            <summary>
            If the IP address was created with DHCP, no keys were specified by the user.
            After creation we need to fetch the keys from the server.  Note that we don't
            override PostCreate here because it's impossible to create a standalone IP Address
            with the DHCP setting (this is a limitation on the DDL).  You can only create a
            static IP address, in which case we do not need to fetch the key.  This method is
            called from PostCreate in the parent class, AvailabilityGroupListener.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.IsIPv6">
            <summary>
            Gets a value indicating whether this is IP v4.
            from the DMV spec:ip_subnet_mask The availability group listener's configured IP subnet mask
            Lists the subnet mask for the ip_v4 address configured for the listener
            Null if it's Ipv6
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.IPAddress">
            <summary>
            Gets or sets the IPaddress of the Availability Group Listener
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.SubnetMask">
            <summary>
            Gets or sets the subnet IP mask of the Availability Group Listener
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.SubnetIP">
            <summary>
            Gets or sets the subnet IP of the Availability Group Listener
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddress.UrnSuffix">
            <summary>
            Gets the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityReplica">
            <summary>
            Instance class encapsulating : Server[@Name='']/AvailabilityGroup/AvailabilityReplica
            </summary>
            <summary>
            An Availability Replica is an instance of SQL Server that is part of an Availability Group.
            The replica hosts copies of the databases in a group.
            Depending on its current roles, the replica can be the primary of the Availability Group
            or one of many secondaries.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.SetLoadBalancedReadOnlyRoutingList(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}})">
            <summary>
            Set the load balanced read-only routing list
            </summary>
            <param name="routingList"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.Refresh">
            <summary>
            Refresh the state of the object from the backend.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.Create">
            <summary>
            Create an availability replica for the availability group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.Drop">
            <summary>
            Drop an availaiblity replica from the availability group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.Alter">
            <summary>
            Alter an existing replica options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.Script">
            <summary>
            Generate a create script this availability replica.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Generate a script for this availability replica using the
            specified scripting options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Composes the create script for the availability replica object.
            </summary>
            <param name="query">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            We will have to emit multiple Alter statements here since the engine does not allow multiple options in one shot.
            
            Also, if both the sync and failover modes are changing together, then the order of the Alter statements emitted will
            depend on the start and end states. So, this will be handled as a special case.
            </summary>
            <param name="query">A collection of scripts corresponding to the different options being altered.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Create the script to drop the availability replica
            </summary>
            <param name="dropQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string in the end.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.ConvertToReadOnlyRoutingList(System.String)">
            <summary>
            Convert the read-only routing list from its string representation.
            </summary>
            <param name="readOnlyRoutingListDisplayString">The string representation of the read-only routing list. e.g. N'replica1',(N'replica2',N'replica3'),replica4</param>
            <returns>The read-only routing list</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.ConvertReadOnlyRoutingListToString(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}},System.Boolean)">
            <summary>
            Convert the read-only routing list to its string representation
            </summary>
            <param name="readOnlyRoutingList">The read-only routing list</param>
            <param name="tsqlCompatible">Whether the string need to be T-SQL compatible</param>
            <returns>The string representation of the specified read-only routing list</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.ReadonlyRoutingList">
            <summary>
            An ordered list of replica server names to be used for routing read-only connections
            when this replica is in a primary role
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.LoadBalancedReadOnlyRoutingList">
            <summary>
            Load balanced read-only routing list
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.LoadBalancedReadOnlyRoutingListDisplayString">
            <summary>
            Display string of the load balanced read-only routing list
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityReplica.IsSeedingModeSupported">
            <summary>
            Gets a bool flag indicating whether seeding mode is supported
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupDevice">
            <summary>
            Instance class encapsulating : Server[@Name='']/BackupDevice
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupDevice.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupDevice.ReadBackupHeader">
            <summary>
            The ReadBackupHeader method returns a QueryResults object that enumerates the contents of the media maintained by a backup device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupDevice.ReadMediaHeader">
            <summary>
            The ReadMediaHeader method returns a QueryResults object that enumerates the values of a backup media header record.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.BrokerPriority">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/BrokerPriority
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.BrokerObjectBase.Name">
            <summary>
            Name of UserDefinedAggregateParameter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Broker.BrokerPriority.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.BrokerPriority.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.BrokerService">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/BrokerService
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Broker.BrokerService.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.BrokerService.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Certificate">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Certificate
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Create">
            <summary>
             Creates the object on the server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Create(System.String)">
            <summary>
             Creates the object on the server. The encryption password is the password 
             with which the private key is stored.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Alter">
            <summary>
             Persist all changes made in this object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.AddPrivateKey(System.String,System.String)">
            <summary>
             Adds a private key to the certificate. The privateKeyPath parameter specifies 
             the full path to the certificate. The decryption password is the password that 
             is needed to access the private key. 
             The private key will be encrypted by the database master key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.AddPrivateKey(System.String,System.String,System.String)">
            <summary>
             Adds a private key to the certificate. The privateKeyPath parameter specifies 
             the full path to the certificate. The decryption password is the password that
             is needed to access the private key. The encryption password is the password 
             with which the private key is stored
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Drop">
            <summary>
             Drops the object and removes it from the collection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Create(System.String,Microsoft.SqlServer.Management.Smo.CertificateSourceType)">
            <summary>
             Loads the certificate from the source specified.
             
             It has the same semantics as a Create() operation: adds it in the collection, change state
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Create(System.String,Microsoft.SqlServer.Management.Smo.CertificateSourceType,System.String,System.String)">
            <summary>
             Loads the certificate from the specified source, and private key from the specified 
             file. The decryption password is the password that is needed to access the private key. 
             
             It has the same semantics as a Create() operation: adds it in the collection, change state
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Create(System.String,Microsoft.SqlServer.Management.Smo.CertificateSourceType,System.String,System.String,System.String)">
            <summary>
             Loads the certificate from the specified source, and private key from the specified 
             file. The decryption password is the password that is needed to access the private key. 
             The encryption password specifies the password with which the private key will be encrypted.
             
             It has the same semantics as a Create() operation: adds it in the collection, change state
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Export(System.String)">
            <summary>
             Saves the certificate the specified certificatePath
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Export(System.String,System.String,System.String)">
            <summary>
            Saves the certificate in the specified certificatePath.
            </summary>
            <param name="certificatePath"></param>
            <param name="privateKeyPath">specifies the path of the private key</param>
            <param name="encryptionPassword">specifies the encryption for the private key</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.Export(System.String,System.String,System.String,System.String)">
            <summary>
            Saves the certificate in the specified certificatePath.
            </summary>
            <param name="certificatePath"></param>
            <param name="privateKeyPath">Specifies the path of the private key</param>
            <param name="encryptionPassword">Specifies the encryption for the private key</param>
            <param name="decryptionPassword">The password used to decrypt the certificate</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.ChangePrivateKeyPassword(System.String,System.String)">
            <summary>
            Changes the password that is used to secure the private key.
            </summary>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.RemovePrivateKey">
            <summary>
            Removes the private key from the certificate
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.GetCertificateBuilder(System.String)">
            <summary>
             returns a initialized StringBuilder 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.GetCertificateBuilder(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             returns a initialized StringBuilder based on the requested operation ( CREATE, ALTER etc. )
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.CheckNullArgument(System.String,System.String)">
            <summary>
            	ArgumentNullException is the argument is null
             should be inlined
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.AddToStringBuilderIfNotNull(System.Text.StringBuilder,System.String,System.Object,System.Boolean)">
            <summary>
             generate script in sb if data is not null
             use the specified prefix
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.CreateInternal(System.String)">
            <summary>		
             Creates the object on the server. The encryption password is the password 
             with which the private key is stored.
            </summary>		
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             generates the scripts to persist changes made in this object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.AddPrivateKeyInternal(System.String,System.String,System.String)">
            <summary>
             Adds a private key to the certificate. The privateKeyPath parameter specifies 
             the full path to the certificate. The decryption password is the password that
             is needed to access the private key. The encryption password is the password 
             with which the private key is stored
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             build script for dropping a certificate
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.ImportInternal(System.String,Microsoft.SqlServer.Management.Smo.CertificateSourceType,System.String,System.String,System.String)">
            <summary>
             Loads the certificate from the specified source, and private key from the specified 
             file. The decryption password is the password that is needed to access the private key. 
             The encryption password specifies the password with which the private key will be encrypted.
             
             It has the same semantics as a Create() operation: adds it in the collection, change state
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Certificate.ExportInternal(System.String,System.String,System.String,System.String)">
            <summary>
            Saves the certificate the specified certificatePath. The privateKeyPath specifies 
            the path of the private key. The password specifies the encryption for the private key.
            </summary>
            <param name="certificatePath"></param>
            <param name="privateKeyPath"></param>
            <param name="encryptionPassword"></param>
            <param name="decryptionPassword"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Certificate.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Certificate.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Certificate.UrnSuffix">
            <summary>
             returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Check">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Check
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Check.Rename(System.String)">
            <summary>
            Renames the object
            </summary>
            <param name="newname">New check constraint name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Check.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Check.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Check.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Column">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Column
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.GetPermTargetObject">
            <summary>
            Returns the target object on which we will apply permisisons.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.EmbedDefaultConstraints(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Return true if default constraints should be embedded. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.ScriptPermissionInfo(Microsoft.SqlServer.Management.Smo.PermissionInfo,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns permission script corresponding to the permission info passed as parameter.
            </summary>
            <param name="pi"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.VersionValidate(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Checks to see if this column is fit to be scripted to the target version
            </summary>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.GetNativeDataType">
            <summary>
            Returns the system SqlDataType for the passed column. If the DataType is UDDT then
            it returns the underlying SqlDataType for the UDDT
            </summary>
            <param name="column">
            The column for which to return the data type
            </param>
            <returns>
            Returns the system SqlDataType for the passed column. If the DataType is UDDT then
            it returns the underlying SqlDataType for the UDDT
            </returns>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.CheckSupportedType(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Determines whether a database type is supported or not based on the passed
            options
            </summary>
            <param name="column">Column for which test the DataType</param>
            <param name="options">ScriptingPreferences to use</param>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.IsParentMemoryOptimized">
            <summary>
            Returns true if the parent object is memory optimized
            </summary>        
            <returns></returns>        
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.RequiresCollate(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns true if the current column should have collation
            </summary>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.GetAndValidateMaskingFunction(System.Boolean)">
            <summary>
            Validates and returns the masking function stored in the MaskingFunction column property.
            If the IsMasked column property is 'false', returns 'null' instead.
            </summary>
            <param name="isMaskedColumn">The value of the IsMasked property set on the column.</param>
            <returns>A string representing the masking function applied to the column on the MaskingFunction property.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.InitializeDefault(System.Data.IDataReader,System.Int32,System.Boolean)">
            <summary>
            initializes data for this default, this is only used from prefetch
            </summary>
            <param name="constraintRow">DataRow containing constraint data</param>
            <param name="colIdx">index for the column containing the name of the constraint</param>
            <param name="forScripting">true is the initialization is for scripting
            that is we have to init all properties</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.RemoveDefaultConstraint">
            <summary>
            This method gets called from Drop method of DefaultConstraint. As DefaultConstraint
            doesn't belong to ParentCollection, so generic code unable to remove this reference.
            Calling this method doesn't ensure to remove the actual DefaultConstraint on server
            in connected mode
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.UpdateStatistics">
            <summary>
            forces data distribution statistics update for a referenced index or all 
            indexes defined on a SQL Server table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsScanType)">
            <summary>
            forces data distribution statistics update for a referenced index or all 
            indexes defined on a SQL Server table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsScanType,System.Int32)">
            <summary>
            forces data distribution statistics update for a referenced index or all 
            indexes defined on a SQL Server table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsScanType,System.Int32,System.Boolean)">
            <summary>
            forces data distribution statistics update for a referenced index or all 
            indexes defined on a SQL Server table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.ValidatePropertyChangeForText(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            validates that a property can change if the column is part of a text object
            A column is locked for updates when its collection is locked.
            This happens when the collection is part of a text object with TextMode true.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.CheckIsExternalTableColumn(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Checks if the column belongs to an external table.
            </summary>
            <param name="sp">Scripting preferences.</param>
            <returns>True if the column belongs to an external table; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.IsGraphComputedColumn">
            <summary>
            This method determines if this column is a graph computed column. Graph computed
            columns are exposed in select * queries and have graph type identifiers
            of 2, 5 and 8.
            </summary>
            <returns>True if the column is an internal graph column, False otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Column.IsGraphInternalColumn">
            <summary>
            This method determines if this column is an internal graph column. Internal
            graph columns are not exposed in select * queries and have graph type identifiers
            of 1, 3, 4, 6, and 7.
            </summary>
            <returns>True if the column is an internal graph column, False otherwise.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Column.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Column.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Column.UnderlyingSqlDataType">
            <summary>
            Returns type of column, and underlying type if UDDT
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ColumnEncryptionKey
            </summary>
            <summary>
             Represents a sql server column encryption key object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.Drop">
            <summary>
            Drop the column encryption key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Drop the column encryption key. Syntax of the statement is 
                DROP COLUMN ENCRYPTION KEY key_name
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.Create">
            <summary>
            Create the CEK
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Create the column encryption key. Syntax of the statement is 
                    CREATE COLUMN ENCRYPTION KEY key_name 
                    WITH VALUES
                    (
                        COLUMN_MASTER_KEY = column_master_key_name, 
                        ALGORITHM = 'algorithm_name', 
                        ENCRYPTED_VALUE =  varbinary_literal
                    ) [,
                    (
                        COLUMN_MASTER_KEY = column_master_key_name, 
                        ALGORITHM = 'algorithm_name', 
                        ENCRYPTED_VALUE =  varbinary_literal
                    ) 
                    ]
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.Alter">
            <summary>
            Alter the CEK
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Alter CEK statement only allows on addition or drop at a time. 
            Here is the syntax for it
            
            ALTER COLUMN ENCRYPTION KEY key_name
            ADD VALUE
            (
                    COLUMN_MASTER_KEY = column_master_key_name, 
                    ALGORITHM = 'algorithm_name', 
                    ENCRYPTED_VALUE =  varbinary_literal 
            )
            
            OR
            
            ALTER COLUMN ENCRYPTION KEY key_name
            DROP VALUE
            (
                    COLUMN_MASTER_KEY = column_master_key_name
            ) 
            </summary>
            <param name="alterQuery"></param>
            <param name="sp"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.Script">
            <summary>
            Script the Column Encryption Key
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.GetPropagateInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction)">
            <summary>
            Propagate states, but not actions to ColumnEncryptionKeyValue.
            </summary>
            <returns>The collection of child ColumnEncryptionKeyValue to update. </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.GetColumnsEncrypted">
            <summary>
            Retrieves the list of all columns encrypted with this column encryption key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object. This is used by transfer.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.UrnSuffix">
            <summary>
            returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.Name">
            <summary>
            The name of the column encryption key
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey.ColumnEncryptionKeyValues">
            <summary>
            The collection of CEK Values for this CEK.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ColumnEncryptionKey/ColumnEncryptionKeyValue
            </summary>
            <summary>
             Represents a sql server column encryption key value object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue.#ctor(Microsoft.SqlServer.Management.Smo.ColumnEncryptionKey,Microsoft.SqlServer.Management.Smo.ColumnMasterKey,System.String,System.Byte[])">
            <summary>
            Parameterized constructor - populates properties from parameter values.
            </summary>
            <param name="parent">Parent Column Encryption Key</param>
            <param name="cmk">Column Master Key  object</param>
            <param name="encryptionAlgorithm">Encryption Algorithm</param>
            <param name="encryptedValue">Encrypted CEK value as a byte array</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue.MarkForDrop(System.Boolean)">
            <summary>
            Marks or unmarks the Column encryption key value for drop on the next alter called on the parent policy
            </summary>
            <param name="dropOnAlter">Whether the column encryption key value should be marked for drop.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue.Drop">
            <summary>
            Drop the Column encryption key value
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue.Create">
            <summary>
            Create the column encryption key value
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object. This is used by transfer.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">DatabaseEngineEdition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue.UrnSuffix">
            <summary>
            Returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue.EncryptedValueAsSqlBinaryString">
            <summary>
            Returns Encrypted Value as a string with format 0x[0-9A-F]
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ColumnMasterKey">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ColumnMasterKey
            </summary>
            <summary>
             Represents a sql server Column Master Key object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.#ctor(Microsoft.SqlServer.Management.Smo.Database,System.String,System.String,System.String)">
            <summary>
            Parameterized constructor - populates properties from parameter values.
            </summary>
            <param name="parent">The parent database</param>
            <param name="name">The name of the column master key</param>
            <param name="keyStoreProviderName">Key store provider name</param>
            <param name="keyPath">Column master key path</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.Drop">
            <summary>
            Drop the column master key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Drop the column master key. Syntax of the statement is 
                DROP COLUMN MASTER KEY key_name
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.Create">
            <summary>
            Create the Security Policy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Create the column master key. Syntax of the statement is 
                CREATE COLUMN MASTER KEY key_name
                WITH 
                (
                    KEY_STORE_PROVIDER_NAME = 'key store provider name',  
                    KEY_PATH = 'key path
                )
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.Script">
            <summary>
            Script the column master key
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.GetColumnEncryptionKeyValuesEncrypted">
            <summary>
            Retrieves all column encryption key values encrypted with this column master key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object. This is used by transfer.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.UrnSuffix">
            <summary>
            returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnMasterKey.Name">
            <summary>
            The name of the column master key
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.ConfigurationValue">
            <summary>
            Instance class encapsulating : Server[@Name='']/Mail/ConfigurationValue
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.ConfigurationValue.Alter">
            <summary>
            Alter object properties
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.ConfigurationValue.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.ConfigurationValue.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Credential">
            <summary>
            Instance class encapsulating : Server[@Name='']/Credential
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Constructs Credential object.
            </summary>
            <param name="parentColl">Parent collection.</param>
            <param name="key">Object key.</param>
            <param name="state">Object state.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.GetNonAlterableProperties">
            <summary>
            Once created the ProviderName of the credential cannot be changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Create">
            <summary>
            Creates the object. Implements ICreatable.Create().
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Create(System.String)">
            <summary>
            Creates the object.
            </summary>
            <param name="identity">User identity.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Create(System.String,System.String)">
            <summary>
            Creates the object.
            </summary>
            <param name="identity">User identity.</param>
            <param name="secret">Secret string, usually a password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Create(System.String,System.Security.SecureString)">
            <summary>
            Creates the object.
            </summary>
            <param name="identity">User identity.</param>
            <param name="secret">Secret string, usually a password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             Generates the scripts for creating the object.
             </summary>
             <param name="query">Collection of query lines of text.</param>
             <param name="so">Scription options.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Alter">
            <summary>
            Alters the object. Implements IAlterable.Alter().
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Alter(System.String)">
            <summary>
            Alters the object.
            </summary>
            <param name="identity">User identity.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Alter(System.String,System.String)">
            <summary>
            Alters the object.
            </summary>
            <param name="identity">User identity.</param>
            <param name="secret">Secret string, usually a password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Alter(System.String,System.Security.SecureString)">
            <summary>
            Alters the object.
            </summary>
            <param name="identity">User identity.</param>
            <param name="secret">Secret string, usually a password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the script that alters the object
            </summary>
            <param name="query">Collection of query lines of text.</param>
            <param name="so">Scription options.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.Drop">
            <summary>
            Drops the object. Implements IDroppable.Drop().
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates script that drops the object.
            </summary>
            <param name="query">Collection of query lines of text.</param>
            <param name="so">Scription options.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.EnumLogins">
            <summary>
            Returns a list of login object names that reference the credential.
            </summary>
            <returns>Collection of login names.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Credential.CreateAlterScript(System.Boolean,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates script for creating or altering the object.
            </summary>
            <param name="create">True to generate CREATE script; false to generate ALTER script</param>
            <param name="so">Scripting options.</param>
            <returns>Script string.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Credential.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Credential.UrnSuffix">
            <summary>
            returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/DatabaseScopedCredential
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Constructs Credential object.
            </summary>
            <param name="parentColl">Parent collection.</param>
            <param name="key">Object key.</param>
            <param name="state">Object state.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Create">
            <summary>
            Creates the object. Implements ICreatable.Create().
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Create(System.String)">
            <summary>
            Creates the object.
            </summary>
            <param name="identity">User identity.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Create(System.String,System.String)">
            <summary>
            Creates the object.
            </summary>
            <param name="identity">User identity.</param>
            <param name="secret">Secret string, usually a password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Create(System.String,System.Security.SecureString)">
            <summary>
            Creates the object.
            </summary>
            <param name="identity">User identity.</param>
            <param name="secret">Secret string, usually a password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             Generates the scripts for creating the object.
             </summary>
             <param name="queries">Collection of query lines of text.</param>
             <param name="sp">Scripting options.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Alter">
            <summary>
            Alters the object. Implements IAlterable.Alter().
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Alter(System.String)">
            <summary>
            Alters the object.
            </summary>
            <param name="identity">User identity.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Alter(System.String,System.String)">
            <summary>
            Alters the object.
            </summary>
            <param name="identity">User identity.</param>
            <param name="secret">Secret string, usually a password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Alter(System.String,System.Security.SecureString)">
            <summary>
            Alters the object.
            </summary>
            <param name="identity">User identity.</param>
            <param name="secret">Secret string, usually a password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the script that alters the object
            </summary>
            <param name="queries">Collection of query lines of text.</param>
            <param name="sp">Scripting options.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.Drop">
            <summary>
            Drops the object. Implements IDroppable.Drop().
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates script that drops the object.
            </summary>
            <param name="queries">Collection of query lines of text.</param>
            <param name="sp">Scripting options.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.CreateAlterScript(System.Boolean,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates script for creating or altering the object.
            </summary>
            <param name="create">True to generate CREATE script; false to generate ALTER script</param>
            <param name="so">Scripting options.</param>
            <returns>Script string.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredential.UrnSuffix">
            <summary>
            returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.CryptographicProvider">
            <summary>
            Instance class encapsulating : Server[@Name='']/CryptographicProvider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Constructs Credential object.
            </summary>
            <param name="parentColl">Parent Collection</param>
            <param name="key">Object key</param>
            <param name="state">Object state</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.Create">
            <summary>
            Creates the Cryptographic Provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the script that creates the Cryptographic Provider
            </summary>
            <param name="queries">Collection of query lines of text</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.Alter">
            <summary>
            Alters the Cryptographic Provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the script to alter the Cryptographic Provider
            </summary>
            <param name="queries">Collection of query lines of text</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.Drop">
            <summary>
            Drops the Cryptographic Provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates script that drops the Cryptographic Provider
            </summary>
            <param name="queries">Collection of query lines of text</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.Enable">
            <summary>
            Enables the Cryptographic Provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.Disable">
            <summary>
            Disables the Cryptographic Provider
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.ScriptEnableDisable(System.Boolean)">
            <summary>
            Returns the script to enable/disable Cryptographic Provider
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.EnumEncryptionAlgorithms">
            <summary>
            Returns inromation and values about encryption algorithms supported by External Provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CryptographicProvider.EnumProviderKeys">
            <summary>
            Returns the provider keys mapped to the External Provider
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CryptographicProvider.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CryptographicProvider.UrnSuffix">
            <summary>
            Returns name of the type in the Urn Expression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CryptographicProvider.Name">
            <summary>
            Name of CryptographicProvider
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CryptographicProvider.Version">
            <summary>
            Returns the Version of the External Provider
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CryptographicProvider.SqlCryptographicVersion">
            <summary>
            Returns the SqlCryptographic Version of the External Provider
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Database">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.String,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Constructs a new Database object to be created with the given edition
            </summary>
            <param name="server"></param>
            <param name="name"></param>
            <param name="edition"></param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Database.m_edition">
            <summary>
            The Engine Edition (such as SQL Datawarehouse) of this database. This is either set by the caller or
            loaded
            </summary>
            <remarks>This is nullable so we can tell when the value has been checked but the DB does not yet
            exist (the value will be set to Unknown in that case) versus not yet checked</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.Create">
            <summary>
            Creates the database on the instance of SQL Server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts object creation. Resulting script comes back in an array.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptDbScopedConfigurations(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts database scoped configurations for a create or alter statement if necessary.
            </summary>
            <param name="query">The StringCollection representing the current query.</param>
            <param name="sp">The scripting preferences for this script create/alter call.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptCreateUsersIfRequired(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
              if we script permissions then we need to add users
            </summary>
            <param name="createQuery"></param>
            <param name="sp"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptCreateForCloud(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.String)">
            <summary>
            Scripts object creation for Cloud DB.
            </summary>
             <param name="sbStatement"></param>
             <param name="sp"></param>
             <param name="scriptName">Name of the DB</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptAlterForCloud(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Script alter for cloud-specific properties
            </summary>
            <param name="sbStatement"></param>
            <param name="sp"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the standard behavior of scripting object permissions.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.SetSnapshotIsolation(System.Boolean)">
            <summary>
            Enables or disables snapshot isolation for the current database
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptOwnerForShiloh(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.String)">
            <summary>
            Adds the script to change the owner of a DB for SQL 2005 (Shiloh). That doesn't
            support ALTER AUTHORIZATION so sp_changedbowner is used.
            </summary>
            <param name="sb">The StringBuilder to append the query to</param>
            <param name="sp">Options (used for formatting the name)</param>
            <param name="newOwner">The name of the login</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.SetOwner(System.String)">
            <summary>
            Sets the owner of this database to the login with the specified name. Does not drop any existing user
            accounts mapped to the login before attempting to change the owner.
            </summary>
            <param name="loginName">The name of the login to be the new owner</param>
            <remarks>If dropExistingUser is not set to true then an existing non-dbo user account mapped to the specified
            login will cause this to fail.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.SetOwner(System.String,System.Boolean)">
            <summary>
            Sets the owner of this database to the login with the specified name.
            </summary>
            <param name="loginName">The name of the login to be the new owner</param>
            <param name="dropExistingUser">Whether to drop any existing Users mapped to the specified login for this DB before
            changing the owner.</param>
            <remarks>If dropExistingUser is not set to true then an existing non-dbo user account mapped to the specified
            login will cause this to fail.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.SetOwnerImpl(System.String,System.Boolean)">
            <summary>
            Implementation to change the owner of this database to the login with the specified name.
            </summary>
            <param name="loginName">The name of the login to be the new owner</param>
            <param name="dropExistingUser">Whether to drop existing non-dbo users before changing the owner</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptRemoteDataArchive(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Adds the appropriate ALTER DATABASE ... statements to the StringCollection based on
            the current state of Remote Data Archive on the database.
            </summary>
            <param name="queries">The collection of statements to add to</param>
            <param name="sp">The settings for generating the scripts</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts out alter statements based on the current state of the Database object.
            </summary>
            <remarks>Currently only partially supported for SQL Azure Databases tracked by VSTS#6669499</remarks>
            <param name="alterQuery"></param>
            <param name="sp"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.AddUseDb(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Adds USE Db statements, using the script name if specified. Will not add
            the statement if the Target Engine Type is Azure since the USE statement
            is only supported by Azure if the connection is already to that Database.
            </summary>
            <param name="col"></param>
            <param name="sp"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.AddUseDb(System.Collections.Specialized.StringCollection)">
            <summary>
            Adds the USE DB statement to the end of the specified string collection
            </summary>
            <param name="col">The StringCollection to add the statement to</param>
            <remarks>This does not check the engine type, so will add the statement even if this is for use on Azure (which doesn't support USE to switch database context)</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.InsertUseDb(System.Int32,System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Common.DatabaseEngineType)">
            <summary>
            Adds the USE Db statements at given index if the target engine type is not cloud.
            </summary>
            <param name="index">The index to insert the statement at</param>
            <param name="col">The StringCollection to add the statement to</param>
            <param name="targetEngineType">The target DatabaseEngineType</param>
            <remarks>Does nothing if the target engine type is Azure</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.IsMember(System.String)">
            <summary>
            Determines if the current user is a member of the given group or role in the current database
            </summary>
            <param name="groupOrRole"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ChangeMirroringState(Microsoft.SqlServer.Management.Smo.MirroringOption)">
            <summary>
            Alters the database mirroring status
            </summary>
            <param name="mirroringOption"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.DropBackupHistory">
            <summary>
            Deletes the entries in the backup and restore history tables for database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.IsDatabaseEncryptionKeyPresent">
            <summary>
            This method will return a true value if the database has a DEK, otherwise false
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.IsDEKInitializedWithoutAnyPropertiesSet">
            <summary>
            This method will return a true value if DEK is initialized but none of its properties required for script or create are set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumLocks(System.Int32)">
            <summary>
            EnumLocks
            </summary>
            <param name="processID"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumLocks">
            <summary>
            EnumLocks
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumLoginMappings">
            <summary>
            EnumLoginMappings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumWindowsGroups">
            <summary>
            EnumWindowsGroups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumWindowsGroups(System.String)">
            <summary>
            EnumWindowsGroups
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.CheckAllocations(Microsoft.SqlServer.Management.Smo.RepairType)">
            <summary>
            CheckAllocations
            </summary>
            <param name="repairType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.Shrink(System.Int32,Microsoft.SqlServer.Management.Smo.ShrinkMethod)">
            <summary>
             Shrinks a database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.PrefetchObjects">
            <summary>
            Initializes all the objects in the database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.PrefetchObjects(System.Type)">
            <summary>
            Initializes all the objects of type t and their children
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.PrefetchObjects(System.Type,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Initializes all the objects of type t and their children needed to script
            with so
            </summary>
            <param name="t"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.PrefetchObjects(System.Type,Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Initializes all the objects of type t and their children needed to script
            with so
            </summary>
            <param name="t"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.PreInitChildLevel">
            <summary>
            Makes sure we have all the properties before attempting to prefetch
            anything, because we will need it to build our collections
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumTransactions">
            <summary>
            Returns a set of active transactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumTransactions(Microsoft.SqlServer.Management.Smo.TransactionTypes)">
            <summary>
            Returns a set of active transactions
            </summary>
            <param name="transactionType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.GetTransactionCount">
            <summary>
            Returns the number of open transactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.GetTransactionCount(Microsoft.SqlServer.Management.Smo.TransactionTypes)">
            <summary>
            Returns the number of open transactions with
            </summary>
            <param name="transactionType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumCandidateKeys">
            <summary>
            The EnumCandidateKeys method returns a QueryResults object that enumerates the user tables of a Microsoft® SQL Server™ 2000 database and the constraints on those tables that could define primary keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.UpdateIndexStatistics">
            <summary>
            Update statistics for all indexes in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumMatchingSPs(System.String,System.Boolean)">
            <summary>
            The EnumMatchingSPs method returns a QueryResults object that enumerates the stored procedures that contain the specified search text
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumMatchingSPs(System.String)">
            <summary>
            The EnumMatchingSPs method returns a QueryResults object that enumerates the stored procedures that contain the specified search text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnumObjects(Microsoft.SqlServer.Management.Smo.DatabaseObjectTypes,Microsoft.SqlServer.Management.Smo.SortOrder)">
            <summary>
            The ListObjects method returns a SQLObjectList object that enumerates the system and user-defined objects defining the database referenced.
            </summary>
            <param name="types"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.CheckDbCompatibilityLevel">
            <summary>
            This method will throw an error when the user is calling a method for a
            database that is in 6.0 or 6.5 compatibility mode
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.CheckObjectState(System.Boolean)">
            <summary>
            Override of the global state check. Will invoke the check for compatibility
            level if the object is created
            </summary>
            <param name="throwIfNotCreated"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.TruncateLog">
            <summary>
            Truncate log.  This is supported in SQL Server 2005 for backwards compatibility reasons.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptVardecimalCompression(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            Emit script to set vardecimal storage
            </summary>
            <param name="query">the sql script that is being created</param>
            <param name="so">The scripting options</param>
            <param name="forCreate">True if we are generating a create script, false otherwise</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.EnableAllPlanGuides">
            <summary>
            ENABLE all the planguides
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.DisableAllPlanGuides">
            <summary>
            DISABLE all the planguides
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.DropAllPlanGuides">
            <summary>
            DROP all the planguides
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ValidateAllPlanGuides">
            <summary>
            Validate all the planguides
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ValidateAllPlanGuides(System.Data.DataTable@)">
            <summary>
            Validate all the planguides
            </summary>
            <param name="dt">ou parameter datatable</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ReauthorizeRemoteDataArchiveConnection(System.String,System.Boolean)">
            <summary>
            Reauthorize a stretched database with the SQL Azure server after the database is restored from a backup
            </summary>
            <param name="credentialName">The name of the credential to use for re-authorization</param>
            <param name="withCopy">A boolean flag to indicate if the remote stretched database should be duplicated (true by default)</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.GetRemoteDataArchiveMigrationStatusReports(System.DateTime,System.Int32,System.String)">
            <summary>
            Gets a list of remote data archive migration status reports
            </summary>
            <param name="migrationStartTime">Data migration start time</param>
            <param name="statusReportCount">Number of reports to be retrieved</param>
            <returns>List of remote data archive migration status reports</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.GetRemoteDatabaseMigrationStatistics">
            <summary>
            Get remote database migration statistics. Null if Remote Data Archive is not enabled for database
            </summary>
            <returns>Database Migration statistics if Remote Data Archive is enabled, else null</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.AddDefaultLanguageOption(System.String,System.String,System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Collections.Specialized.StringCollection)">
            <summary>
            Takes care of the scripting logic of DefaultLanguage and DefaultFullTextLanguage properties.
            </summary>
            <param name="nameProperty"></param>
            <param name="lcidProperty"></param>
            <param name="optname"></param>
            <param name="sp"></param>
            <param name="query"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptAlterPropReadonly(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            The READONLY property had to be factored out so transfer can toggle a destination database that is supposed to be READONLY
            to READWRITE then back again to allow actual transfers to take place.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.ScriptAlterPropBool(System.String,System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Collections.Specialized.StringCollection,System.String,System.Boolean)">
            <summary>
            Scripts Database options
            </summary>
            <param name="propname"></param>
            <param name="optname"></param>
            <param name="sp"></param>
            <param name="queries"></param>
            <param name="val"></param>
            <param name="useEqualityOperator"></param>
            <returns>Returns true if Script is generated otherwise false</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Database.IsLocalPrimaryReplica">
            <summary>
            NOTE: Method returns false for cases where the DB is not in HADR config.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.DatabaseExecutionManager">
            <summary>
              This is required for CloudDB
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.WarnOnRename">
            <summary>
            Renaming a database should ask for confirmation
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.CatalogCollation">
            <summary>
            Gets or sets the MD Catalog Collation type.  Only valid during creation, and we cannot specify ContainedDatabaseCollation explicitly
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.DatabaseAuditSpecifications">
            <summary>
            DatabaseAuditSpecification Collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.BackupSets">
            <summary>
            Gets the backup sets of the database.
            </summary>
            <value>The backup sets.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.DefaultLanguage">
            <summary>
            Gets or sets the default language for the users of this database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.DefaultFullTextLanguage">
            <summary>
            Gets or sets the default fulltext language of this database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.MaxDop">
            <summary>
            Gets or sets the MaxDop of the database scoped configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.MaxDopForSecondary">
            <summary>
            Get or set the MaxDop for secondary of the database scoped configuration special accounting for nulls.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.LegacyCardinalityEstimation">
            <summary>
            Get or set the Legacy_Cardinality_Estimation of the database scoped configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.LegacyCardinalityEstimationForSecondary">
            <summary>
            Get or set the Legacy_Cardinality_Estimation for secondary of the database scoped configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.ParameterSniffing">
            <summary>
            Get or set the Parameter_Sniffing of the database scoped configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.ParameterSniffingForSecondary">
            <summary>
            Get or set the Parameter_Sniffing for secondary of the database scoped configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.QueryOptimizerHotfixes">
            <summary>
            Get or set the Query_Optimizer_Hotfixes of the database scoped configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.QueryOptimizerHotfixesForSecondary">
            <summary>
            Get or set the Query_Optimizer_Hotfixes for secondary of the database scoped configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.IsVarDecimalStorageFormatSupported">
            <summary>
            Whether vardecimal compression is supported on the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Database.IsVarDecimalStorageFormatEnabled">
            <summary>
            Whether vardecimal compression is enabled
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Database.SupportedEngineType">
            <summary>
            Supported EngineTypeCollections
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseActiveDirectory">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/DatabaseActiveDirectory
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseActiveDirectory.Register">
            <summary>
            Register database with Active Directory Services
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseActiveDirectory.UpdateRegistration">
            <summary>
            Update database registration with Active Directory Services
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseActiveDirectory.Unregister">
            <summary>
            Unregister database from Active Directory Services
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseAuditSpecification">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/DatabaseAuditSpecification
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AuditSpecification.isInitialized">
            <summary>
            If Audit Specification Details need to be refreshed.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AuditSpecification.enumAuditSpecDetails">
            <summary>
            Stores enumerated audit specification details as it is an expensive operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.Create">
            <summary>
            Creates a new Server/Database Audit Specification with no actions to be audited
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.Alter">
            <summary>
            Alter an existing Server/Database Audit Specification - Alters the AuditName
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.Drop">
            <summary>
            Drops an existing Server/Database Audit Specification
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.Refresh">
            <summary>
            Refresh a Server/Database Audit Specification
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.Script">
            <summary>
            Script a Server/Database Audit Specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script a Server/Database Audit Specification
            </summary>
            <param name="scriptingOptions">Options to script the Server/Database Audit Specification</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.AddAuditSpecificationDetail(Microsoft.SqlServer.Management.Smo.AuditSpecificationDetail)">
            <summary>
            Add an Audit Specification Detail to the Audit Specification. 
            </summary>
            <param name="auditSpecificationDetail"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.AddAuditSpecificationDetail(System.Collections.Generic.ICollection{Microsoft.SqlServer.Management.Smo.AuditSpecificationDetail})">
            <summary>
            Adds a collection of Audit Specification Details to the Audit Specification
            </summary>
            <param name="auditSpecificationDetails"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.RemoveAuditSpecificationDetail(Microsoft.SqlServer.Management.Smo.AuditSpecificationDetail)">
            <summary>
            Remove an Audit Specification Detail from the Audit Specification
            </summary>
            <param name="auditSpecificationDetail"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.RemoveAuditSpecificationDetail(System.Collections.Generic.ICollection{Microsoft.SqlServer.Management.Smo.AuditSpecificationDetail})">
            <summary>
            Removes a collection of Audit Specification Details from the Audit Specification
            </summary>
            <param name="auditSpecificationDetails"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.AddRemoveAuditSpecificationDetail(System.Collections.Generic.ICollection{Microsoft.SqlServer.Management.Smo.AuditSpecificationDetail},System.Boolean,System.Boolean)">
            <summary>
            Add/Remove a collection of Audit Specification Details to/from the Audit Specification
            </summary>
            <param name="auditSpecificationDetails"></param>
            <param name="add"></param>
            <param name="useDb"></param>
            <returns>script to add/remove details</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the script to create an Audit Specification with no actions to audit.
            If the audit specification already exists, it will script the actions added too.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the script to drop an Audit Specification
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the script to alter an Audit Specification
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.Enable">
            <summary>
            Enable an Audit Specification
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.Disable">
            <summary>
            Disable an Audit Specification
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AuditSpecification.EnableDisable(System.Boolean)">
            <summary>
            Enable or Disable an Audit Specification
            </summary>
            <param name="enable">true enables the audit specification</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AuditSpecification.Name">
            <summary>
            Name of the Audit Specification
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AuditSpecification.AuditSpecificationDetailsList">
            <summary>
            Used for storing those Audit Specification Details which are yet to be persisted into the server.
            Is useful only at create time.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAuditSpecification.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAuditSpecification.Name">
            <summary>
            Name of Audit Specification
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseDdlTrigger">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/DdlTrigger
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ITextObject">
            <summary>
            Interface implemented by all instance classes that have all or a part of
            their definition as text
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ITextObject.ScriptHeader(System.Boolean)">
            <summary>
            Generates a script that contains the header of the object (name, parameter list etc.)
            </summary>
            <param name="forAlter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ITextObject.ScriptHeader(Microsoft.SqlServer.Management.Smo.ScriptNameObjectBase.ScriptHeaderType)">
            <summary>
            Generates a script that contains the header of the object (name, parameter list etc.)
            </summary>
            <param name="scriptHeaderType"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ITextObject.TextBody">
            <summary>
            Returns the text body of the object (what follows after the AS keyword).
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ITextObject.TextHeader">
            <summary>
            Returns the header of the object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ITextObject.TextMode">
            <summary>
            Gets or sets the mode in which we operate with this object's text. True means
            the text contains the entire definition of the object, false means that it
            contains only the body (so the header is defined trhough the parameter list and
            other properties).
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DdlTriggerBase.CreateOrAlter">
            <summary>
            Create OR ALTER the object. First perform an internal check for existence. If object exists, take CREATE path; Otherwise take ALTER path.
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DdlTriggerBase.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseDdlTrigger.AddDdlTriggerEvents(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            adds the events to the for clause of the ddl
            </summary>
            <param name="sb"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseDdlTrigger.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseDdlTrigger.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/DatabaseEncryptionKey
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.Create">
            <summary>
            Creates a new DEK object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.Alter">
            <summary>
             Alters an already existing DEK object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.Drop">
            <summary>
            Drops an already existing DEK object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.Script">
            <summary>
            Scripts object with default scripting options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Scripts object with specific scripting options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.Regenerate(Microsoft.SqlServer.Management.Smo.DatabaseEncryptionAlgorithm)">
            <summary>
            Regenerates the DEK with the specified Encryption Algorithm
            </summary>
            <param name="encryptAlgo"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.Reencrypt(System.String,Microsoft.SqlServer.Management.Smo.DatabaseEncryptionType)">
            <summary>
            Reencrypts teh DEK with the specified Encryptor
            </summary>
            <param name="encryptorName"></param>
            <param name="encryptionType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.GetEncryptionAlgorithm(Microsoft.SqlServer.Management.Smo.DatabaseEncryptionAlgorithm)">
            <summary>
            Returns the string corresponding to the specified Encryption Algorithm
            </summary>
            <param name="encryptAlgo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseEncryptionKey.GetEncryptionType(Microsoft.SqlServer.Management.Smo.DatabaseEncryptionType)">
            <summary>
            Returns the string corresponding to the specified Encryptor type
            </summary>
            <param name="encryptionType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseMirroringPayload">
            <summary>
            Instance class encapsulating : Server[@Name='']/Endpoint/DatabaseMirroring
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EndpointPayload.ScriptAuthenticationAndEncryption(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            Generates a script for the AUTHENTICATION and ENCRYPTION clauses
            in the payload DDL. this is shared by ServiceBroker and DatabaseMirroring payloads
            </summary>
            <param name="sb"></param>
            <param name="so"></param>
            <param name="needsComma"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseOptions">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Option
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseOptions.SetSnapshotIsolation(System.Boolean)">
            <summary>
            Enables or disables snapshot isolation for the current database
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseReplicaState">
            <summary>
            Instance class encapsulating : Server[@Name='']/AvailabilityGroup/DatabaseReplicaState
            </summary>
            <summary>
            This class represents the runtime state of a database that's participating in an availability group.
            This database may be located on any of the replicas that compose the availability group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseReplicaState.AvailabilityReplicaServerName">
            <summary>
            Gets the name of the Availability Replica Server
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseReplicaState.AvailabilityDatabaseName">
            <summary>
            Gets the name of the Availability Database
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseRole">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Role
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseRole.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseRole.ScriptAddToRole(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Script string to add this role to the given database role.
            </summary>
            <param name="role">The database role to add this current database role to.</param>
            <returns>The DDL string to add this database role to the given database role.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseRole.AddToRole(System.String)">
            <summary>
            Add this role to the given database role.
            This is currently private since it was not already in the public interface but should be someday.
            </summary>
            <param name="role">The database role to add this current database role to.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseRole.EnumRoles">
            <summary>
            Return the list of database roles the given database role is a member of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseRole.EnumAgentProxyAccounts">
            <summary>
             Retrieves ProxyAccounts associated with msdb role
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseRole.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the permission scripting.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseRole.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseRole.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseRole.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DataFile">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/FileGroup/File
            </summary>
            <summary>
             This class incapsulates a database data file
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseFile">
            <summary>
             Base class for DataFile and LogFile
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseFile.Shrink(System.Int32,Microsoft.SqlServer.Management.Smo.ShrinkMethod)">
            <summary>
             Shrinks a dbfile or a log file
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataFile.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataFile.SetOffline">
            <summary>
            Brings the file offline. CAUTION: A file set to OFFLINE can only be set 
            online by restoring the file from a previously existing backup
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataFile.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Default">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Default
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.BindToColumn(System.String,System.String,System.String)">
            <summary>
            Binds the default or rule to a column.
            </summary>
            <param name="tablename"></param>
            <param name="colname"></param>
            <param name="tableschema"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.BindToColumn(System.String,System.String)">
            <summary>
            Binds the default or rule to a column.
            </summary>
            <param name="tablename"></param>
            <param name="colname"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.BindToDataType(System.String,System.Boolean)">
            <summary>
            This method enables a default or rule on the user-defined data type specified.
            </summary>
            <param name="datatypename"></param>
            <param name="bindcolumns"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.UnbindFromColumn(System.String,System.String)">
            <summary>
            This method breaks the binding between a default or rule and the column of a table.
            </summary>
            <param name="tablename"></param>
            <param name="colname"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.UnbindFromColumn(System.String,System.String,System.String)">
            <summary>
            This method breaks the binding between a default or rule and the column of a table.
            </summary>
            <param name="tablename"></param>
            <param name="colname"></param>
            <param name="tableschema"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.UnbindFromDataType(System.String,System.Boolean)">
            <summary>
            This method breaks the binding between a default or rule and a user-defined data type.
            </summary>
            <param name="datatypename"></param>
            <param name="bindcolumns"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.EnumBoundColumns">
            <summary>
            Enumerates columns bound to this default or rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.EnumBoundDataTypes">
            <summary>
            Enumerates data types bound to this default or rule.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.Create">
            <summary>
            Creates the object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.Drop">
            <summary>
            Drops the object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.Script">
            <summary>
            Scripts the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultRuleBase.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Scripts object with specific scripting optiions.
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Default.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Default.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DefaultConstraint">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Column/Default
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultConstraint.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultConstraint.Rename(System.String)">
            <summary>
            Renames the object
            </summary>
            <param name="newname">New default constraint name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultConstraint.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DefaultConstraint.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Endpoint">
            <summary>
            Instance class encapsulating : Server[@Name='']/Endpoint
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Endpoint.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Endpoint.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Endpoint.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExtendedProperty">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/ExtendedProperty
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExtendedProperty.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExtendedProperty.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExtendedStoredProcedure">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ExtendedStoredProcedure
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExtendedStoredProcedure.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExtendedStoredProcedure.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalDataSource">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ExternalDataSource
            </summary>
            <summary>
             Represents a SQL server external data source object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.#ctor(Microsoft.SqlServer.Management.Smo.Database,System.String,Microsoft.SqlServer.Management.Smo.ExternalDataSourceType,System.String)">
            <summary>
            Parameterized constructor - populates properties from parameter values.
            Overloaded constructor to set all external data source required properties.
            </summary>
            <param name="parent">The name of the parent database.</param>
            <param name="name">The name of the external data source.</param>
            <param name="dataSourceType">The external data source type: HADOOP.</param>
            <param name="location">The external data source location.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.Alter">
            <summary>
            Alter an external data source object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.Create">
            <summary>
            Create an external data source object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.Drop">
            <summary>
            Drop an external data source object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.Script">
            <summary>
            Generate a script for the external data source.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Generate a script for the external data source using the
            specified scripting options.
            </summary>
            <param name="scriptingOptions">The scripting options.</param>
            <returns>A string collection representing the T-SQL script.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Constructs a T-SQL string to drop an external data source object.
            </summary>
            <param name="dropQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Constructs the T-SQL string to create an external data source object.
            </summary>
            <param name="createQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Constructs the T-SQL string to alter an external data source object.
            </summary>
            <param name="alterQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.ValidatePropertySet(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Validates the specified property is not null and has a
            non-null value.
            Throws exception, 
                if the property is null, or 
                its value is null or an emptry string.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.ValidatePropertyUnset(System.String,Microsoft.SqlServer.Management.Smo.ExternalDataSourceType,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Validates the specified property is not set for a given data source type.
            Throws exception, 
                if the property is not null, and it's value is not null or an empty string.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="dataSourceType">The type of external data source.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalDataSource.ValidateResourceManagerLocation(System.String,System.String)">
            <summary>
            Validates that the ResourceManageLocation property is not specified for 
            the external data stored in WASB, secure WASB, ASV, or secure ASV.
            If the resource manager location is specified and the external data location is WASB(S) or ASV(S),
            throws an exception, as the resource manager location is only supported for external data stored in Hadoop.
            </summary>
            <param name="externalDataSourceResourceManagerLocaiton">The external data source resource manager location.</param>
            <param name="externalDataSourceLocation">The external data source location.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalDataSource.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalDataSource.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalDataSource.UrnSuffix">
            <summary>
            Returns the name of the object type in the urn expression.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalFileFormat">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ExternalFileFormat
            </summary>
            <summary>
             Represents a SQL server External File Format object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.#ctor(Microsoft.SqlServer.Management.Smo.Database,System.String,Microsoft.SqlServer.Management.Smo.ExternalFileFormatType)">
            <summary>
            Parameterized constructor - populates properties from parameter values.
            Overloaded constructor to set all external file format required properties.
            </summary>
            <param name="parent">The name of the parent database.</param>
            <param name="name">The name of the external file format.</param>
            <param name="formatType">The external file format type.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.Create">
            <summary>
            Create an external file format object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.Drop">
            <summary>
            Drop an external file format object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.Script">
            <summary>
            Generate a script for the external file format.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Generate a script for the external file format using the
            specified scripting options.
            </summary>
            <param name="scriptingOptions">The scripting options.</param>
            <returns>A string collection representing the T-SQL script.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Constructs a T-SQL string to drop an external file format object.
            </summary>
            <param name="dropQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Constructs the T-SQL string to create an external file format object.
            </summary>
            <param name="createQuery">A string collection representing the script. Since no
            batching is required, the collection will have only one string.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.AddPropertyToScript(System.String,System.String,System.Text.StringBuilder)">
            <summary>
            Adds a property to the specified T-SQL script.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="sqlString">The formated T-SQL string to insert the property value.</param>
            <param name="fileFormatOptions">The T-SQL script to add the formated property value.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.CheckConflictingProperties(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Checks for conflicting properties for the specified external file format type.
            If a conflicting configuration is detected, throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.IsPropertyDefaultValue``1(Microsoft.SqlServer.Management.Smo.Property,``0,System.Collections.Generic.List{``0})">
            <summary>
            Check the specified property if it has the default value.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="prop">The property to check.</param>
            <param name="value">The property value to check.</param>
            <param name="defaultValues">The default property values.</param>
            <returns>True, if the property value has the default value.  False otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.ProcessOptionalProperties(Microsoft.SqlServer.Management.Smo.ExternalFileFormatType,System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Processes optional properties for each of the supported file format types
            and adds them to the T-SQL script.
            </summary>
            <param name="externalFileFormatType">The external file format type.</param>
            <param name="script">The external file format T-SQL script.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.ValidateDelimitedTextProperties(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Validates optional properties for the DelimtedText file format
            and adds them to the T-SQL script.
            </summary>
            <param name="script">The external file format T-SQL script.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.ValidateOptionalProperty``1(System.String,System.String,System.Collections.Generic.List{``0},System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            Validates the specified property that it is not the default value and adds it to the T-SQL script.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="sqlString">The T-SQL script to add.</param>
            <param name="defaultValues">The default property values.</param>
            <param name="fileFormatOptions">The T-SQL script with the already added file format options.</param>
            <param name="sp">The scripting preferences.</param>
            <param name="quotePropertyValue">If true, the property value would be quoted as SQL string (like: N'') else not.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.ValidateOrcOrParquetProperties(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Validates optional properties for the Orc or Parquet file format
            and adds them to the T-SQL script.
            </summary>
            <param name="script">The external file format T-SQL script.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.ValidateProperty(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Validates the specified property is not null.
            Throws exception, if the property is null.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.ValidateRcFileProperties(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Validates optional properties for the RcFile file format
            and adds them to the T-SQL script.
            </summary>
            <param name="script">The external file format T-SQL script.</param>
            <param name="sp">The scripting preferences.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalFileFormat.UrnSuffix">
            <summary>
            Returns the name of the object type in the urn expression.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalResourcePool">
            <summary>
            Instance class encapsulating : Server[@Name='']/ResourceGovernor/ExternalResourcePool
            </summary>
            <summary>
            Represents a SQL server external resource pool object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.ExternalResourcePool"/> class.
            </summary>
            <param name="parentColl">Parent Collection.</param>
            <param name="key">The key.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.Create">
            <summary>
            Creates this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.Drop">
            <summary>
            Drops this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.Alter">
            <summary>
            Alters this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates queries for creating external resource pool
            </summary>
            <param name="queries">Queries string collection</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts the alter operation.
            </summary>
            <param name="queries">T-SQL string fragment</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts the drop operation.
            </summary>
            <param name="queries">T-SQL string fragment</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.GetAllParams(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Int32@)">
            <summary>
            Retrieve the properties that were set and generate appropriate T-SQL fragments
            </summary>
            <param name="sb">T-SQL string fragment</param>
            <param name="so">Scripting Options</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.Name">
            <summary>
            Name of the external resource pool
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalResourcePool.UrnSuffix">
            <summary>
            Gets the urn suffix in the urn expression
            </summary>
            <value>The urn suffix.</value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FileGroup">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/FileGroup
            </summary>
            <summary>
             Represents a sql server database filegroup
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FileGroup.#ctor(Microsoft.SqlServer.Management.Smo.Database,System.String,Microsoft.SqlServer.Management.Smo.FileGroupType)">
            <summary>
            Constructor that takes in the filegroup type.
            
            This constructor handles the different version issues:
                - Katmai and before, only rows and partitions scheme file group types supported.
                - KJ and Denali, file stream file group type added.
                - Denali+, Memory optimized data file group type added.
            </summary>
            <param name="database"></param>
            <param name="name"></param>
            <param name="fileGroupType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FileGroup.#ctor(Microsoft.SqlServer.Management.Smo.Database,System.String,System.Boolean)">
            <summary>
            Constructor that takes a Boolean value indicating if the FileGroup is of type FileStream or not.
            In case isFileStream is true, FileStreamDataFileGroup type will be used
            otherwise RowsFileGroup will be used
            </summary>
            <param name="database"></param>
            <param name="name"></param>
            <param name="isFileStream"></param>
            <remarks>This constructor is kept for consistency, it's recommended to specify FileGroupType when creating a FileGroup</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FileGroup.Drop">
            <summary>
             Drop the filegroup and all the files in the filegroup.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FileGroup.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ForeignKey">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/ForeignKey
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ForeignKey.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ForeignKey.AddReferentioalAction(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Text.StringBuilder,System.String,System.String)">
            see fk syntax:
            | [ FOREIGN KEY ]
            	REFERENCES [ schema_name . ] referenced_table_name [ ( ref_column ) ]
            	[ ON DELETE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ]
            	[ ON UPDATE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ]
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ForeignKey.Rename(System.String)">
            <summary>
            Rename the index
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ForeignKey.ScriptRename(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.String)">
            <summary>
            Generates script for the Rename operation.
            </summary>
            <param name="renameQuery"></param>
            <param name="so"></param>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ForeignKey.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ForeignKey.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ForeignKeyColumn">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/ForeignKey/Column
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ForeignKeyColumn.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ForeignKeyColumn.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FullTextCatalog">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/FullTextCatalog
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextCatalog.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextCatalog.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts permissions for this object. returns without scripting anything if source version is less
            than 9 since permissions on FullTextCatalogs were not supported in 8.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextCatalog.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextCatalog.EnumErrorLogs">
            <summary>
            Returns a list of error logs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextCatalog.ReadErrorLog">
            <summary>
            Reads the current error log.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextCatalog.ReadErrorLog(System.Int32)">
            <summary>
            Reads the log specified by logNumber.
            </summary>
            <param name="logNumber"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextCatalog.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextCatalog.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextCatalog.Name">
            <summary>
            Name of FullTextCatalog
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FullTextIndex">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/FullTextIndex
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextIndex.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextIndex.Refresh">
            <summary>
            Refresh the object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextIndex.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextIndex.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextIndex.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FullTextIndexColumn">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/FullTextIndex/FullTextIndexColumn
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextIndexColumn.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextIndexColumn.Name">
            <summary>
            Name of FullTextIndexColumn
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FullTextService">
            <summary>
            Instance class encapsulating : Server[@Name='']/FullTextService
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextService.Name">
            <summary>
            Name of FullTextService
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FullTextStopList">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/FullTextStopList
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.Create">
            <summary>
            Creates a new stoplist object without any source stoplist
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.CreateFromExistingStopList(System.String)">
            <summary>
            Creates a new stoplist from an existing source stoplist in the current database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.CreateFromExistingStopList(System.String,System.String)">
            <summary>
            Creates a new stoplist from an existing source stoplist in the different database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.CreateFromSystemStopList">
            <summary>
            Creates a new stoplist from the system default stoplist
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.Drop">
            <summary>
            Drops the stoplist
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.Script">
            <summary>
            Scripts object with default scripting options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Scripts object with specific scripting options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.EnumStopWords">
            <summary>
            Returns the datatable for the enumerated stopwords in the existing stoplist
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.HasStopWord(System.String,System.String)">
            <summary>
            Returns true if the specified stopword is present in the stoplist with the specified full text language otherwise false
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.AddStopWord(System.String,System.String)">
            <summary>
            Adds the specified stopword with the specified full-text language to the stoplist
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FullTextStopList.RemoveStopWord(System.String,System.String)">
            <summary>
            Removes the specified stopword with the specified full-text language from the stoplist
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.FullTextStopList.RemoveAllStopWords" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.FullTextStopList.RemoveAllStopWords(System.String)" -->
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextStopList.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextStopList.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FullTextStopList.Name">
            <summary>
            Name of FullTextStopList
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.HttpProtocol">
            <summary>
            Instance class encapsulating : Server[@Name='']/Endpoint/Http
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Index">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Index
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.m_IndexedXmlPaths">
            <summary>
            Collection of IndexedXMLPath objects that represent all the paths
            that are indexed by the Selective XML Index.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.m_IndexedXmlPathNamespaces">
            <summary>
            Collection of IndexedXMLPath objects that represent all the paths
            that are indexed by the Selective XML Index.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.m_PhysicalPartitions">
            <summary>
            Collection class instance for the PhysicalPartitions of the table
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.CheckIndexTypeAllowsModification(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Indexes of a memory optimized table can only be created along with table and cannot be modified after creation
            For that, we need to make sure that if IndexType has a value and it's not set to memory optimized indexes. If
            The optional parameter 'sp' is not passed in, throw the 'ScriptMemoryOptimizedIndex' error.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.GetDDL(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean,System.Boolean)">
            <summary>
            This method is called for Table, and Index creation.
            </summary>
            <param name="so">Scriptingoptions</param>
            <param name="creating">This flag is set to true when an index is created,
            or a table constraint is added. For table creation it is false</param>
            <param name="tableCreate">Set to true for table creation with inline constraints\Indexes.</param>
            <returns>A script representing the requested object (Index, table, or constraint portion.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IsCompressionCodeRequired(System.Boolean)">
            <summary>
            This method just check whether compression related code is required or not.
            </summary>
            <param name="bAlter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IsGraphPseudoColumn(System.String)">
            <summary>
            This method determines if the column name is a graph pseudo column name.
            A pseudo column is an alias for a column that a user cannot specify as a normal
            name in a create index statement because they start with the symbol '$'.
            </summary>
            <param name="name">The column name.</param>
            <returns>TRUE if the column name is a pseudo column name.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.CheckUnsupportedSXI(System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Raises FailedOperationException if index is SXI or SSXI.
            </summary>
            <param name="checkPrimarySXI">Should exception be raised if index is SXI</param>
            <param name="checkSecondarySXI">Should exception be raised if index is SSXI</param>
            <param name="operation">Operation which raised exception</param>
            <param name="reason">Reason for exception</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Alter">
            <summary>
            Changes the index based on supplied index properties
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Alter(Microsoft.SqlServer.Management.Smo.IndexOperation)">
            <summary>
            Performs an index operation using the current property settings of the object.
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.AlterAllIndexes">
            <summary>
            Changes all indexes based on supplied index properties.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.optimizePartitionNumber">
            <summary>
            Hint parameter for Rebuild() or Reorganize() function. If this value is -1 then it means
            rebuild or reorganize all the partition
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Rebuild(System.Int32)">
            <summary>
            Rebuild particular partition
            </summary>
            <param name="partitionNumber"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Rebuild">
            <summary>
            Re-creates the index based on the current property settings.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Resume">
            <summary>
            Resume the resumable index that is in the PAUSED status.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Abort">
            <summary>
            Abort the resumable index that is in the PAUSED status.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Pause">
            <summary>
            Pause the resumable index that is running.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.RebuildAllIndexes">
            <summary>
            Re-creates all indexes based on the current property settings.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.UpgradeToClusteredColumnStoreIndex">
            <summary>
            Upgrades a Clustered Rowstore index to Clustered Columnstore Index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Rename(System.String)">
            <summary>
            Rename the index
            </summary>
            <param name="newname"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.ScriptRename(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.String)">
            <summary>
            Generates script for the Rename operation.
            </summary>
            <param name="renameQuery"></param>
            <param name="so"></param>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Reorganize(System.Int32)">
            <summary>
            Reorganizes the index based on the current property settings.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.ReorganizeAllIndexes">
            <summary>
            Reorganizes all indexes based on the current property settings.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Disable">
            <summary>
            Disables the index.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Enable(Microsoft.SqlServer.Management.Smo.IndexEnableAction)">
            <summary>
            Enables the index. The action argument specifies how enable the index.
            It is possible to call Create() or Rebuild() instead, to enable the index.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.CheckIndex">
            <summary>
            Tests the integrity of database pages implementing storage for the referenced index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.CheckIndexWithResult">
            <summary>
            Tests the integrity of database pages that store data for the referenced index.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.EnumStatistics">
            <summary>
            The EnumStatistics method returns a DataSet object that enumerates index statistics used to support Microsoft® SQL Server™ 2000 query optimization
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.RecalculateSpaceUsage">
            <summary>
            Forces the update of data reporting the disk resource usage of the referenced index.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.resumableMaxDuration">
            <summary>
            Specifies the MAX_DURATION for the resumable operation option of the
            DDL operation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.lowPriorityMaxDuration">
            <summary>
            Specifies the MAX_DURATION for the WAIT_AT_LOW_PRIORITY option of the
            DDL operation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.lowPriorityAbortAfterWait">
            <summary>
            Specifies the ABORT_AFTER_WAIT action for the WAIT_AT_LOW_PRIORITY option of the
            DDL operation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.compactLargeObjects">
            <summary>
            This property is not persisted in the database. It is an
            option passed in for the ALTER INDEX REORGANIZE command.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Index.compressAllRowGroups">
            <summary>
            This property is not persisted in the database. It is an
            option passed in for the ALTER INDEX REORGANIZE command.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.UpdateStatistics">
            <summary>
            forces data distribution statistics update for a referenced index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsScanType)">
            <summary>
            forces data distribution statistics update for a referenced index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsScanType,System.Int32)">
            <summary>
            forces data distribution statistics update for a referenced index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsScanType,System.Int32,System.Boolean)">
            <summary>
            forces data distribution statistics update for a referenced index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.DropAndMove(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Drops a clustered index and moves the underlying table data to the partition
            scheme with the parameters specified with partitionSchemeParameters.
            </summary>
            <param name="partitionScheme"></param>
            <param name="partitionSchemeParameters"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.DropAndMove(System.String)">
            <summary>
            Drops a clustered index and moves the underlying table data
            to the specified File Group.
            </summary>
            <param name="fileGroup"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.Refresh">
            <summary>
            Refresh the object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.GetScriptFields2(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns the additional expensive fields that will be needed to script this object based on preference
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <param name="sp">The scripting preference</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IsLargeObject(Microsoft.SqlServer.Management.Smo.SqlDataType)">
            <summary>
            Verifies whether the SqlDatatype is LOB or Large UDT
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.IndexedXmlPaths">
            <summary>
            Collection of IndexedXMLPath objects that represent all the paths
            that are indexed by the Selective XML Index.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.IndexedXmlPathNamespaces">
            <summary>
            Collection of IndexedXMLPath objects that represent all the paths
            that are indexed by the Selective XML Index.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.PartitionSchemeParameters">
            <summary>
            Specifies the columns that define the input parameters for the Partition Scheme.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.CompressionDelay">
            <summary>
            Compression Delay valid only for columnstore indexes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.InferredIndexType">
            <summary>
            Finds and gets IndexType
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.SortInTempdb">
            <summary>
            Specifies that the intermediate sort results used to build the index will be
            stored in the tempdb database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.OnlineIndexOperation">
            <summary>
            Specifies that the index that is created or modified will be kept online
            during the operation, allowing access to the underlying data structures.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.ResumableIndexOperation">
            <summary>
            Sepcifies whether the index is resumable.
            The resumable index can be resume/abort if it is paused during the rebuild operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.ResumableMaxDuration">
            <summary>
            Gets or sets the MAX_DURATION for the resumable operation option of the
            DDL operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.LowPriorityMaxDuration">
            <summary>
            Gets or sets the MAX_DURATION for the WAIT_AT_LOW_PRIORITY option of the
            DDL operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.LowPriorityAbortAfterWait">
            <summary>
            Gets or sets the ABORT_AFTER_WAIT action for the WAIT_AT_LOW_PRIORITY option of the
            DDL operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.MaximumDegreeOfParallelism">
            <summary>
            Set the maximum number of processors involved in the index operation.
            The system default is used if not set.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.CompactLargeObjects">
            <summary>
            Compact LOB data, such as text, image, varchar(MAX), nvarchar(MAX) and varbinary.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.CompressAllRowGroups">
            <summary>
            Compress open row groups (delta stores) as well.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.IsIndexOnTable">
            <summary>
            The IndexOnTable property specifies whether an index is defined for a table or a view.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.IsIndexOnComputed">
            <summary>
            The IsOnComputed property indicates whether any column in an index is a computed column.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.IsMemoryOptimizedIndex">
            <summary>
            Indicates if the index belongs to a memory optimized table.
            We need to rely on this getter instead of its SMO property(IsMemoryOptimized) while the index is being created.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Index.IsSqlDwIndex">
            <summary>
            Indicates if the index belongs to a SQL DW table.
            We need to rely on this getter instead of the SMO property(DwTableDistribution) while the index is being created.
            </summary>
            <returns>True, if the index is a SQL DW table index; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.CheckSpatialProperties">
            <summary>
            Check spatial properties are not set for non spatial index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.CheckXmlProperties">
            <summary>
            Check xml properties are not set for non xml index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.CheckNonClusteredProperties">
            <summary>
            Check non clustered properties are not set for non applicable index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.CheckClusteredProperties">
            <summary>
            Check clustered properties are not set for non applicable index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.CheckRegularIndexProperties">
            <summary>
            Check row index properties are not set for non applicable index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.CheckConstraintProperties">
            <summary>
            Check constraint properties are not set for non constraint index
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.GetCreateScript">
            <summary>
            Generates the index script.
            </summary>
            <returns>The generated index script.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.ScriptIndexOptionOnline(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Scripts the ONLINE index option.
            </summary>
            <param name="sb">The StringBuilder to append the options</param>
            <param name="forRebuild">Specifies if this is a rebuild operation</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.ScriptWaitAtLowPriorityIndexOption(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Scripts the WAIT_AT_LOW_PRIORITY option for the Online Index Rebuild.
            </summary>
            <param name="sb">The StringBuilder to append the options</param>
            <param name="forRebuild">Specifies if this is a rebuild operation</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.ScriptWaitAtLowPriorityIndexOptionForDropAndResume(System.Text.StringBuilder)">
            <summary>
            Scripts the WAIT_AT_LOW_PRIORITY option for the index Drop and Resume
            </summary>
            <param name="sb">The StringBuilder to append the options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.ScriptColumns(System.Text.StringBuilder)">
            <summary>
            Scripts the index columns.
            </summary>
            <param name="sb">The script to append the scripted index columns.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.ScriptColumn(Microsoft.SqlServer.Management.Smo.IndexedColumn,System.Text.StringBuilder)">
            <summary>
            Scripts out the indexed column.
            </summary>
            <param name="col">The indexed column.</param>
            <param name="sb">The script builder to append the columns to.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.ScriptFilter(System.Text.StringBuilder)">
            <summary>
            Script the filter predicate
            </summary>
            <param name="sb">The string builder to hold the script</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.GetRebuildScript(System.Boolean,System.Int32)">
            <summary>
            Get the tsql script of the index rebuild operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.GetResumeScript">
            <summary>
            Get the tsql script of the index resume operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.ScriptIndexResumeOptions(System.Text.StringBuilder)">
            <summary>
            Get the options for the resume operation. </summary>
            <param name="sb">String builder for collecting the options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.GetAbortOrPauseScript(System.Boolean)">
            <summary>
            Get the tsql script of the index abort/pause operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.GetMemoryOptimizedIndexScripter(Microsoft.SqlServer.Management.Smo.Index,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Gets the IndexScripter for a Memory Optimized index based on the Index Type
            </summary>
            <param name="index"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.IndexScripter.GetSqlDwIndexScripter(Microsoft.SqlServer.Management.Smo.Index,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Gets the IndexScripter for a SQL DW index based on the Index Type.
            </summary>
            <param name="index">The SQL DW index.</param>
            <param name="sp">The scripting preferences.</param>
            <returns>The IndexScripter for the SQL DW index type.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Index.HashIndexScripter">
            <summary>
            Class is specialized for scripting hash indexes and keys
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Index.RangeIndexScripter">
            <summary>
            Class is specialized for scripting range indexes and keys
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Index.UserDefinedTableTypeIndexScripter">
            <summary>
            Class is specialized for scripting indexes on user defined table type
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Index.SelectiveXMLIndexScripter">
             <summary>
             Index scripter for Selective Xml Index (SXI)
             </summary>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.SelectiveXMLIndexScripter.CheckInvalidOptions">
            <summary>
            Invalid options should go here. Also update ExceptionTemplates.strings
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.SelectiveXMLIndexScripter.ScriptSelectiveIndexPath(Microsoft.SqlServer.Management.Smo.IndexedXmlPath,System.Text.StringBuilder)">
            <summary>
            Scripting XmlPath
            </summary>
            <param name="path">Path added to index</param>
            <param name="sb">String builder</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Index.SecondarySelectiveXMLIndexScripter">
             <summary>
             Scripter for secondary Selective Xml Index
             </summary>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.SecondarySelectiveXMLIndexScripter.CheckInvalidOptions">
            <summary>
            Invalid options should go here. Also update ExceptionTemplates.strings
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Index.ClusteredColumnstoreIndexScripter">
            <summary>
            Class is specialized for scripting clustered columnstore indexes
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Index.ClusteredColumnstoreIndexScripter.ScriptIndexStorage(System.Text.StringBuilder)">
            <summary>
            Scripts the index storage options.
            </summary>
            <param name="sb">The string builder.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexedColumn">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Index/IndexedColumn
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IndexedColumn.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IndexedColumn.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexedXmlPath">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Index/IndexedXmlPath
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IndexedXmlPath.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IndexedXmlPath.DataType">
            <summary>
            Datatype of SQL values in path item.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IndexedXmlPath.UrnSuffix">
            <summary>
            Returns the value of urn expresion.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexedXmlPathNamespace">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Index/IndexedXmlPathNamespace
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IndexedXmlPathNamespace.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IndexedXmlPathNamespace.UrnSuffix">
            <summary>
            Returns the value of urn expresion.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Information">
            <summary>
            Instance class encapsulating : Server[@Name='']/Information
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.Job">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/Job
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Create">
            <summary>
            Create
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Drop(System.Boolean)">
            <summary>
            Drop
            </summary>
            <param name="keepUnusedSchedules"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Drop">
            <summary>
            Drop
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Alter">
            <summary>
            Alter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Rename(System.String)">
            <summary>
            Rename
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.ApplyToTargetServer(System.String)">
            <summary>
            ApplyToTargetServer adds an execution target to the list of targets 
            maintained for the referenced Agent job.
            </summary>
            <param name="serverName">Name of the target server. When null or
            empty string the job is applied against local server.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.ApplyToTargetServerGroup(System.String)">
            <summary>
            ApplyToTargetServerGroup adds one or more execution targets to the 
            list of targets maintained for the referenced Agent job.
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.EnumAlerts">
            <summary>
            This method returns a DataTable object that enumerates the 
            Agent alerts that cause automated execution of the referenced job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.EnumHistory(Microsoft.SqlServer.Management.Smo.Agent.JobHistoryFilter)">
            <summary>
            This method returns a DateTable object that enumerates the 
            execution history of the referenced  Agent job.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.EnumHistory">
            <summary>
            This method returns a DateTable object that enumerates the 
            execution history of the referenced Agent job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.EnumJobStepLogs">
            <summary>
            This method returns a DateTable object that enumerates the job step execution 
            output logs if they were saved to the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.EnumJobStepLogs(System.Int32)">
            <summary>
            This method returns a DateTable object that enumerates the job step execution 
            output logs if they were saved to the table filtering by step ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.EnumJobStepLogs(System.String)">
            <summary>
            This method returns a DateTable object that enumerates the job step execution 
            output logs if they were saved to the table filtering by step name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.EnumTargetServers">
            <summary>
            This method returns a DateTable object that enumerates the execution 
            targets of the referenced Agent job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.EnumJobStepsByID">
            <summary>
            EnumJobStepsByID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.DeleteJobStepLogs(System.DateTime)">
            <summary>
            Delete job step logs old than specified date
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.DeleteJobStepLogs(System.Int32)">
            <summary>
            Delete job step logs before certain log number
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Invoke">
            <summary>
            Executes the job.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.PurgeHistory">
            <summary>
            This method removes system records maintaining execution history 
            for the referenced Agent job.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.AddSharedSchedule(System.Int32)">
            <summary>
            AddSharedSchedule
            </summary>
            <param name="scheduleID"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.GetJobScheduleByID(System.Int32)">
            <summary>
            Get schedule object associated with this job for given schedule Id
            if invalid id is passed in, ItemById() API can return null
            this helper method throws missing object exception if get into that situation
            </summary>
            <param name="scheduleId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.RemoveSharedSchedule(System.Int32)">
            <summary>
            RemoveSharedSchedule
            </summary>
            <param name="scheduleID"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.RemoveSharedSchedule(System.Int32,System.Boolean)">
            <summary>
            RemoveSharedSchedule
            </summary>
            <param name="scheduleID"></param>
            <param name="keepUnusedSchedules"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.RemoveAllJobSchedules">
            <summary>
            RemoveAllJobSchedules
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.RemoveAllJobSchedules(System.Boolean)">
            <summary>
            RemoveAllJobSchedules
            </summary>
            <param name="keepUnusedSchedules"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.RemoveAllJobSteps">
            <summary>
            RemoveAllJobSteps
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.RemoveFromTargetServer(System.String)">
            <summary>
            RemoveFromTargetServer
            </summary>
            <param name="serverName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.RemoveFromTargetServerGroup(System.String)">
            <summary>
            RemoveFromTargetServerGroup
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Start(System.String)">
            <summary>
            Start
            </summary>
            <param name="jobStepName">starting job step</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Job.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Agent.Job.JobSteps">
            <summary>
            JobSteps
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Agent.Job.JobSchedules">
            <summary>
            JobSchedules
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.JobCategory">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/JobCategory
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.JobSchedule">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/Job/Schedule
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobSchedule.Drop(System.Boolean)">
            <summary>
            Drop
            </summary>
            <param name="keepUnusedSchedule"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobSchedule.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobSchedule.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobSchedule.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.JobServer">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.GetJobByID(System.Guid)">
            <summary>
            The GetJobByID method returns a SQL-DMO Job object referencing the SQL Server Agent job identified by the specified job identifier.
            </summary>
            <param name="jobID"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.RemoveJobByID(System.Guid)">
            <summary>
            The RemoveJobByID method drops the SQLServerAgent job identified and removes the referencing Job object from the Jobs collection.
            </summary>
            <param name="jobID"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.RemoveJobsByLogin(System.String)">
            <summary>
            The RemoveJobsByLogin method drops all SQLServerAgent jobs owned by the login identified and removes the referencing Job objects from the Jobs collection.
            </summary>
            <param name="jobID"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.TestMailProfile(System.String)">
            <summary>
            Tests the mail profile. Returns true when a failure occurs. In that case the 
            errorMessage will contain the related error message.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.TestNetSend">
            <summary>
            Tests the net send. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.PurgeJobHistory">
            <summary>
            Purges the entire job history.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.SetHostLoginAccount(System.String,System.String)">
            <summary>
            Sets the SQL Server Account and Password that is used to login to SQL Server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.ClearHostLoginAccount">
            <summary>
            Clears the SQL Server account and use integrated security to login to SQL Server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.SetMsxAccount(System.String,System.String)">
            <summary>
            Sets the master server account. This is available only for SQL Server 2000.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.SetMsxAccount(System.String)">
            <summary>
            Sets the master server account credential name that is used to store the MSX account information. This is available only for SQL Server 2005.
            </summary>
            <param name="credentialName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.ClearMsxAccount">
            <summary>
            Clears the master server account ands use integrated security 
            to login to the master server. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.CycleErrorLog">
            <summary>
            Cycles SQLAgent error log
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.EnumErrorLogs">
            <summary>
            Gets the Agent error logs
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.ReadErrorLog">
            <summary>
            Reads the current Agent error log
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.ReadErrorLog(System.Int32)">
            <summary>
            Reads the specified Agent error log
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.EnumJobHistory(Microsoft.SqlServer.Management.Smo.Agent.JobHistoryFilter)">
            <summary>
            The EnumHistory method returns a DataTable object that enumerates the 
            execution history of all jobs.
            </summary>
            <param name="filter">A JobHistoryFilter object that restricts result 
            set membership.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.EnumJobs(Microsoft.SqlServer.Management.Smo.Agent.JobFilter)">
            <summary>
            The EnumJobs method returns a DataTable object that enumerates all 
            jobs defined for a server.
            </summary>
            <param name="filter">A JobFilter object that restricts result set 
            membership.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.FilterJobsByExecutionStatus(Microsoft.SqlServer.Management.Smo.Agent.JobFilter,System.Data.DataTable@)">
            <summary>
            Filter Jobs by current Execution status
            </summary>
            <param name="filter"></param>
            <param name="jobsTable"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.FilterJobsByJobType(Microsoft.SqlServer.Management.Smo.Agent.JobFilter,System.Data.DataTable@)">
            <summary>
            Filter Jobs by current Job Type
            </summary>  
            <param name="filter"></param>
            <param name="jobsTable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.FilterJobsBySubSystem(Microsoft.SqlServer.Management.Smo.Agent.JobFilter,System.Data.DataTable@)">
            <summary>
            Filter Jobs  - Look  if any one of the step has given subsystem type
            </summary>
            <param name="filter"></param>
            <param name="jobsTable"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.EnumSubSystems">
            <summary>
            The EnumSubSystems method returns a DataTable object that 
            enumerates installed execution subsystems.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.MsxDefect">
            <summary>
            The MSXDefect method ends SQL Server Agent participation in a 
            multiserver administration group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.MsxDefect(System.Boolean)">
            <summary>
            The MSXDefect method ends SQL Server Agent participation in a 
            multiserver administration group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.MsxEnlist(System.String,System.String)">
            <summary>
            The MSXEnlist method initiates SQL Server Agent participation as a 
            target for multiserver administration.
            </summary>
            <param name="masterServer">String naming a registered instance of 
            SQL Server.The instance must be configured as a multiserver 
            administration master server.</param>
            <param name="location">String documenting the enlisting server's 
            location. Used for user assistance only.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.PurgeJobHistory(Microsoft.SqlServer.Management.Smo.Agent.JobHistoryFilter)">
            <summary>
            The PurgeJobHistory method removes system records maintaining 
            execution history for all jobs, or those matching the filter 
            criteria specified.
            </summary>
            <param name="filter">A JobHistoryFilter object that constrains 
            record removal to those records identified by the criteria set 
            in the object.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.ReassignJobsByLogin(System.String,System.String)">
            <summary>
            The ReAssignJobsByLogin method changes ownership for any 
            SQLServerAgent jobs currently owned by a login.
            </summary>
            <param name="oldLogin">String that specifies a login currently 
            owning jobs.</param>
            <param name="newLogin">String that specifies a login with job 
            creation rights. The login specified will receive ownership.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.DropJobByID(System.Guid)">
            <summary>
            Drops the SQLServerAgent job identified and removes the referencing 
            Job object from the Jobs collection.
            </summary>
            <param name="jobid"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.DropJobsByLogin(System.String)">
            <summary>
            Drops all SQLServerAgent jobs owned by the login identified and removes 
            the referencing Job objects from the Jobs collection.
            </summary>
            <param name="login"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.DropJobsByServer(System.String)">
            <summary>
            Drops all the jobs that originate on the specified server
            </summary>
            <param name="serverName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.StartMonitor(System.String,System.Int32)">
            <summary>
            The StartMonitor method begins monitoring of the local SQLServerAgent 
            service by an instance of SQL Server.
            </summary>
            <param name="netSendAddress"></param>
            <param name="restartAttempts"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobServer.StopMonitor">
            <summary>
            The StopMonitor method ends monitoring of the local SQLServerAgent 
            service by an instance of SQL Server.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.JobStep">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/Job/Step
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobStep.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobStep.EnumLogs">
            <summary>
            This method returns a DateTable object that enumerates the job step execution 
            output logs if they were saved to the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobStep.DeleteLogs(System.DateTime)">
            <summary>
            Delete job step logs older than specified date
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobStep.DeleteLogs(System.Int32)">
            <summary>
            Delete job step logs before certain log number
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobStep.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobStep.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Language">
            <summary>
            Instance class encapsulating : Server[@Name='']/Language
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Language.Day(System.DayOfWeek)">
            <summary>
            The Day property returns the text string representing the name of a day in the referenced language.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Language.ShortMonth(Microsoft.SqlServer.Management.Smo.Month)">
            <summary>
            The ShortMonth property returns an abbreviation for the name of a month from an installed 
            Microsoft� SQL Server� 2000 language.
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Language.Month(Microsoft.SqlServer.Management.Smo.Month)">
            <summary>
            The Month property returns the text string representing the name of a month in the referenced language.
            </summary>
            <param name="month"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LinkedServer">
            <summary>
            Instance class encapsulating : Server[@Name='']/LinkedServer
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.DropIfExists(System.Boolean)">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
            <param name="dropDependentLogins">Drop dependent linked server logins.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumColumns">
            <summary>
            enumerates the columns of tables defined on a linked server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumColumns(System.String)">
            <summary>
            enumerates the columns of tables defined on a linked server
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumColumns(System.String,System.String)">
            <summary>
            enumerates the columns of tables defined on a linked server
            </summary>
            <param name="tableName"></param>
            <param name="schemaName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumColumns(System.String,System.String,System.String)">
            <summary>
            enumerates the columns of tables defined on a linked server
            </summary>
            <param name="tableName"></param>
            <param name="schemaName"></param>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumColumns(System.String,System.String,System.String,System.String)">
            <summary>
            enumerates the columns of tables defined on a linked server
            </summary>
            <param name="tableName"></param>
            <param name="schemaName"></param>
            <param name="databaseName"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumTables">
            <summary>
            enumerates the tables of a linked server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumTables(System.String)">
            <summary>
            enumerates the tables of a linked server
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumTables(System.String,System.String)">
            <summary>
            enumerates the tables of a linked server
            </summary>
            <param name="tableName"></param>
            <param name="schemaName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumTables(System.String,System.String,System.String)">
            <summary>
            enumerates the tables of a linked server
            </summary>
            <param name="tableName"></param>
            <param name="schemaName"></param>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServer.EnumTables(System.String,System.String,System.String,Microsoft.SqlServer.Management.Smo.LinkedTableType)">
            <summary>
            enumerates the tables of a linked server
            </summary>
            <param name="tableName"></param>
            <param name="schemaName"></param>
            <param name="databaseName"></param>
            <param name="tableType"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.LinkedServer.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.LinkedServer.Name">
            <summary>
            Name of LinkedServer
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.LinkedServer.ProviderString">
            <summary>
            ProviderString property
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LinkedServerLogin">
            <summary>
            Instance class encapsulating : Server[@Name='']/LinkedServer/Login
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.LinkedServerLogin.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.LinkedServerLogin.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.LinkedServerLogin.Name">
            <summary>
            Name of linked server login
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LogFile">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/LogFile
            </summary>
            <summary>
             This class incapsulates a database log file
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.LogFile.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Login">
            <summary>
            Instance class encapsulating : Server[@Name='']/Login
            </summary>
            <summary>
             This class represents a SqlServer login
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.EnumCredentials">
            <summary>
            Gets the Collection of Credential Names mapped to the login.
            This method would always execute the select queries on the server even when ExecutionManager.ConnectionContext.SqlExecutionModes is set only to CaptureSql.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ChangePassword(System.String)">
            <summary>
            Changes login password, effective immediate on the server.
            </summary>
            <param name="newPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ChangePassword(System.Security.SecureString)">
            <summary>
            Changes login password using SecureString, effective immediate on the server.
            </summary>
            <param name="newPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ChangePassword(System.String,System.String)">
            <summary>
            Changes login password, effective immediate on the server.
            </summary>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ChangePassword(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Changes login password using SecureString, effective immediate on the server.
            </summary>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ChangePassword(System.String,System.Boolean,System.Boolean)">
            <summary>
            Changes the password. The unlock parameter indictates if the account needs to be unlocked.
            The mustChange parameter indicates whether the user has to change the password on the next Login.</summary>
             <param name="newPassword"></param>
             <param name="unlock"></param>
             <param name="mustChange"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ChangePassword(System.Security.SecureString,System.Boolean,System.Boolean)">
            <summary>
            Changes the password using SecureString. The unlock parameter indictates if the account needs to be unlocked.
            The mustChange parameter indicates whether the user has to change the password on the next Login.</summary>
             <param name="newPassword"></param>
             <param name="unlock"></param>
             <param name="mustChange"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Create">
            <summary>
            Creates the object on the server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Create(System.String)">
            <summary>
            Creates the object on the server.
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Create(System.Security.SecureString)">
            <summary>
            Creates the object on the server.
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Create(System.String,Microsoft.SqlServer.Management.Smo.LoginCreateOptions)">
            <summary>
            Creates the object on the server.
            </summary>
            <param name="password">Password.</param>
            <param name="options">Combination of additional options for password such as IsHashed or MushChange.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Create(System.Security.SecureString,Microsoft.SqlServer.Management.Smo.LoginCreateOptions)">
            <summary>
            Creates the object on the server.
            </summary>
            <param name="password">Password.</param>
            <param name="options">Combination of additional options for password such as IsHashed or MushChange.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ScriptCreateCheck(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             Generate the script to check the server to see if the given login can be created.
             This is intended to be executed in a transcation and rolld back, to check actual syntax as well as semantic context.
             </summary>
             <param name="query"></param>
             <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            generates the scripts for creating the login</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ListMembers">
            <summary>
             List the roles in which this login is a member
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.EnumDatabaseMappings">
            <summary>
             Enumerates the database mappings for this login
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.IsMember(System.String)">
            <summary>
             Returns true if the login is a member of the role given as argument
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.GetDatabaseUser(System.String)">
            <summary>
             Returns the user for this login in the specified database
            </summary>
             <returns>The name of the user mapped to this login in the specified database, or an empty string
             if no such user exists.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting optiions</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.AddToRole(System.String)">
            <summary>
            Add the login to the specified role.</summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.EnumAgentProxyAccounts">
            <summary>
             Retrieves ProxyAccounts associated with login
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Disable">
            <summary>
            Disable Login if version >= 9. Otherwise, throw an exception.
            This is not part of Login.Alter because LOGIN [] ENABLE|DISABLE has to be issued by itself
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Enable">
            <summary>
            Enable Login if version >= 9. Otherwise, throw an exception.
            This is not part of Login.Alter because LOGIN [] ENABLE|DISABLE has to be issued by itself
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.Refresh">
            <summary>
            Refresh the Login
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.AddCredential(System.String)">
            <summary>
            Adds a credential to the login
            </summary>
            <param name="credentialName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.DropCredential(System.String)">
            <summary>
            Drops a credential
            </summary>
            <param name="credentialName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.ScriptAddDropCredential(System.Boolean,System.String)">
            <summary>
            Generates the script to add/drop credentials
            </summary>
            <param name="add"></param>
            <param name="credentialName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Login.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the permission scripting.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Login.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Login.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Login.UrnSuffix">
            <summary>
            returns the name of the type in the urn expression</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.MailAccount">
            <summary>
            Instance class encapsulating : Server[@Name='']/Mail/MailAccount
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.Create">
            <summary>
            Create object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.GetAccountProfileNames">
            <summary>
            Used to check whether this account is currently being used by any profiles or not, and
            in case of being used, it returns a list of profiles which are using it
            Never return NULL. Return empty (zero element) array if no profiles exist
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.Alter">
            <summary>
            Alter object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.Drop">
            <summary>
            Drop object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.Rename(System.String)">
            <summary>
            Rename object
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.mailServers">
            <summary>
            Collection of mail server objects
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Mail.MailAccount.IsBusyAccount">
            <summary>
            Used to check whether this account is currently being used for sending emails which are
            in the mail queue or not.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.MailProfile">
            <summary>
            Instance class encapsulating : Server[@Name='']/Mail/MailProfile
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.Create">
            <summary>
            Create object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.Alter">
            <summary>
            Alter object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.Drop">
            <summary>
            Drop object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.Rename(System.String)">
            <summary>
            Rename object
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.AddAccount(System.String,System.Int32)">
            <summary>
            Adds profile-account association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.RemoveAccount(System.String)">
            <summary>
            Removes profile-account association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.EnumAccounts">
            <summary>
            Retrieves accounts associated with this profile
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.AddPrincipal(System.String)">
            <summary>
            Adds profile-principal association, assuming this profile will be the default
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.AddPrincipal(System.String,System.Boolean)">
            <summary>
            Adds profile-principal association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.RemovePrincipal(System.String)">
            <summary>
            Removes profile-principal association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.EnumPrincipals">
            <summary>
            Retrieves principal associated with this profile
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Mail.MailProfile.IsBusyProfile">
            <summary>
            Used to check whether this profile is currently being used for sending emails which are
            in the mail queue or not.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.MailServer">
            <summary>
            Instance class encapsulating : Server[@Name='']/Mail/MailAccount/MailServer
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Mail.MailServer.noCredentialChange">
            <summary>
            The value of "noCredentialChange" is passed to the parameter @no_credential_change
            of the sp "dbo.sysmail_update_account_sp"
            
              noCredentialChange=false vs @no_credential_change=0
              noCredentialChange=true  vs @no_credential_change=1
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailServer.SetAccount(System.String,System.String)">
            <summary>
            Sets server authentication information
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailServer.SetAccount(System.String,System.Security.SecureString)">
            <summary>
            Sets server authentication information
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailServer.SetPassword(System.String)">
            <summary>
            Sets server authentication password
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailServer.SetPassword(System.Security.SecureString)">
            <summary>
            Sets server authentication password
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailServer.Alter">
            <summary>
            Alter object properties
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailServer.Rename(System.String)">
            <summary>
            Rename the object
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailServer.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.MailServer.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.MasterKey">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/MasterKey
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.MasterKey.encryptionPwd">
            password used to create the master key
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.MasterKey.decryptionPwd">
            password used to decrypt the master key
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Create(System.String)">
            <summary>
            Creates a masterkey. The password specifies the password the master key 
            is encrypted with.
            </summary>
            <param name="encryptionPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Create(System.String,System.String,System.String)">
            <summary>
            Creates a master key from a file. The password specifies the password with 
            which the file was encrypted, and it will be thw new password for the key
            </summary>
            <param name="path"></param>
            <param name="decryptionPassword"></param>
            <param name="encryptionPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Drop">
            <summary>
            Drops the master key from the database.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Import(System.String,System.String,System.String)">
            <summary>
            Loads the service master key from the specified file. 
            </summary>
            <param name="path"></param>
            <param name="decryptionPassword"></param>
            <param name="encryptionPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Import(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Loads the service master key from the specified file. 
            </summary>
            <param name="path"></param>
            <param name="decryptionPassword"></param>
            <param name="encryptionPassword"></param>
            <param name="forceRegeneration"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Export(System.String,System.String)">
            <summary>
            Saves the service master key to a file, encrypted with the supplied password. 
            </summary>
            <param name="path"></param>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.AddPasswordEncryption(System.String)">
            <summary>
            Add encryption by password.
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.AddServiceKeyEncryption">
            <summary>
            Add encryption by service master key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Close">
            <summary>
            Closes any opened master keys in the database.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Open(System.String)">
            <summary>
            Opens the database master key, using the key that is associated 
            with the specified password.
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.DropPasswordEncryption(System.String)">
            <summary>
            Removes the encryption with the key associated with the specified password.
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.DropServiceKeyEncryption">
            <summary>
            Removes the encryption by the service key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Regenerate(System.String)">
            <summary>
            Regenerates the database master key using the specified password.
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.Regenerate(System.String,System.Boolean)">
            <summary>
            Regenerates the database master key using the specified password. 
            If the force parameter is set to true, the database master key 
            will be regenerated forcefully. This will cause all secrets 
            that cannot be decrypted by the old database master key to be dropped.
            </summary>
            <param name="password"></param>
            <param name="forceRegeneration"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MasterKey.EnumKeyEncryptions">
            <summary>
            Returns the current set of key encryptions of the database master key.
            Note: uses enumerator Urn Server/Database/MasterKey/Encryption
            </summary>
            <returns>
            Name	Type	Description	Source
            Urn	System.String	The Urn for this record.	
            Thumbprint	System.Byte[]	SHA-1 hash of the certificate with which the key is encrypted OR The guid of the symmetric key with which the key is encrypted.	
            SymmetricKeyEncryptionType	SymmetricKeyEncryptionType	Indicates the type of encryption.	
            CryptProperty	System.Byte[]	Signed or encrypted bits.	
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.MasterKey.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.MessageType">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/MessageType
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Broker.MessageType.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.MessageType.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.MessageTypeMapping">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/ServiceContract/MessageTypeMapping
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.MessageTypeMapping.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.MessageTypeMapping.Name">
            <summary>
            Name of message type mapping
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumberedStoredProcedure">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/StoredProcedure/Numbered
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumberedStoredProcedure.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumberedStoredProcedure.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureParameter">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/StoredProcedure/Numbered/Param
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Parameter">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedFunction/Param
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ParameterBase.CheckParamName(System.String)">
            <summary>
            Check parameter name for validaton
            </summary>
            <param name="paramName">parameter name</param>
            <remarks>First character should be @ sign and the rest characters should follow the regular identifier rule.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ParameterBase.MakeSqlStringIfRequired(System.String)">
            <summary>
            method to convert default values of types which can contain space
            like datetime and char types to sqlstring
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ParameterBase.isParentClrImplemented">
            <summary>
            Check if it is for direct execution i.e. create/alter/drop or parent is CLR type
            </summary>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Parameter.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureParameter.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureParameter.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.OleDbProviderSettings">
            <summary>
            Instance class encapsulating : Server[@Name='']/Setting/OleDbProviderSetting
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.OleDbProviderSettings.Name">
            <summary>
            Name of OleDbProviderSetting
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.Operator">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/Operator
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.AddNotification(System.String,Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods)">
            <summary>
            The AddNotification method associates operators with alerts. 
            Operators designated receive notification messages when an event 
            raising the alert occurs.
            </summary>
            <param name="alertName"></param>
            <param name="notifymethod"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.RemoveNotification(System.String)">
            <summary>
            The RemoveNotification method drops all SQLServerAgent alert 
            notification assignments for an operator.
            </summary>
            <param name="alertName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.UpdateNotification(System.String,Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods)">
            <summary>
            The UpdateNotification method configures SQL Server Agent operator 
            notification for alerts raised.
            </summary>
            <param name="alertName"></param>
            <param name="notifymethod"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.EnumNotifications">
            <summary>
            EnumNotifications method returns a DataTable object that enumerates 
            notification alerts for a given operator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.EnumNotifications(Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods)">
            <summary>
            EnumNotifications method returns a DataTable object that enumerates 
            notification alerts for a given operator.
            </summary>
            <param name="notifyMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.EnumNotifications(System.String)">
            <summary>
            EnumNotifications method returns a DataTable object that enumerates 
            notification alerts for a given operator.
            </summary>
            <param name="alertName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.EnumNotifications(Microsoft.SqlServer.Management.Smo.Agent.NotifyMethods,System.String)">
            <summary>
            EnumNotifications method returns a DataTable object that enumerates 
            notification alerts for a given operator.
            </summary>
            <param name="notifyMethod"></param>
            <param name="alertName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.EnumJobNotifications">
            <summary>
            The EnumJobNotifications method returns a DataTable object that 
            enumerates notifications made by SQLServerAgent on completion 
            of job execution.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.Operator.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.OperatorCategory">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/OperatorCategory
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.OrderColumn">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedFunction/OrderColumn
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitionFunction">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/PartitionFunction
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PartitionFunction.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PartitionFunction.Refresh">
            <summary>
             refreshes the object's properties by reading them from the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PartitionFunction.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionFunction.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionFunction.Name">
            <summary>
            Name of PartitionFunction
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionFunction.ExtendedProperties">
            <summary>
            Collection of extended properties for this object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitionFunctionParameter">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/PartitionFunction/PartitionFunctionParameter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PartitionFunctionParameter.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionFunctionParameter.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionFunctionParameter.Name">
            <summary>
            Name of PartitionFunctionParameter
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitionScheme">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/PartitionScheme
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PartitionScheme.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PartitionScheme.ResetNextUsed">
            <summary>
            Resets the NEXT USED status of the filegroup that has been marked as NEXT USED.
            If no partition scheme has been marked as such, the method will silently ignore this.
            May only be used on an existing Partition Scheme.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PartitionScheme.Refresh">
            <summary>
             refreshes the object's properties by reading them from the server
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PartitionScheme.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionScheme.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionScheme.Name">
            <summary>
            Name of PartitionScheme
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionScheme.ExtendedProperties">
            <summary>
            Collection of extended properties for this object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionScheme.FileGroups">
            <summary>
            Collection of File Groups to which data for this scheme's destination is being mapped.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitionSchemeParameter">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/PartitionSchemeParameter
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionSchemeParameter.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PartitionSchemeParameter.Name">
            <summary>
            Name of PartitionSchemeParameter
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PhysicalPartition">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/PhysicalPartition
            </summary>
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/PartitionFunction
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartition.#ctor(Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.Int32,Microsoft.SqlServer.Management.Smo.DataCompressionType)">
            <summary>
            PhysicalPartition constructor which take initialization parameter, parent reference, 
            partition number, and compression type.
            </summary>
            <param name="parent"></param>
            <param name="partitionNumber"></param>
            <param name="dataCompressionType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartition.#ctor(Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.Int32)">
            <summary>
            Constructor for PhysicalPartition class which take parent and partitionNumber
            as initialization variable
            </summary>
            <param name="parent"></param>
            <param name="partitionNumber"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlServer.Management.Smo.PhysicalPartition.RightBoundaryValue" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlServer.Management.Smo.PhysicalPartition.RangeType" -->
        <member name="T:Microsoft.SqlServer.Management.Smo.PlanGuide">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/PlanGuide
            </summary>
            <summary>
             Represents a sql server database plan
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PlanGuide.Alter">
            <summary>
            Alter plan.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PlanGuide.Create">
            <summary>
            Create Plan.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PlanGuide.Drop">
            <summary>
             Drop plan.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PlanGuide.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PlanGuide.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PlanGuide.ValidatePlanGuide">
            <summary>
            Validate Plan Guide
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PlanGuide.ValidatePlanGuide(System.Data.DataRow@)">
            <summary>
            Validate Plan Guide
            </summary>
            <param name="dr">out parameter</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/ProxyAccount
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.AddSubSystem(Microsoft.SqlServer.Management.Smo.Agent.AgentSubSystem)">
            <summary>
            Adds proxy-subsystem association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.RemoveSubSystem(Microsoft.SqlServer.Management.Smo.Agent.AgentSubSystem)">
            <summary>
            Removes proxy-subsystem association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.EnumSubSystems">
            <summary>
            Retrieves subsystems associated with this proxy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.AddLogin(System.String)">
            <summary>
            Adds proxy-login association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.RemoveLogin(System.String)">
            <summary>
            Removes proxy-Login association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.EnumLogins">
            <summary>
            Retrieves logins associated with this proxy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.AddServerRole(System.String)">
            <summary>
            Adds proxy-server role association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.RemoveServerRole(System.String)">
            <summary>
            Removes proxy-server role association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.EnumServerRoles">
            <summary>
            Retrieves server roles associated with this proxy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.AddMsdbRole(System.String)">
            <summary>
            Adds proxy-msdb role association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.RemoveMsdbRole(System.String)">
            <summary>
            Removes proxy-msdb role association
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.EnumMsdbRoles">
            <summary>
            Retrieves msdb roles associated with this proxy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccount.Reassign(System.String)">
            <summary>
            Reassign job steps that refer to current proxy account name to a new proxy account name
            supported on SQL 11 onwards - depends on stored proc 'sp_reassign_proxy' in msdb
            </summary>
            <param name="targetProxyAccountName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.QueryStoreOptions">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/QueryStoreOptions
            </summary>
            <summary>
            QueryStore Options Smo Object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.QueryStoreOptions.ScriptQueryStoreOptions(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            Script out the QDS options for enabling/disabling the feature. 
            
            ALTER DATABASE [$(DatabaseName)] SET QUERY_STORE = ON|OFF
            
            {
                ALTER DATABASE [$(DatabaseName)] SET QUERY_STORE (
                    OPERATION_MODE = OFF|READ_ONLY|READ_WRITE ,
                    CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = ##) ,
                    DATA_FLUSH_INTERVALS_SECONDS = ## ,
                    INTERVAL LENGTH MINUTES = ## ,
                    MAX_STORAGE_SIZE_MB = ## ,
                    QUERY_CAPTURE_MODE = ALL|AUTO ,
                    SIZE_BASED_CLEANUP_MODE = OFF|AUTO )
            }
            </summary>
            <param name="query"></param>
            <param name="sp"></param>
            <param name="scriptAll"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.QueryStoreOptions.PurgeQueryStoreData">
            <summary>
            Clears all Query Store data from the owning database
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.QueryStoreOptions.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.QueryStoreOptions.Parent">
            <summary>
            Parent, Database object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBinding">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/RemoteServiceBinding
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBinding.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBinding.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ResourceGovernor">
            <summary>
            Instance class encapsulating : Server[@Name='']/ResourceGovernor
            </summary>
            <summary>
            Class that handles Altering and Scripting the current state of Resource Governor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.#ctor(Microsoft.SqlServer.Management.Smo.Server,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.ResourceGovernor"/> class.
            </summary>
            <param name="parentsrv">SMO Server instance.</param>
            <param name="key">The key.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.Alter">
            <summary>
            Alters this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.Script">
            <summary>
            Scripts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting optiions
            </summary>
            <param name="so">Scripting Options</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.GetUrnRecursive(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.UrnIdOption)">
            <summary>
            Gets the Full Urn by traversing parent hierarchy
            </summary>
            <param name="urnbuilder">The urnbuilder.</param>
            <param name="idOption">The id option.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates Queries for Create operation
            </summary>
            <param name="queries">Queries string collection</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates Queries for Alter operation
            </summary>
            <param name="queries">Queries string collection</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.ScriptProperties(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates corresponding T-SQL based on the set properties
            </summary>
            <param name="queries">Queries string collection</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourceGovernor.HasEnabledPropertyChanged(System.Boolean)">
            <summary>
            Checks if Enable property was changed
            </summary>
            <param name="newValue">new value</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourceGovernor.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourceGovernor.Parent">
            <summary>
            Gets the parent Object. In this case it is Server
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourceGovernor.ResourcePools">
            <summary>
            Gets the resource pool Collection
            </summary>
            <value>The resource pools.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourceGovernor.ExternalResourcePools">
            <summary>
            Gets the external resource pool Collection
            </summary>
            <value>The external resource pools.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourceGovernor.UrnSuffix">
            <summary>
            Gets the urn suffix in the urn expression
            </summary>
            <value>The urn suffix.</value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ResourcePool">
            <summary>
            Instance class encapsulating : Server[@Name='']/ResourceGovernor/ResourcePool
            </summary>
            <summary>
            Class that handles Creating, Altering, Dropping and Scripting the Resource Pool instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.ResourcePool"/> class.
            </summary>
            <param name="parentColl">Parent Collection.</param>
            <param name="key">The key.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.Create">
            <summary>
            Creates this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.Drop">
            <summary>
            Drops this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.Alter">
            <summary>
            Alters this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates Queries for Creating Resource Pool
            </summary>
            <param name="queries">Queries string collection</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts the alter operation.
            </summary>
            <param name="queries">T-SQL string fragment</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Scripts the drop operation.
            </summary>
            <param name="queries">T-SQL string fragment</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.TouchImpl">
            <summary>
            Touch all the properties of this object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.MarkDropped">
            <summary>
            Marks the children(Workloadgroup collection) as dropped.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResourcePool.GetAllParams(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Int32@)">
            <summary>
            Retrieve the properties that were set and generate appropriate T-SQL fragments
            </summary>
            <param name="sb">T-SQL string fragment</param>
            <param name="so">Scripting Options</param>
            <param name="count">The count.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourcePool.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourcePool.Name">
            <summary>
            Name of ResourcePool
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourcePool.UrnSuffix">
            <summary>
            Gets the urn suffix in the urn expression
            </summary>
            <value>The urn suffix.</value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ResumableIndex">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/ResumableIndex
            </summary>
            <summary>
            The partial definition of the ResumableIndex class.
            https://docs.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-index-resumable-operations
            https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-index-transact-sql 
            https://docs.microsoft.com/en-us/sql/t-sql/statements/create-index-transact-sql 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResumableIndex.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Constructs ResumableIndex object.
            </summary>
            <param name="parentColl">Parent collection.</param>
            <param name="key">Object key.</param>
            <param name="state">Object state.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResumableIndex.Abort">
            <summary>
            Aborts the resumable index operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResumableIndex.Pause">
            <summary>
            Pauses the resumable index operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResumableIndex.Resume">
            <summary>
            Resumes the resumable index operation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ResumableIndex.resumableMaxDuration">
            <summary>
            Specifies the overall MAX_DURATION for the resumable operation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ResumableIndex.lowPriorityMaxDuration">
            <summary>
            Specifies the max amount of time in minutes to wait at low priority.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ResumableIndex.lowPriorityAbortAfterWait">
            <summary>
            Specifies the ABORT_AFTER_WAIT action for the WAIT_AT_LOW_PRIORITY option of the
            resumable index operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ResumableIndex.PauseOrAbort(System.Boolean)">
            <summary>
            Scripts and executes a pause/abort on the resumable index.
            </summary>
            <param name="isAbort"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResumableIndex.ResumableMaxDuration">
            <summary>
            Gets or sets the overall MAX_DURATION for the resumable operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResumableIndex.LowPriorityMaxDuration">
            <summary>
            Gets or sets the MAX_DURATION for the WAIT_AT_LOW_PRIORITY option of the
            resumable index operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResumableIndex.LowPriorityAbortAfterWait">
            <summary>
            Gets or sets the ABORT_AFTER_WAIT action for the WAIT_AT_LOW_PRIORITY option of the
            resumable index operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResumableIndex.UrnSuffix">
            <summary>
            Returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Rule">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Rule
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Rule.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Rule.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Schema">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Schema
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Schema.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Schema.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Schema.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Schema.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SearchProperty">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/SearchPropertyList/SearchProperty
            </summary>
            <summary>
            SMO class for Search Properties in a Search Property List
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchProperty.Script">
            <summary>
            Scripts object with default scripting options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchProperty.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Scripts object with specific scripting options
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SearchProperty.Name">
            <summary>
            Name of SearchProperty
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SearchPropertyList">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/SearchPropertyList
            </summary>
            <summary>
            SMO class for Search Property List
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyList.Create">
            <summary>
            Creates a new property list object without any source stoplist
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyList.Create(System.String)">
            <summary>
            Creates a new property list from an existing source property list in the current database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyList.Create(System.String,System.String)">
            <summary>
            Creates a new property list from an existing source property list in the different database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyList.Drop">
            <summary>
            Drops the stoplist
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyList.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyList.Script">
            <summary>
            Scripts object with default scripting options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyList.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Scripts object with specific scripting options
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SearchPropertyList.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SearchPropertyList.Name">
            <summary>
            Name of SearchPropertyList
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SecurityPolicy">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/SecurityPolicy
            </summary>
            <summary>
             Represents a sql server Security Policy object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.#ctor(Microsoft.SqlServer.Management.Smo.Database,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Parameterized constructor - populates properties from parameter values.
            </summary>
            <param name="parent">The parent Database</param>
            <param name="name">The name of the security policy</param>
            <param name="schema">The schema of the security policy</param>
            <param name="notForReplication">Whether or not the security policy is marked for replication</param>
            <param name="isEnabled">Whether the security policy is enabled or disabled</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.Drop">
            <summary>
            Drop the Security Policy.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.Create">
            <summary>
            Create the Security Policy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.Script">
            <summary>
            Script the Security Policy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.Alter">
            <summary>
            Alter the Security Policy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.GetPropagateInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction)">
            <summary>
            Propagate states, but not actions to SecurityPredicates.
            </summary>
            <returns>The collection of child SecurityPredicates to update. </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPolicy.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object. This is used by transfer.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPolicy.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPolicy.UrnSuffix">
            <summary>
            returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPolicy.Schema">
            <summary>
            The schema of the Security Policy
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPolicy.Name">
            <summary>
            The name of the Security Policy
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPolicy.SecurityPredicates">
            <summary>
            The collection of security predicates for this security policy.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPolicy.ExtendedProperties">
            <summary>
            Collection of extended properties for this object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SecurityPredicate">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/SecurityPolicy/SecurityPredicate
            </summary>
            <summary>
             Represents a sql server security predicate object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.#ctor(Microsoft.SqlServer.Management.Smo.SecurityPolicy,Microsoft.SqlServer.Management.Smo.Table,System.String)">
            <summary>
            Parameterized constructor for creating a security predicate which targets a table.
            Populates properties from parameter values.
            </summary>
            <param name="parent">The parent security policy</param>
            <param name="table">The table to which this predicate applies</param>
            <param name="predicateDefinition">The predicate definition as a string</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.#ctor(Microsoft.SqlServer.Management.Smo.SecurityPolicy,System.String,System.String,System.Int32,System.String)">
            <summary>
            Parameterized constructor - populates properties from parameter values.
            </summary>
            <param name="parent">The parent security policy</param>
            <param name="targetObjectSchema">The schema which owns the target object</param>
            <param name="targetObjectName">The target object name</param>
            <param name="targetObjectId">The target object's object id</param>
            <param name="predicateDefinition">The predicate definition as a string</param>
            <remarks>This constructor allows creation of security predicates against views and other object types.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.MarkForDrop(System.Boolean)">
            <summary>
            Marks or unmarks the Security Predicate for drop on the next alter called on the parent policy
            </summary>
            <param name="dropOnAlter">Whether the predicate should be marked for drop.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.Drop">
            <summary>
            Drop the Security Predicate
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.Create">
            <summary>
            Create the Security Predicate this will fail unless the parent Security Policy has been created.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.Alter">
            <summary>
            Alter the Security Policy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.ScriptPredicate(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            Scripts out the security predicate based on the current state of the predicate for a create or alter security policy statement.
            </summary>
            <param name="sb">A stringbuilder with the target alter query.</param>
            <param name="sp">The scripting preferences.</param>
            <param name="forCreate">Whether we are scripting a security policy create, in which case we should always default to ADD.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicate.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object. This is used by transfer.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPredicate.PredicateDefinition">
            <summary>
            Gets or sets the predicate definition.  The getter will remove any unnecessary parentheses.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseScopedConfiguration">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/DatabaseScopedConfiguration
            </summary>
            <summary>
            The partial definition of the DatabaseScopedConfiguration class.
            https://msdn.microsoft.com/en-us/library/mt629158.aspx
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedConfiguration.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Constructs DatabaseScopedConfiguration object.
            </summary>
            <param name="parentColl">Parent collection.</param>
            <param name="key">Object key.</param>
            <param name="state">Object state.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseScopedConfiguration.UrnSuffix">
            <summary>
            returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Sequence">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Sequence
            </summary>
            <summary>
             Represents a sql server Sequence object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.Drop">
            <summary>
            Drop the Sequence
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.Create">
            <summary>
            Create the Sequence
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.Script">
            <summary>
            Script the Sequence
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.Alter">
            <summary>
            Alter the Sequence
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.Rename(System.String)">
            <summary>
            Rename
            </summary>
            <param name="newname"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.Refresh">
            <summary>
            Refresh
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Sequence.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object. This is used by transfer.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Sequence.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Sequence.ExtendedProperties">
            <summary>
             ExtendedProperties
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Sequence.Schema">
            <summary>
            Schema of the Sequence
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Sequence.Name">
            <summary>
            Name of Sequence
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Sequence.DataType">
            <summary>
            Datatype of the Sequence
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Server">
            <summary>
            Instance class encapsulating : Server[@Name='']
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the standard behavior of scripting object permissions.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.GetStringComparer(System.String)">
            <summary>
            Returns the comparer object corresponding to the collation string passed.
            </summary>
            <param name="collationName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.Microsoft#SqlServer#Management#Sdk#Sfc#IAlienRoot#SfcHelper_GetSmoObject(System.String)">
            <summary>
            Returns the object with the corresponding Urn in string form
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.Microsoft#SqlServer#Management#Sdk#Sfc#IAlienRoot#SfcHelper_GetDataTable(System.Object,System.String,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
             <summary>
            
             Helper for SFC. Ask Enumerator for a DataTable of results given a Urn.
             </summary>
             <returns>DataTable</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.Microsoft#SqlServer#Management#Sdk#Sfc#IAlienRoot#SfcHelper_GetSmoObjectQuery(System.String,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            Helper for SFC. Query and iterator/enumerator interfaces should be the level we abstract at, but for now
            we make sure caching via InitChildLevel is done while we still give back the list of Urns.
            </summary>
            <returns>The list of SMO Urns.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.GetSmoObjectQuery(System.String,System.String[],Microsoft.SqlServer.Management.Sdk.Sfc.OrderBy[])">
            <summary>
            Execute the given query and return the list of Urns matching it.
            The objects representing the Urns are all cached for subsequent access via the usual collections and GetSmoObject.
            </summary>
            <param name="queryString">The XPath query string to satisfy.</param>
            <param name="fields">The fields to ensure are present in all leaf-type objects matched, or null for default fields.</param>
            <param name="orderByFields">The fields to order the resulting list of Urns, or null for default ordering.</param>
            <returns>The list of SMO Urns satisfying the query.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.GetSmoObject(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Returns the object with the corresponding Urn
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.Alter">
            <summary>
            Alter the metadata for the server, including dependent child objects such as Configuration, Information, and Settings.
            The Configuration class will not override value checking with this call.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.Alter(System.Boolean)">
            <summary>
            Alter the metadata for the server, including dependent child objects such as Configuration, Information, and Settings.
            </summary>
            <param name="overrideValueChecking">Boolean property value that specifies whether the Configuration changes should be installed with "RECONFIGURE WITH OVERRRIDE"</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.DetachDatabase(System.String,System.Boolean)">
            <summary>
            Detach a database
            </summary>
            <param name="name">database name</param>
            <param name="updateStat">if true statistics are updated before detach</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.DetachDatabase(System.String,System.Boolean,System.Boolean)">
            <summary>
            Detach a database
            </summary>
            <param name="name">database name</param>
            <param name="updateStat">if true statistics are updated before detach</param>
            <param name="withFullTextIndex"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.AttachDatabaseWorker(System.String,System.Collections.Specialized.StringCollection,System.String,Microsoft.SqlServer.Management.Smo.AttachOptions)">
            <summary>
            Worker function for various attach overloads
            </summary>
            <param name="name"></param>
            <param name="files"></param>
            <param name="login"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.AttachDatabase(System.String,System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Attach Database
            </summary>
            <param name="name">database name</param>
            <param name="files">list of files to attach</param>
            <param name="owner">new owner name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.AttachDatabase(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Attach Database
            </summary>
            <param name="name">database name</param>
            <param name="files">file list</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.AttachDatabase(System.String,System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.AttachOptions)">
            <summary>
            Attach Database
            </summary>
            <param name="name">database name</param>
            <param name="files">file list</param>
            <param name="attachOptions">options used when attaching database</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.AttachDatabase(System.String,System.Collections.Specialized.StringCollection,System.String,Microsoft.SqlServer.Management.Smo.AttachOptions)">
            <summary>
            Attach Database
            </summary>
            <param name="name">database name</param>
            <param name="files">file list</param>
            <param name="owner">new owner name</param>
            <param name="attachOptions">options used when attaching database</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.CompareUrn(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Compares two Urn's, taking into account the collations on the server
            </summary>
            <param name="urn1"></param>
            <param name="urn2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.EnumDatabaseMirrorWitnessRoles">
            <summary>
            Enumerates the witness roles the server plays in a database mirroring partnership
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.KillDatabase(System.String)">
            <summary>
            Drops a database. If users are connected to it their connections will be dropped.
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.KillAllProcesses(System.String)">
            <summary>
            Kills all user processes that are using the given database.
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.EnumProcesses(System.Boolean)">
            <summary>
            enumerate processes optionaly excluting the system processes
            </summary>
            <param name="excludeSystemProcesses"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.IsTraceFlagOn(System.Int32,System.Boolean)">
            <summary>
            Checks whether a trace flag is enabled on the server
            </summary>
            <param name="traceFlag">Trace flag number</param>
            <param name="isGlobalTraceFlag">A boolean value indicating whether the trace flag is global</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.EnumActiveGlobalTraceFlags">
            <summary>
            Enumerate all active global trace flags set for SQL Instance and return them as DataTable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.GetDefaultInitFields(System.Type)">
            <summary>
            returns a clone of the default init fields. This function will be deprecated. Please use the overload function.
            </summary>
            <param name="typeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.GetDefaultInitFields(System.Type,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            returns a clone of the default init fields
            </summary>
            <param name="typeObject"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.SetDefaultInitFields(System.Type,System.Collections.Specialized.StringCollection)">
            <summary>
            Set the default for the fields of the given object type. This function will be deprecated. Please use the overload function.
            </summary>
            <param name="typeObject">Type of the object</param>
            <param name="fields">List of the fields</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.SetDefaultInitFields(System.Type,System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Set the default fields of the given object type
            </summary>
            <param name="typeObject">Type of the object</param>
            <param name="fields">List of the fields</param>
            <param name="databaseEngineEdition">Database edition of the object. This is required as a Database and it children can have different properties based on the databaseEngineEdition</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.SetDefaultInitFields(System.Type,System.String[])">
            <summary>
            Set the default fields of the given object type. This function will be deprecated. Please use the overload function.
            </summary>
            <param name="typeObject">Type of the object</param>
            <param name="fields">List of the fields</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.SetDefaultInitFields(System.Type,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.String[])">
            <summary>
            Set the default fields of the given object type
            </summary>
            <param name="typeObject">Type of the object</param>
            <param name="fields">List of the fields</param>
            <param name="databaseEngineEdition">Database edition of the object. This is required a Database and it children can have different properties based on the databaseEngineEdition</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.GetPropertyNames(System.Type,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Get the Property field supported by given object type
            </summary>
            <param name="typeObject">Type of the object</param>
            <param name="databaseEngineEdition">Database edition of the object. This is required a Database and it children can have different properties based on the databaseEngineEdition</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.SetDefaultInitFields(System.Type,System.Boolean)">
            <summary>
            Set the default fields of the given object type. This function will be deprecated. Please use the overload function.
            </summary>
            <param name="typeObject">Type of the object</param>
            <param name="allFields">Should set all fields or not</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.SetDefaultInitFields(System.Type,System.Boolean,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Set the default fields of the given object type
            </summary>
            <param name="typeObject">Type of the object</param>
            <param name="allFields">Should set all fields or not</param>
            <param name="databaseEngineEdition">Database edition of the object. This is required a Database and it children can have different properties based on the databaseEngineEdition</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.DeleteBackupHistory(System.DateTime)">
            <summary>
            Deletes the entries in the backup and restore history tables for backup sets
            older than oldestDate
            </summary>
            <param name="oldestDate"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.DetachedDatabaseInfo(System.String)">
            <summary>
            The DetachedDBInfo method returns information about a detached database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.EnumDetachedDatabaseFiles(System.String)">
            <summary>
            The ListDetachedDBFiles method lists all database files referenced by a primary database file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.EnumDetachedLogFiles(System.String)">
            <summary>
            The ListDetachedLogFiles method lists all log files referenced by primary log file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.IsDetachedPrimaryFile(System.String)">
            <summary>
            The IsDetachedPrimaryFile method specifies whether a file is a detached primary database file.
            </summary>
            <param name="mdfName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.IsWindowsGroupMember(System.String,System.String)">
            <summary>
            The IsNTGroupMember method exposes an instance of Microsoft� SQL Server� 2000 access rights for Windows NT� 4.0 or Microsoft Windows 2000 user accounts.
            Cloud for now doesn't support windows logins. And Sql logins can't be member of any windows group. Hence this method is not supported for Cloud.
            </summary>
            <param name="NTGroup"></param>
            <param name="NTUser"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.EnumMembers(Microsoft.SqlServer.Management.Smo.RoleTypes)">
            <summary>
            The ListMembers method returns a NameList object that enumerates the Microsoft� SQL Server� 2000 server or database roles in which the SQLServer object login has membership.
            For SDS, there is no concept of server roles. Depending on the connection to the databases, we will get
            information about membership in the database roles. There are two special database roles in master database in SDS,
            sds_securityadmin and sds_dbcreator, membership of whose can only be got while connected to master database.
            </summary>
            <param name="roleType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.PingSqlServerVersion(System.String,System.String,System.String)">
            <summary>
            will connect to the specified serve, retrieve the version string, and disconnect before return to the caller
            This allows caller to ping the SQLServer version
            Expensive because we need to make a connection to get the info, call only when necessary
            </summary>
            <param name="pRetVal"></param>
            <param name="szServerName"></param>
            <param name="szLogin"></param>
            <param name="szPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.PingSqlServerVersion(System.String)">
            <summary>
            will connect to the specified serve, retrieve the version string, and disconnect before return to the caller
            This allows caller to ping the SQLServer version
            Expensive because we need to make a connection to get the info, call only when necessary
            </summary>
            <param name="pRetVal"></param>
            <param name="szServerName"></param>
            <param name="szLogin"></param>
            <param name="szPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.DeleteBackupHistory(System.Int32)">
            <summary>
            Deletes the entries in the backup and restore history tables for backup sets
            on mediaSetID
            </summary>
            <param name="mediaSetID"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.DeleteBackupHistory(System.String)">
            <summary>
            Deletes the entries in the backup and restore history tables for database
            </summary>
            <param name="database"></param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Server.events">
            <summary>
            ManagementScope used to manage events. We can't declare the type
            here since we can't take a dependency on System.Management
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.GetUrnRecursive(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.UrnIdOption)">
            <summary>
            Override of the Urn calculation that does not add a filter
            if we ask to use ID as a key for the object
            </summary>
            <param name="urnbuilder"></param>
            <param name="useIdAsKey"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcDomainLite#GetLogicalVersion">
            <summary>
            Returns logical version of SMO object model schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.JoinAvailabilityGroup(System.String)">
            <summary>
            This method is called on a secondary replica that has been added to an Availability Group
            from a primary to complete the handshake.
            Upon successful execution the instance will become a functioning replica in the availability
            group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.JoinAvailabilityGroup(System.String,Microsoft.SqlServer.Management.Smo.AvailabilityGroupClusterType)">
            <summary>
            This method is called on a secondary replica that has been added to an Availability Group
            from a primary to complete the handshake.
            Upon successful execution the instance will become a functioning replica in the availability
            group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.GrantAvailabilityGroupCreateDatabasePrivilege(System.String)">
            <summary>
            This method is called on a secondary replica that has joined the availability group to grant availability group create database privilege
            for automatic seeding to work
            </summary>
            <param name="availabilityGroupName">Availability group name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.RevokeAvailabilityGroupCreateDatabasePrivilege(System.String)">
            <summary>
            Revoke the create database privilege of the specified availability group
            </summary>
            <param name="availabilityGroupName">Availability group name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.SetAvailabilityGroupCreateDatabasePrivilege(System.String,System.Boolean)">
            <summary>
            Set the availability group's create database privilege
            </summary>
            <param name="availabilityGroupName">Availability group name</param>
            <param name="grantPrivilege">boolean value indicating whether to grant or revoke the privilege</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.EnumClusterSubnets">
            <summary>
            Enumerate the current state of the Windows cluster members of which the instance is a part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.EnumClusterMembersState">
            <summary>
            Enumerate the current state of the Windows cluster members of which the instance is a part of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.FileExists(System.String)">
            <summary>
            Checks whether the specified file exists
            </summary>
            <param name="filePath">The file path</param>
            <returns>A boolean value indicating whether the specified file exists</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.ParentDirectoryExists(System.String)">
            <summary>
            Checks whether the parent directory of the specified file exists
            </summary>
            <param name="filePath">The file path</param>
            <returns>A boolean value indicating whether the parent directory of specified file exists</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Server.QueryFileInformation(System.String)">
            <summary>
            Gets the information of the specified file.
             Columns in the row:
             0 - file_exists
             1 - file_is_a_directory
             2 - parent_directory_exists
            </summary>
            <param name="filePath">The file path on server</param>
            <returns>A datarow object with the information of the specified file </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Server.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Server.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Server.ConnectionContext">
            <summary>
            connection context
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Server.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcDomainLite#DomainName">
            <summary>
            Returns the SMO domain name
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Server.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcDomainLite#DomainInstanceName">
            <summary>
            Returns the instance name of this domain
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Server.SupportedAvailabilityGroupClusterTypes">
            <summary>
            Gets the supported availability group cluster types for the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Server.DefaultAvailabilityGroupClusterType">
            <summary>
            Default availability group cluster type for the server
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Server.IsMemberOfWsfcCluster">
            <summary>
            Checks whether the server is a member of WSFC cluster
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerActiveDirectory">
            <summary>
            Instance class encapsulating : Server[@Name='']/ServerActiveDirectory
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerActiveDirectory.Register">
            <summary>
            Register server with Active Directory Services
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerActiveDirectory.Register(System.Boolean)">
            <summary>
            Register server and optionally its databases with Active Directory Services
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerActiveDirectory.UpdateRegistration">
            <summary>
            Update server registration with Active Directory Services
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerActiveDirectory.Unregister">
            <summary>
            Unregister server from Active Directory Services
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerAuditSpecification">
            <summary>
            Instance class encapsulating : Server[@Name='']/ServerAuditSpecification
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAuditSpecification.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerDdlTrigger">
            <summary>
            Instance class encapsulating : Server[@Name='']/DdlTrigger
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerDdlTrigger.AddDdlTriggerEvents(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            adds the events to the for clause of the ddl
            </summary>
            <param name="sb"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerDdlTrigger.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerDdlTrigger.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerProxyAccount">
            <summary>
            Instance class encapsulating : Server[@Name='']/ServerProxyAccount
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerProxyAccount.SetPassword(System.String)">
            <summary>
            Sets the  Password that is used by the proxy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerProxyAccount.SetPassword(System.Security.SecureString)">
            <summary>
            Sets the  Password that is used by the proxy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerProxyAccount.SetAccount(System.String,System.String)">
            <summary>
            Sets the  Account and Password that is used by the proxy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerProxyAccount.SetAccount(System.String,System.Security.SecureString)">
            <summary>
            Sets the  Account and Password that is used by the proxy
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerProxyAccount.Alter">
            <summary>
            Alters object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerRole">
            <summary>
            Instance class encapsulating : Server[@Name='']/Role
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.Alter">
            <summary>
            Alters the object on the server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.Script">
            <summary>
            Scripts the object on the server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Scripts the object on the server on the basis of Scripting options.
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.Rename(System.String)">
            <summary>
            Renames the object on the server.
            </summary>
            <param name="newname"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.Create">
            <summary>
            Creates the object on the server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.Drop">
            <summary>
            Drops the object on the server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the Alter Script for Flexible Server Role.
            </summary>
            <param name="alterQuery"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.ScriptRename(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.String)">
            <summary>
            Generates the Rename Script for Server Role.
            </summary>
            <param name="renameQuery"></param>
            <param name="so"></param>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the Drop Script for Server Role.
            </summary>
            <param name="dropQuery"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates the create script for Server Role.
            </summary>
            <param name="createQuery"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.ScriptAddMembershipToRole(System.String)">
            <summary>
            Script to add this role's membership to the given server role.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.ScriptDropMembershipFromRole(System.String)">
            <summary>
            Script to drop this role's membership from the given server role.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.EnumContainingRoleNames">
            <summary>
            Enumerates Server Roles which has this server role as their member
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.AddMember(System.String)">
            <summary>
            Adds server principal with name "memberName" to member collection to this server role.
            </summary>
            <param name="memberName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.DropMember(System.String)">
            <summary>
            Drops server principal with name "memberName" from member collection of this server role.
            </summary>
            <param name="memberName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.EnumServerRoleMembers">
            <summary>
            This method will be removed in a future version of SMO. 
            This method returns a StringColleciton object that enumerates names of 
            the members of a server role. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.EnumMemberNames">
            <summary>
            This method returns a StringColleciton object that enumerates names of 
            the members of a server role. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.EnumServerRoleMemberships">
            <summary>
            This method returns a StringColleciton object that enumerates names of 
            the memberships of the server role. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.AddMembershipToRole(System.String)">
            <summary>
            Adds membership of this server role to other server role named "roleName".
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.DropMembershipFromRole(System.String)">
            <summary>
            Drops membership of this server role from other server role named "roleName".
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.EnumServerRolePermissions">
            <summary>
            This method will be removed in a future version of SMO.
            This method works correctly for only Fixed Server Roles, not for Flexible Server Roles.
            This method returns a DataTable object that enumerates the statement 
            execution permissions of this role.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerRole.EnumAgentProxyAccounts">
            <summary>
             Retrieves ProxyAccounts associated with server role
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerRole.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceBroker">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServiceBrokerPayload">
            <summary>
            Instance class encapsulating : Server[@Name='']/Endpoint/ServiceBroker
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceContract">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/ServiceContract
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Broker.ServiceContract.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.ServiceContract.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceContractMapping">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/BrokerService/ServiceContractMapping
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.ServiceContractMapping.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.ServiceContractMapping.Name">
            <summary>
            Name of service contract mapping
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServiceMasterKey">
            <summary>
            Instance class encapsulating : Server[@Name='']/MasterKey
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceMasterKey.ChangeAccount(System.String,System.String)">
            <summary>
            Re-encrypts the service master key with the speciefied new credentials.
            </summary>
            <param name="newAccount"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceMasterKey.Import(System.String,System.String)">
            <summary>
            Loads the service master key from the specified file. The password specifies 
            the password with which the service master key was encrypted when saved.
            </summary>
            <param name="path"></param>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceMasterKey.Recover(System.String,System.String)">
            <summary>
            Recovers a service master key, in case the service master key has been changed 
            outside of SQL Server. The master key will be decrypted with the supplied 
            credentials, and re-encrypted with the current service account credentials.
            </summary>
            <param name="oldAccount"></param>
            <param name="oldPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceMasterKey.Regenerate">
            <summary>
            Regenerates the service master key
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceMasterKey.Regenerate(System.Boolean)">
            <summary>
            Regenerates the database master key using the specified password. 
            If the force parameter is set to true, the service master key will be 
            regenerated forcefully. This will cause all secrets that cannot be 
            decrypted by the old service master key to be dropped.
            </summary>
            <param name="forceRegeneration"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceMasterKey.Export(System.String,System.String)">
            <summary>
            Saves (dumps) the service master key to a file, encrypted with the supplied password. 
            </summary>
            <param name="path"></param>
            <param name="password"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/ServiceQueue
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue.Schema">
            <summary>
            Schema of ServiceQueue
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.ServiceQueue.Name">
            <summary>
            Name of ServiceQueue
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceRoute">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ServiceBroker/ServiceRoute
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Broker.ServiceRoute.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Broker.ServiceRoute.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Settings">
            <summary>
            Instance class encapsulating : Server[@Name='']/Setting
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmartAdmin">
            <summary>
            Instance class encapsulating : Server[@Name='']/SmartAdmin
            </summary>
            <summary>
            Class that handles Altering and Scripting the current state of smart admin
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.SmartAdmin"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.#ctor(Microsoft.SqlServer.Management.Smo.Server,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.SmartAdmin"/> class.
            </summary>
            <param name="parentsrv">SMO Server instance.</param>
            <param name="key">The key.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.Alter">
            <summary>
            Alters this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.Script">
            <summary>
            Scripts this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting optiions
            </summary>
            <param name="scriptingOptions">Scripting Options</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.EnumHealthStatus">
            <summary>
            Returns DataTable that has the health status of smart admin with default time range returned by TVF [fn_get_health_status]
            </summary>
            <returns>DataTable - based on query output from health status TVF</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.EnumHealthStatus(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns DataTable that has the health status of smart admin by specifying the start and end time ranges
            </summary>
            <param name="startDate">start date time for time range</param>
            <param name="endDate">end date time for the time range</param>
            <returns>DataTable - based on query output from health status TVF</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.Refresh">
            <summary>
            override the parent class's Refresh method
            so that if the DatabaseName is not set
            call the parent class's Refresh to load in the most
            recent instance level auto admin records
            else load in the db level auto admin records
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.GetUrnRecursive(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.UrnIdOption)">
            <summary>
            Gets the Full Urn by traversing parent hierarchy
            </summary>
            <param name="urnbuilder">The urnbuilder.</param>
            <param name="idOption">The id option.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates Queries for Create operation
            </summary>
            <param name="queries">Queries string collection</param>
            <param name="sp">Scripting  preferences</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates Queries for Alter operation
            </summary>
            <param name="queries">Queries string collection</param>
            <param name="sp">Scripting Preferences</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.SetParameters(System.Collections.Generic.List{System.String},Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Set parameters for scripts
            </summary>
            <param name="parameters">parameter list to be filled out</param>
            <param name="sp">Scripting preferences</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.ScriptProperties(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates corresponding T-SQL based on the set properties
            </summary>
            <param name="queries">Queries string collection</param>
            <param name="sp">Scripting preferences</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdmin.BypassValues">
            <summary>
            In case we want to transfer the smart admin config value from one DB to another DB
            we need to set all the properties to be dirty, so that ScriptProperties will update them
            However we could not call the SetAllDirty, because then all the property values of current
            obj will be lost (a bug of SMO?), so manually set values back to themselves to trigger the dirty
            bit to be true
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdmin.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdmin.DatabaseName">
            <summary>
            Gets Whether the name of database which the current object is managing
            when this property is set, a refresh will be triggered
            if the value is a null or empty string, instance level properties will be loaded in
            else, DB level properties will be loaded in
            </summary>
            <value>String.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdmin.IsDroppedDB">
            <summary>
            Gets Whether the DB is dropped
            This property only take effects when the current
            object represent management at DB Level
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdmin.IsAvailabilityDB">
            <summary>
            Gets Whether the DB is in AV group
            This property only take effects when the current
            object represent management at DB Level
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdmin.Parent">
            <summary>
            Gets the parent Object. In this case it is Server
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdmin.UrnSuffix">
            <summary>
            Gets the urn suffix in the urn expression
            </summary>
            <value>The urn suffix for smartadmin.</value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SoapPayload">
            <summary>
            Instance class encapsulating : Server[@Name='']/Endpoint/Soap
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SoapPayloadMethod">
            <summary>
            Instance class encapsulating : Server[@Name='']/Endpoint/Soap/Method
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SoapPayloadMethod.#ctor(Microsoft.SqlServer.Management.Smo.SoapPayload,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="soapPayload"></param>
            <param name="name"></param>
            <param name="database"></param>
            <param name="schema"></param>
            <param name="sqlMethod"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SoapPayloadMethod.#ctor(Microsoft.SqlServer.Management.Smo.SoapPayload,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="soapPayload"></param>
            <param name="name"></param>
            <param name="database"></param>
            <param name="schema"></param>
            <param name="sqlMethod"></param>
            <param name="methodNamespace"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlAssembly">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/SqlAssembly
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlAssembly.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlAssembly.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlAssembly.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlAssembly.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlAssemblyFile">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/SqlAssembly/SqlAssemblyFile
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SqlAssemblyFile.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalLibrary">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ExternalLibrary
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ExternalLibrary.libraryContent">
            <summary>
            The library content (could be a path or actual bits) to install/alter library from.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ExternalLibrary.libraryContentType">
            <summary>
            Is the library content a path (versus actual bits).
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ExternalLibrary.externalLibraryFile">
            <summary>
            State variable for externalLibraryFile property.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.Create(System.String,Microsoft.SqlServer.Management.Smo.ExternalLibraryContentType)">
            <summary>
            Create a library using a path or bits with CREATE EXTERNAL LIBRARY FROM {path or binary}.
            <param name="libraryContent">The library path or the library binary</param>
            <param name="contentType">Is the content type specifying a path or binary</param>
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.Create">
            <summary>
            Creates the external library on the instance of SQL Server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.Drop">
            <summary>
            Drop the library.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.Alter">
            <summary>
            Alter the library.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.Alter(System.String,Microsoft.SqlServer.Management.Smo.ExternalLibraryContentType)">
            <summary>
            Alter a library using a path or bits with ALTER EXTERNAL LIBRARY SET {path or binary}.
            <param name="libraryContent">The library path or the library binary</param>
            <param name="contentType">Is the content type specifying a path or binary</param>
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.GenerateContentString(System.String,Microsoft.SqlServer.Management.Smo.ExternalLibraryContentType)">
            <summary>
            Generate an external library content string based on the content type.
            <param name="content">The library content</param>
            <param name="contentType">The library content type</param>
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.Script">
            <summary>
            Script an external library.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting optiions
            <param name="scriptingOptions">Scripting options.</param>
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.IsObjectDirty">
            <summary>
            Check if the object is dirty.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.MarkDropped">
            <summary>
            Mark the object as dropped.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibrary.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalLibrary.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalLibrary.UrnSuffix">
            <summary>
            returns the name of the type in the urn expression.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalLibrary.ExtendedProperties">
            <summary>
            Extended properties of the library.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalLibrary.ExternalLibraryFile">
            <summary>
            The file associated with the library.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalLibraryFile">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/ExternalLibrary/ExternalLibraryFile
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibraryFile.GetFileBytes">
            <summary>
            Returns bytes of library's file.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibraryFile.GetFileText">
            <summary>
            Returns bytes of library's file in hex ('0x...') representation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibraryFile.GetUrnRecursive(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.UrnIdOption)">
            <summary>
            Gets the Urn recursively.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExternalLibraryFile.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">DatabaseEngineType of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalLibraryFile.Parent">
            <summary>
            The parent external library owning this file.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalLibraryFile.UrnSuffix">
            <summary>
            Returns the name of the type in the urn expression.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.SqlMail">
            <summary>
            Instance class encapsulating : Server[@Name='']/Mail
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.SqlMail.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Mail.SqlMail.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Statistic">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Statistic
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Statistic.GetColumnList(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Appends to the script the columns that this statistic is created on.
            </summary>
            <param name="sb"></param>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Statistic.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Statistic.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Statistic.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StatisticColumn">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Statistic/Column
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StatisticColumn.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StatisticColumn.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StoredProcedure">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/StoredProcedure
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StoredProcedure.TouchImpl">
            <summary>
            Touch all the numbered stored procedures too
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StoredProcedure.CreateOrAlter">
            <summary>
            Create OR ALTER the object. First perform an internal check for existence. If object exists, take CREATE path; Otherwise take ALTER path.
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StoredProcedure.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StoredProcedure.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StoredProcedure.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoredProcedure.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoredProcedure.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StoredProcedureParameter">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/StoredProcedure/Param
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StoredProcedureParameter.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StoredProcedureParameter.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoredProcedureParameter.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SymmetricKey">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/SymmetricKey
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Alter">
            <summary>
             Persist all changes made in this object.        
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption,Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm)">
            <summary>
             Creates the object on the server. The keyEncryption parameter specifies the encryption type. 
             The keyEncryptionAlgorithm parameter specifies the encryption method.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption,Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm,System.String)">
            <summary>
             Creates the object on the server. The keyEncryption parameter specifies the encryption type. 
             The keyEncryptionAlgorithm parameter specifies the encryption method. The passPhrase 
             parameter specifies a pass phrase from which the symmetric key can be derived.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption,Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm,System.Security.SecureString)">
            <summary>
             Creates the object on the server. The keyEncryption parameter specifies the encryption type. 
             The keyEncryptionAlgorithm parameter specifies the encryption method. The passPhrase 
             parameter specifies a pass phrase from which the symmetric key can be derived.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption,Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm,System.String,System.String)">
            <summary>
             Creates the object on the server. The keyEncryption parameter specifies the encryption type. 
             The keyEncryptionAlgorithm parameter specifies the encryption method. The passPhrase 
             parameter specifies a pass phrase from which the symmetric key can be derived. 
             The identityPhrase parameter is used to tag data (using a GUID based on the identity 
             phrase) that is encrypted with the key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption,Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm,System.Security.SecureString,System.String)">
            <summary>
             Creates the object on the server. The keyEncryption parameter specifies the encryption type. 
             The keyEncryptionAlgorithm parameter specifies the encryption method. The passPhrase 
             parameter specifies a pass phrase from which the symmetric key can be derived. 
             The identityPhrase parameter is used to tag data (using a GUID based on the identity 
             phrase) that is encrypted with the key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption[],Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm)">
            <summary>
             Creates the object on the server. The keyEncryption parameter specifies an array of encryption types. 
             The keyEncryptionAlgorithm parameter specifies the encryption method.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption[],Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm,System.String)">
            <summary>
             Creates the object on the server. . The keyEncryption parameter specifies an array of encryption types. 
             The keyEncryptionAlgorithm parameter specifies the encryption method. The passPhrase parameter 
             specifies a pass phrase from which the symmetric key can be derived.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption[],Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm,System.Security.SecureString)">
            <summary>
             Creates the object on the server. . The keyEncryption parameter specifies an array of encryption types. 
             The keyEncryptionAlgorithm parameter specifies the encryption method. The passPhrase parameter 
             specifies a pass phrase from which the symmetric key can be derived.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption[],Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm,System.String,System.String)">
            <summary>
             Creates the object on the server. . The keyEncryption parameter specifies an array of encryption types. 
             The keyEncryptionAlgorithm parameter specifies the encryption method. The passPhrase parameter 
             specifies a pass phrase from which the symmetric key can be derived. The identityPhrase parameter 
             is used to tag data (using a GUID based on the identity phrase) that is encrypted with the key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Create(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption[],Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryptionAlgorithm,System.Security.SecureString,System.String)">
            <summary>
             Creates the object on the server. . The keyEncryption parameter specifies an array of encryption types. 
             The keyEncryptionAlgorithm parameter specifies the encryption method. The passPhrase parameter 
             specifies a pass phrase from which the symmetric key can be derived. The identityPhrase parameter 
             is used to tag data (using a GUID based on the identity phrase) that is encrypted with the key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Drop">
            <summary>
             Drops the object and removes it from the collection.        
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.EnumKeyEncryptions">
            <summary>
             Key encryptions for this symmetric key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.AddKeyEncryption(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption)">
            <summary>
             Adds a key encryption to the symmetric key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.AddKeyEncryption(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption[])">
            <summary>
             Adds one or more key encryptions to the symmetric key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.DropKeyEncryption(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption)">
            <summary>
             Removes a key encryption to the symmetric key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.DropKeyEncryption(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption[])">
            <summary>
             Removes one or more key encryptions to the symmetric key.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.OpenWithCertificate(System.String)">
            <summary>
            Opens the symmetric key, decrypted by a certificate.
            </summary>
            <param name="certificateName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.OpenWithCertificate(System.String,System.String)">
            <summary>
            Opens the symmetric key, decrypted by a certificate with a password.
            </summary>
            <param name="certificateName"></param>
            <param name="privateKeyPassword"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.OpenWithSymmetricKey(System.String)">
            <summary>
            Opens the symmetric key, decrypted by a symmetric key.
            </summary>
            <param name="symmetricKeyName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Open(System.String)">
            <summary>
            Opens the symmetric key, using the key that is associated 
            with the specified password.
            </summary>
            <param name="password"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.Close">
            <summary>
             Closes the symmetric key
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
             internal constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             build the alter script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.CheckNullArgument(System.Object,System.String)">
            <summary>
             ArgumentNullException is the argument is null
             should be inlined
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             build the create script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.ScriptSymmetricKeyEncryptions(Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption[])">
            <summary>
             builds the script for a list of SymmetricKeyEncryptions
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKey.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
             build the drop script
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SymmetricKey.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SymmetricKey.UrnSuffix">
            <summary>
             returns the name of the type in the urn expression
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Synonym">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Synonym
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Synonym.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Synonym.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Synonym.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SystemDataType">
            <summary>
            Instance class encapsulating : Server[@Name='']/SystemDataType
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SystemDataType.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SystemMessage">
            <summary>
            Instance class encapsulating : Server[@Name='']/SystemMessage
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SystemMessage.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            internal .ctor
            </summary>
            <param name="parentColl"></param>
            <param name="key"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SystemMessage.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SystemMessage.ID">
            <summary>
            Message ID
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SystemMessage.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Table">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.TableViewTableTypeBase.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the permission scripting - No columns added here - TableViewBase will override this method
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.TableViewBase.UpdateStatistics">
            <summary>
            forces data distribution statistics update for a referenced index or all 
            indexes defined on a SQL Server table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.TableViewBase.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsTarget,Microsoft.SqlServer.Management.Smo.StatisticsScanType)">
            <summary>
            forces data distribution statistics update for a referenced index or all 
            indexes defined on a SQL Server table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.TableViewBase.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsTarget,Microsoft.SqlServer.Management.Smo.StatisticsScanType,System.Int32)">
            <summary>
            forces data distribution statistics update for a referenced index or all 
            indexes defined on a SQL Server table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.TableViewBase.UpdateStatistics(Microsoft.SqlServer.Management.Smo.StatisticsTarget,Microsoft.SqlServer.Management.Smo.StatisticsScanType,System.Int32,System.Boolean)">
            <summary>
            forces data distribution statistics update for a referenced index or all 
            indexes defined on a SQL Server table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.TableViewBase.GetKeysForPermissionWithGrantOptionFromCache">
            <summary>
            Returns a collection of unique keys for permissions which are assigned on this table or view 
            with grant option. This collection of keys is cached and only refreshed 
            when this.Refresh() is being called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.TableViewBase.GetKeyToMatchColumnPermissions(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a key which is used to match table or view permissions 
            with the permission on their columns. 
            </summary>
            <param name="permissionClass"></param>
            <param name="grantee"></param>
            <param name="granteeType"></param>
            <param name="grantor"></param>
            <param name="grantorType"></param>
            <param name="permissionName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.TableViewBase.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the permission scripting.
            </summary>
            <param name="query"></param>
            <param name="sp"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IColumnPermission">
            <summary>
            Interface for column-level object permissions.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Deny(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.String[])">
            <summary>
            The Deny method negates granted user permission for one or more users
            or roles, for the specified columnNames.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="columnNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Deny(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.String[])">
            <summary>
            The Deny method negates granted user permission for one or more users
            or roles, for the specified columnNames.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="columnNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Deny(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.String[],System.Boolean)">
            <summary>
            The Deny method negates granted user permission for one or more users
            or roles, for the specified columnNames. Cascade specifies that
            permissions are denied from granteeNames as well as any other
            security accounts granted permissions by granteeNames. Use Cascade
            when denying a grantable permission.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="columnNames"></param>
            <param name="cascade"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Deny(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.String[],System.Boolean)">
            <summary>
            The Deny method negates granted user permission for one or more users
            or roles, for the specified columnNames. Cascade specifies that
            permissions are denied from granteeName as well as any other
            security accounts granted permissions by granteeName. Use Cascade
            when denying a grantable permission.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="columnNames"></param>
            <param name="cascade"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.String[])">
            <summary>
            The Grant method assigns permissions to one or more users or roles
            for the specified columns.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="columnNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.String[])">
            <summary>
            The Grant method assigns permissions to one or more users or roles
            for the specified columns.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="columnNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.String[],System.Boolean)">
            <summary>
            The Grant method assigns permissions to one or more users or roles
            for the specified columns. When grantGrant is true, the grantee(s)
            specified are granted the ability to execute the GRANT statement
            referencing the object.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="columnNames"></param>
            <param name="grantGrant"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.String[],System.Boolean)">
            <summary>
            The Grant method assigns permissions to one or more users or roles
            for the specified columns. When grantGrant is true, the grantee(s)
            specified are granted the ability to execute the GRANT statement
            referencing the object.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="columnNames"></param>
            <param name="grantGrant"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.String[],System.Boolean,System.String)">
            <summary>
            The Grant method assigns permissions to one or more users or roles
            for the specified columns. When grantGrant is true, the grantee(s)
            specified are granted the ability to execute the GRANT statement
            referencing the object. Use the AsRole argument to specify the role
            under which role to execute the grant.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="columnNames"></param>
            <param name="grantGrant"></param>
            <param name="asRole"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Grant(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.String[],System.Boolean,System.String)">
            <summary>
            The Grant method assigns permissions to one or more users or roles
            for the specified columns. When grantGrant is true, the grantee(s)
            specified are granted the ability to execute the GRANT statement
            referencing the object. Use the AsRole argument to specify the role
            under which role to execute the grant.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="columnNames"></param>
            <param name="grantGrant"></param>
            <param name="asRole"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.String[])">
            <summary>
            Removes previously granted or denied column permission for
            the specified granteeNames.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="columnNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.String[])">
            <summary>
            Removes previously granted or denied column permission for
            the specified granteeName.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="columnNames"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            Removes a previously granted or denied permission for the specified
            granteeNames. When revokeGrant is true, the ability to extend
            permissions is revoked. Cascade specifies that permissions are
            removed from granteeNames as well as any other security accounts
            granted permissions by granteeNames. Use Cascade when revoking a
            grantable permission.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="columnNames"></param>
            <param name="revokeGrant"></param>
            <param name="cascade"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.String[],System.Boolean,System.Boolean)">
            <summary>
            Removes a previously granted or denied permission for the specified
            granteeName. When revokeGrant is true, the ability to extend
            permissions is revoked. Cascade specifies that permissions are
            removed from granteeName as well as any other security accounts
            granted permissions by granteeName. Use Cascade when revoking a
            grantable permission.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="columnNames"></param>
            <param name="revokeGrant"></param>
            <param name="cascade"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String[],System.String[],System.Boolean,System.Boolean,System.String)">
            <summary>
            Removes a previously granted or denied permission for the specified
            granteeNames. When revokeGrant is true, the ability to extend
            permissions is revoked. Cascade specifies that permissions are
            removed from granteeNames as well as any other security accounts
            granted permissions by granteeNames. Use Cascade when revoking a
            grantable permission. Use the AsRole argument to specify the role
            under which permission to execute the revoke.
            </summary>
            <param name="permissions"></param>
            <param name="granteeNames"></param>
            <param name="columnNames"></param>
            <param name="revokeGrant"></param>
            <param name="cascade"></param>
            <param name="asRole"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.Revoke(Microsoft.SqlServer.Management.Smo.ObjectPermissionSet,System.String,System.String[],System.Boolean,System.Boolean,System.String)">
            <summary>
            Removes a previously granted or denied permission for the specified
            granteeName. When revokeGrant is true, the ability to extend
            permissions is revoked. Cascade specifies that permissions are
            removed from granteeName as well as any other security accounts
            granted permissions by granteeName. Use Cascade when revoking a
            grantable permission. Use the AsRole argument to specify the role
            under which permission to execute the revoke.
            </summary>
            <param name="permissions"></param>
            <param name="granteeName"></param>
            <param name="columnNames"></param>
            <param name="revokeGrant"></param>
            <param name="cascade"></param>
            <param name="asRole"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.EnumColumnPermissions(System.String)">
            <summary>
            Returns an array of Permission objects identifying explicitly granted
            column access permissions for the grantee specified with the granteeName
            parameter.
            </summary>
            <param name="granteeName"></param>
            <returns>ObjectPermissionInfo[]</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IColumnPermission.EnumColumnPermissions(System.String,Microsoft.SqlServer.Management.Smo.ObjectPermissionSet)">
            <summary>
            Returns an array of Permission objects identifying explicitly granted
            column access permissions for the grantee specified with the granteeName
            parameter, restricted to the column access permissions specified with
            the privilegeTypes parameter.
            </summary>
            <param name="granteeName"></param>
            <param name="permissions"></param>
            <returns>ObjectPermissionInfo[]</returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Table.m_lowPriorityMaxDuration">
            <summary>
            Specifies the MAX_DURATION for the WAIT_AT_LOW_PRIORITY option of the
            DDL operation.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Table.m_systemTimePeriodInfo">
            <summary>
            Stores various properties of a PERIOD that is about to be created/altered/dropped
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Table.m_lowPriorityAbortAfterWait">
            <summary>
            Specifies the ABORT_AFTER_WAIT action for the WAIT_AT_LOW_PRIORITY option of the
            DDL operation.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetFileTableNamespacePath">
            <summary>
            Gets the file table namespace path.
            </summary>
            <returns>UNC Path to Shared FileTable folder </returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Table.indexPropagationList">
            <summary>
            Indexes scripted with Table
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.AddToIndexPropagationList(Microsoft.SqlServer.Management.Smo.Index)">
            <summary>
            Adds an index to the propagation list, initializing it if needed.
            </summary>
            <param name="i"></param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Table.embeddedForeignKeyChecksList">
            <summary>
            Constraints scripted with Table
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.AddToEmbeddedForeignKeyChecksList(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Adds a constraint to the propagation list, initializing it if needed.
            </summary>
            <param name="fkck"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptDataInternal(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            This returns a collection of T-SQL INSERT statements for the data
            in this table.
            </summary>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptDropData(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns a T-SQL string used to be able to drop the data from the table.
            </summary>
            <param name="so"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.Table.EnumScript" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.Table.EnumScript(Microsoft.SqlServer.Management.Smo.ScriptingOptions)" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetMemoryOptimizedTableCreationScript(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Text.StringBuilder)">
            <summary>
            scripts a memory optimized table
            </summary>
            <param name="sp"> Scripting preferences </param>
            <param name="sb"> The string builder to hold scripts </param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetExternalTableCreationScript(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Text.StringBuilder)">
            <summary>
            Scripts an external table.
            </summary>
            <param name="sp">The string builder to hold scripts.</param>
            <param name="sb">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetSqlDwTableCreationScript(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Text.StringBuilder)">
            <summary>
            Scripts a SQL DW table.
            </summary>
            <param name="sp">The string builder to hold scripts.</param>
            <param name="sb">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptBindings(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Script bindings
            </summary>
            <param name="scqueries"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.IsCompressionCodeRequired(System.Boolean)">
            <summary>
            This method just check whether compression related code is required or not.
            </summary>
            <param name="bAlter"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetTableCreationScript(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Text.StringBuilder)">
            <summary>
            Generates the table creation script.
            </summary>
            <param name="sp"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptPeriodForSystemTime(System.Text.StringBuilder)">
            <summary>
            Generates the PERIOD script
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetFileTableCreationScript(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Text.StringBuilder)">
            <summary>
            Generates the table creation script for a FileTable.
            </summary>
            <param name="sp"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.HasClusteredPrimaryOrUniqueKey(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            This method helps in avoiding the duplicate script generation for data compression
            in case if table has clustered primary key. Script generation for a existing table
            take care to include the primary key constraint inside the table create script itself.
            So, if table is compressed then primary key constraint also include the data compression
            property too. In such scenario we want to avoid the data compression code generation
            for table. At present in fact engine throws exception for such duplicate unlike
            filegroup parameter where it simply ignore the parameter value set for table if primary
            key has already.
            Avoid duplicating data compression for unique clustered index too.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetTableCreationScriptWithAnsiPadding(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Generates the creation script for tables with multiple different
            ansi_padding columns
            </summary>
            <param name="sp">scripting preference</param>
            <param name="sb">string builder</param>
            <param name="initialPadding">use initial padding</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GenerateWithOptionScript(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Append the CREATE TABLE WITH Option script
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.Table.GenerateSystemVersioningWithClauseContent(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GenerateSystemVersioningWithClause(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates WITH clause related to SYSTEM_VERSIONING option
            Something like this: SYSTEM_VERSIONING = ON (HISTORY_TABLE = [DBO].[HISTORY_TABLE] (DATA_CONSISTENCY_CHECK = ON))
            </summary>
            <param name="sb">StringBuilder to append result to</param>
            <param name="sp">scripting preferences</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GenerateStretchHeapWithClause(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates WITH clause related to Heap on Stretch dbs option
            Something like this: WITH HEAP
            </summary>
            <param name="sb">StringBuilder to append result to</param>
            <param name="sp">scripting preferences</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GenerateTextFileGroupScript(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Append the CREATE TABLE TEXTIMAGE_ON script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GenerateGraphScript(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            This method creates the AS NODE/AS EDGE syntax if the table is a node or an edge.
            </summary>
            <param name="sb">String builder that is building the script.</param>
            <param name="sp">Preferences for scripting.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.PostCreate">
            <summary>
            performs actions needed after the object is created
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ProcessExternalTableOptionalProperties(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Processes optional properties for the external table
            and adds them to the T-SQL script.
            </summary>
            <param name="script">The external table T-SQL script.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ValidateLocationProperties(System.String,System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Text.StringBuilder)">
            <summary>
            Processes location properties for the external table
            Validates that the location properties are not null or empty
            and adds them to the T-SQL script.
            These are string properties and Util.MakeSqlString should be used before adding them to the script.
            </summary>
            <param name="locationPropertyName">The property name.</param>
            <param name="sqlString">The T-SQL script to add.</param>
            <param name="sp">Scripting preferences.</param>
            <param name="script">The external table T-SQL script.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ProcessSqlDwTableProperties(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Processes SQL DW table properties
            and adds them to the T-SQL script.
            </summary>
            <param name="script">The SQL DW table T-SQL script.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ValidateOptionalProperty``1(System.String,System.String,System.Collections.Generic.List{``0},System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean,System.ComponentModel.TypeConverter,System.Boolean)">
            <summary>
            Validates the specified property that it is not the default value and adds it to the T-SQL script.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="sqlString">The T-SQL script to add.</param>
            <param name="defaultValues">The default property values.</param>
            <param name="fileFormatOptions">The T-SQL script with the already added file format options.</param>
            <param name="sp">Scripting preferences.</param>
            <param name="bracketize">A flag to add a bracket around the property name.</param>
            <param name="typeConverter">The type converter object.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.AddPropertyToScript(System.String,System.String,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Adds a property to the specified T-SQL script.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="sqlString">The formated T-SQL string to insert the property value.</param>
            <param name="script">The T-SQL script to add the formated property value.</param>
            <param name="formatted">Adds newline and tab to the script.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.IsPropertyDefaultValue``1(Microsoft.SqlServer.Management.Smo.Property,``0,System.Collections.Generic.List{``0})">
            <summary>
            Check the specified property if it has the default value.
            </summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="prop">The property to check.</param>
            <param name="value">The property value to check.</param>
            <param name="defaultValues">The default property values.</param>
            <returns>True, if the property value has the default value.  False otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetTableAnsiPadded">
            <summary>
            Returns the ANSI_PADDING with which we should create the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetColumnPadding(Microsoft.SqlServer.Management.Smo.Column)">
            <summary>
            Returns the ansi_padding setting for this column, or null in case
            the column does not have such a thing
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.HasTextimageColumn(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns true if the table has columns that need the TEXTIMAGE clause
            which means it has data type text, ntext, or image
            </summary>
            <param name="so"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.HasMultiplePaddings">
            <summary>
            returns true if the columns in the table have multiple ansi_padding settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.IsPaddingType(Microsoft.SqlServer.Management.Smo.Column)">
            <summary>
            Returns true is the type of this column can have ansi_padding setting
            </summary>
            <param name="sqlDataType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ShouldEmitColumnListParenthesis(System.Boolean,Microsoft.SqlServer.Management.Smo.ColumnCollection)">
            <summary>
            This method determines if a parenthesis should be emitted when working with an edge table.
            The parenthesis should be emitted if the edge contains any non-graph type columns.
            </summary>
            <param name="isEdgeTable">True to indicate the table is an edge table, False otherwise.</param>
            <param name="columns">The list of columns.</param>
            <returns>True if a parenthesis should be emitted.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GenerateMemoryOptimizedIndexes(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Collections.ICollection)">
            <summary>
            scripts indexes of a memory optimized table
            </summary>
            <param name="sb"> the string builder to hold scripts </param>
            <param name="sp"> scripting preferences </param>
            <param name="indexes"> indexes to script </param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptSqlDwClusteredIndexes(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Collections.ICollection)">
            <summary>
            Scripts  clustered indexes for a SQL DW table that are inlined in the CREATE TABLE DDL.
            </summary>
            <param name="sb">The string builder to hold scripts.</param>
            <param name="sp">The scripting preferences.</param>
            <param name="indexes">The indexes to script.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GeneratePkUkInCreateTable(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Collections.ICollection,System.Boolean)">
            <summary>
            Generates scripts for the primary key and unique keys present on the table
            </summary>
            <param name="sb"></param>
            <param name="so"></param>
            <param name="indexes"></param>
            <param name="embedded">indicates if we will script separate statements
            to create those objects</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Table.rebuildPartitionNumber">
            <summary>
            Hint parameter for Rebuild() function. If this value is -1 then it means
            rebuild all the partition
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.Rebuild(System.Int32)">
            <summary>
            Rebuild particular partition
            </summary>
            <param name="partitionNumber"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.Rebuild">
            <summary>
            Rebuild table
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptRebuildOptions(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
             <summary>
             This method script the rebuild options (except data compression) corresponding to rebuild command.
             At this moment it covers two options MAXDOP (MaximumDegreeOfParallelism) and ONLINE.
            
             This method will get modified whenever options like SORT_IN_TEMPDB, PAD_INDEX, IGNORE_DUP_KEY etc
             are going to be effective, which looks like under future plan.
             </summary>
             <param name="rebuildOptions"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptWaitAtLowPriorityIndexOption(System.Text.StringBuilder)">
            <summary>
            This method scripts the WAIT_AT_LOW_PRIORITY options for Online Table Rebuild and
            Switch Partition.
            </summary>
            <param name="options">The StringBuilder to append the options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.CheckTable">
            <summary>
            Tests the integrity of database pages implementing storage for the
            referenced table and indexes defined on it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.CheckTableDataOnly">
            <summary>
            Tests the integrity of database pages implementing storage for the referenced table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.EnumForeignKeys">
            <summary>
            this function enumerates all the ForeignKeys that reference the primary key
            of this table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.TruncateData">
            <summary>
            Truncate a table
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.TruncateData(System.Int32)">
            <summary>
            Truncate a partition of partitioned table with the partition number
            </summary>
            <param name="partitionNumber">partiton to truncate</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.DisableAllIndexes">
            <summary>
            Disables all indexes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.EnableAllIndexes(Microsoft.SqlServer.Management.Smo.IndexEnableAction)">
            <summary>
            Enables all indexes. The action argument specifies how enable the index. It is
            possible to call Create() or Rebuild() on the Index
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.AddPeriodForSystemTime(System.String,System.String,System.Boolean)">
            <summary>
            Adds period information for the system-versioned temporal table.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.DropPeriodForSystemTime">
            <summary>
            Drops sytem period from the temporal table
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.SwitchPartition(System.Int32,Microsoft.SqlServer.Management.Smo.Table,System.Int32)">
            <summary>
            Switches the partition with the partition number sourcePartitionNumber of the
            current table to the partition with the partition number targetPartitionNumber
            of the table specified with targetTable.
            </summary>
            <param name="sourcePartitionNumber"></param>
            <param name="targetTable"></param>
            <param name="targetPartitionNumber"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.SwitchPartition(System.Int32,Microsoft.SqlServer.Management.Smo.Table)">
            <summary>
            Switches the partition with the partition number sourcePartitionNumber of the
            current table to the table specified with targetTable. This assumes that the
            target table is not partitioned.
            </summary>
            <param name="sourcePartitionNumber"></param>
            <param name="targetTable"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.SwitchPartition(Microsoft.SqlServer.Management.Smo.Table,System.Int32)">
            <summary>
            Switches the current table to the partition with the partition number
            targetPartitionNumber of the table specified with targetTable.
            </summary>
            <param name="targetTable"></param>
            <param name="targetPartitionNumber"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.SwitchPartition(Microsoft.SqlServer.Management.Smo.Table)">
            <summary>
            Switches the current table to the table specified with targetTable.
            </summary>
            <param name="targetTable"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetRemoteTableMigrationStatistics">
            <summary>
            Get remote table migration statistics. Null if Remote Data Archive is not enabled for table or the remote table provisioning is not complete
            </summary>
            <returns>Table Migration statistics if Remote Data Archive is enabled and the remote table is provisioned, else null</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ValidateExternalTableOptionalProperties(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Checks for the folowing.
            	1. Any conflicting properties specified for the external table. If a conflicting
            	configuration is detected, throws an exception.
            	2. If Polybase properties are mixed with GQ Properties.
            	3. Depending on Polybase or GQ, if the right property combination is used for the
            	specific scenario.
            </summary>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.CheckIsExternalTable">
            <summary>
            Checks if current table object is an external table.
            </summary>
            <returns>True if table is an external table, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.CheckIsSqlDwTable">
            <summary>
            Checks if current table object is a SQL DW table.
            </summary>
            <returns>True if table is a SQL DW table, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.CheckIsMemoryOptimizedTable">
            <summary>
            Checks if current table object is a memory optimized table.
            </summary>
            <returns>True if table is memory optimized, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.GetScriptFields2(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns the additional expensive fields that will be needed to script this object based on preference
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <param name="sp">The scripting preference</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptVardecimalCompression(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            Emit script to set vardecimal storage format for the table
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptRemoteDataArchive(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Adds the appropriate ALTER TABLE ... statements to the StringCollection based on
            the current state of Remote Data Archive Migration on the table.
            </summary>
            <param name="queries">The collection of statements to add to</param>
            <param name="sp">The settings for generating the scripts</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptLockGranularity(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.LockEscalationType,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            It is a helper function to script lock escalation settings
            </summary>
            <param name="scqueries"></param>
            <param name="lockStatus"></param>
            <param name="so"></param>
            <param name="scriptTableGranularity"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ScriptLockEscalationSettings(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            This function scripts Lock Escalation settings on a Table
            </summary>
            <param name="scqueries"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ValidateExternalTable">
            <summary>
            Validates the external table objects does not contain any unsupported collections.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ValidateIndexes">
            <summary>
            Validate Indexes defined on this table before table creation or scripting
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ValidateExternalTableRequiredStringProperty(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Validates external table required property.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="sp">Scripting preferences.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Table.ValidateSystemTimeTemporal">
            <summary>
            Validates if temporal system time PERIOD is set-up properly
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.OnlineHeapOperation">
            <summary>
            Online property for rebuild heap
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.LowPriorityMaxDuration">
            <summary>
            Gets or sets the MAX_DURATION for the WAIT_AT_LOW_PRIORITY option of the
            DDL operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.DataConsistencyCheck">
            <summary>
            Property for setting/getting if DATA_CONSISTENCY_CHECK option is used
            when creating system-versioned temporal table
            Sample syntax: CREATE TABLE t (....) WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE = dbo.History, DATA_CONSISTENCY_CHECK = ON))
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.LowPriorityAbortAfterWait">
            <summary>
            Gets or sets the ABORT_AFTER_WAIT action for the WAIT_AT_LOW_PRIORITY option of the
            DDL operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.MaximumDegreeOfParallelism">
            <summary>
            Property for setting maximum number of processors that can be used when running
            rebuild heap
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.IsNode">
            <summary>
            Whether this table is a node table.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.IsEdge">
            <summary>
            Whether this Table is an edge table.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.PhysicalPartitions">
            <summary>
            Collection class instance for the PhysicalPartitions of the table
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.PartitionSchemeParameters">
            <summary>
            Specifies the columns that define the input parameters for the Partition Scheme.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Table.IsVarDecimalStorageFormatEnabled">
            <summary>
            Whether decimal data is stored in variable-length fields in the table
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.TargetServer">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/TargetServer
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup">
            <summary>
            Instance class encapsulating : Server[@Name='']/JobServer/TargetServerGroup
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup.AddMemberServer(System.String)">
            <summary>
            The AddMemberServer method assigns target server (Tsx) group 
            membership to the target server specified.
            </summary>
            <param name="srvname"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup.EnumMemberServers">
            <summary>
            The EnumMemberServers method returns a NameList object that enumerates 
            the member target servers (TSXs) of the multiserver administration, 
            Tsx server group referenced.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup.RemoveMemberServer(System.String)">
            <summary>
            The DropMemberServer method drops the indicated multiserver 
            administration target server (Tsx) from the group referenced.
            </summary>
            <param name="srvname"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroup.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.TcpProtocol">
            <summary>
            Instance class encapsulating : Server[@Name='']/Endpoint/Tcp
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Trigger">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/Table/Trigger
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Trigger.CreateOrAlter">
            <summary>
            Create OR ALTER the object. First perform an internal check for existence. If object exists, take CREATE path; Otherwise take ALTER path.
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Trigger.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Trigger.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Trigger.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Trigger.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.User">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/User
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.Create">
            <summary>
            Creates a database user on the instance of SQL Server.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.Create(System.String)">
            <summary>
            Creates a database user with a password on the instance of SQL Server.
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.Create(System.Security.SecureString)">
            <summary>
            Creates a database user with a password on the instance of SQL Server.
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.ChangePassword(System.String)">
            <summary>
            Allows the administrator to change any user password.
            </summary>
            <param name="newPassword">The new user password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.ChangePassword(System.Security.SecureString)">
            <summary>
            Allows the administrator to change any user password.
            </summary>
            <param name="newPassword">The new user password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.ChangePassword(System.String,System.String)">
            <summary>
            Allows the user to change password by providing the old user password.
            </summary>
            <param name="oldPassword">The old user password.</param>
            <param name="newPassword">The new user password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.ChangePassword(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            Allows the user to change password by providing the old user password.
            </summary>
            <param name="oldPassword">The old user password.</param>
            <param name="newPassword">The new user password.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.ExecuteRenameQuery(System.String)">
            <summary>
            When conversion of a SQL Login mapped user to a contained user is
            going on, this method takes care of not sending Rename query when called
            from this.RenameImpl method.
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.MakeContained(System.Boolean,System.Boolean)">
            <summary>
            Converts a login mapped user to a contained user with password using the sys.sp_copy_password_to_user stored procedure.
            </summary>
            <param name="copyLoginName">Copies the earlier mapped login name to the contained user.</param>
            <param name="disableLogin">Disables the earlier mapped login.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the permission scripting.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.ScriptAddToRole(System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Add to Role script
            </summary>
            <param name="role"></param>
            <returns>The DDL string to add the user to the given role.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.AddToRole(System.String)">
            <summary>
            Add to Role.
            </summary>
            <param name="role"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.User.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.User.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.User.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.User.DefaultLanguage">
            <summary>
            Gets or sets the default language of this user object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedAggregate
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.Alter">
            <summary>
            Alter Schema for User Defined Aggregate
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.Refresh">
            <summary>
            Refresh the object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.Script">
            <summary>
            Generate object script.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Generate object script with specific scripting options.
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.Schema">
            <summary>
            Schema of UserDefinedAggregate
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.Name">
            <summary>
            Name of UserDefinedAggregate
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedAggregate.DataType">
            <summary>
            Exposes return type information.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameter">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedAggregate/Param
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameter.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameter.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameter.Name">
            <summary>
            Name of UserDefinedAggregateParameter
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameter.DataType">
            <summary>
            DataType of UserDefinedAggregateParameter
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedDataType">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedDataType
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.ScriptOwnerForShiloh(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.String)">
            <summary>
            UDDT doesn't support sp_changeobjectowner - so this functionality is
            unsupported for Shiloh (2005) since ALTER AUTHORIZATION isn't available
            until Yukon (2008)
            </summary>
            <param name="sb">Builder to add the statements to</param>
            <param name="newOwner">The name of the new owner</param>
            <param name="sp">The scripting preferences</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.GetTypeDefinitionScript(Microsoft.SqlServer.Management.Smo.ScriptingPreferences,Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.String,System.Boolean)">
            <summary>
            This function generates a script containing the type definition for
            the object that is being passed in. For example it will output the
            name plus data type for a column.
            </summary>
            <param name="so"></param>
            <param name="oObj"></param>
            <param name="sTypeNameProperty"></param>
            <param name="bSquareBraketsForNative"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.AppendScriptTypeDefinition(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Smo.SqlDataType)">
            <summary>
            Appends script containing the t-sql type definition for the object
            passed in as parameter
            </summary>
            <param name="sb"></param>
            <param name="so"></param>
            <param name="oObj"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.IsSystemType(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns true if the object's type is a SqlServer system data type
            Will return false for UserDefinedDataType and UserDefinedType
            </summary>
            <param name="oObj"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.Drop">
            <summary>
            Drops the object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.PostCreate">
            <summary>
            performs actions needed after the object is created
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.TypeAllowsCollation(System.String,Microsoft.SqlServer.Management.Smo.StringComparer)">
            <summary>
            returns true if the type can have a collation that needs to be
            scripted.
            </summary>
            <param name="type">The name of the SqlServer type</param>
            <param name="comparer">comparer used to do comparisons</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.Rename(System.String)">
            <summary>
            Renames the object
            </summary>
            <param name="newname">New UDDT name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the permission scripting.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedDataType.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedFunction">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedFunction
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedFunction.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the permission scripting.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedFunction.CreateOrAlter">
            <summary>
            Create OR ALTER the object. First perform an internal check for existence. If object exists, take CREATE path; Otherwise take ALTER path.
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedFunction.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedFunction.Rename(System.String)">
            <summary>
            Renames the object
            </summary>
            <param name="newname">New UDF name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedFunction.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedFunction.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedFunction.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedFunction.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionParameter">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedFunction/Param
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionParameter.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionParameter.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionParameter.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedMessage">
            <summary>
            Instance class encapsulating : Server[@Name='']/UserDefinedMessage
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.#ctor">
            <summary>
            Creates a new UserDefinedMessage object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Int32)">
            <summary>
            Creates a new UserDefinedMessage object; with the Server and message id
            </summary>
            <param name="server"></param>
            <param name="id"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Int32,System.String)">
            <summary>
            Creates a new UserDefinedMessage object; with the Server, message id, 
            and language specified.
            </summary>
            <param name="server"></param>
            <param name="id"></param>
            <param name="language"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Creates a new UserDefinedMessage object; with the Server, 
            message id, and language, severity and message text specified.
            Note: this is the minimal constructor which allows inline construction.
            </summary>
            <param name="server"></param>
            <param name="id"></param>
            <param name="language"></param>
            <param name="severity"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Int32,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a new UserDefinedMessage object; with the Server, message id, 
            and language, severity, message text, and logging specified. 
            </summary>
            <param name="server"></param>
            <param name="id"></param>
            <param name="language"></param>
            <param name="severity"></param>
            <param name="message"></param>
            <param name="isLogged"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new UserDefinedMessage object; with the Server, message id, 
            and language id, severity and message text specified.
            Note: this is the minimal constructor which allows inline construction 
            (language type differs from above).
            </summary>
            <param name="server"></param>
            <param name="id"></param>
            <param name="language"></param>
            <param name="severity"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Creates a new UserDefinedMessage object; with the Server, message id, 
            and language id, severity, message text, and logging specified. 
            </summary>
            <param name="server"></param>
            <param name="id"></param>
            <param name="language"></param>
            <param name="severity"></param>
            <param name="message"></param>
            <param name="isLogged"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.ID">
            <summary>
            Message ID
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedMessage.Language">
            <summary>
            Language
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedTableType">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedTableType
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedTableType.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedTableType.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedTableType.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedTableType.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedTableType.Schema">
            <summary>
            Schema of UserDefinedTableType
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedTableType.Name">
            <summary>
            Name of UserDefinedTableType
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedType">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/UserDefinedType
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedType.Alter">
            <summary>
            Alter Schema for User Defined Type
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedType.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserDefinedType.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedType.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedType.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserOptions">
            <summary>
            Instance class encapsulating : Server[@Name='']/UserOption
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserOptions.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.View">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/View
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.View.CreateOrAlter">
            <summary>
            Create OR ALTER the object. First perform an internal check for existence. If object exists, take CREATE path; Otherwise take ALTER path.
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.View.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.View.AddScriptPermission(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Overrides the permission scripting.
            </summary>
            <param name="query"></param>
            <param name="so"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.View.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.View.ValidateProperty(Microsoft.SqlServer.Management.Smo.Property,System.Object)">
            <summary>
            Validate property values that are coming from the users.
            </summary>
            <param name="p"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.View.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.View.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.WorkloadGroup">
            <summary>
            Instance class encapsulating : Server[@Name='']/ResourceGovernor/ResourcePool/WorkloadGroup
            </summary>
            <summary>
            Class that handles Creating, Altering, Dropping and Scripting the Workload group instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.#ctor(Microsoft.SqlServer.Management.Smo.AbstractCollectionBase,Microsoft.SqlServer.Management.Smo.ObjectKeyBase,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.WorkloadGroup"/> class.
            </summary>
            <param name="parentColl">The parent coll.</param>
            <param name="key">The key.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.Create">
            <summary>
            Creates this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.Alter">
            <summary>
            Alters this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.Drop">
            <summary>
            Drops this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.Script">
            <summary>
            Generate object creation script using default scripting options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Script object with specific scripting options
            </summary>
            <param name="scriptingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.MoveToPool(System.String)">
            <summary>
            Move Workload group to specified resource pool
            </summary>
            <param name="poolName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.ScriptMoveToPool(System.String)">
            <summary>
            Script Move Workload group to specified resource pool
            </summary>
            <param name="poolName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.ScriptCreate(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates Queries for Creating Workload group 
            </summary>
            <param name="queries">Queries string collection that has T-SQL queries</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.ScriptAlter(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates Queries for Altering Workload group 
            </summary>
            <param name="queries">Queries string collection that has T-SQL queries</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.ScriptDrop(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Generates Queries for Dropping Workload group 
            </summary>
            <param name="queries">Queries string collection that has T-SQL queries</param>
            <param name="so">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.TouchImpl">
            <summary>
            Touch all the properties of this object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.GetAllParams(System.Text.StringBuilder,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Int32@)">
            <summary>
            Retrieve the properties that were set and generate appropriate T-SQL fragments
            </summary>
            <param name="sb">T-SQL string fragment</param>
            <param name="so">Scripting Options</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.MoveToPoolImpl(System.String)">
            <summary>
            Helper method to move Workload group to specified resource pool
            </summary>
            <param name="poolName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WorkloadGroup.GetWorkloadGroup(Microsoft.SqlServer.Management.Smo.Server,System.String)">
            <summary>
            This function is introduced for the WorkloadGroup special case for DMF, see PolicyEvaluationHelper.GetTargetQueryExpression().
            It is introduced as a workaround to VSTS 222405.
            The code has special knowledge of the WorkloadGroup object.  WorkloadGroups are uniquely named across all ResourcePools.  
            Thus, the code takes advanatage of this knowledge to retrive the WorkloadGroup
            by issuing the query "Server[@Name=serverName]/ResourceGovernor/ResourcePool/WorkloadGroup[@Name=workloadgroup]"
            This will return one single object, and using that object we can get the unique Urn that contains the name
            of the ResourcePool.  With the Urn, we are able to retrive the Powershell path.
            </summary>
            <param name="server"></param>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.WorkloadGroup.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.WorkloadGroup.Name">
            <summary>
            Name of WorkloadGroup
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.WorkloadGroup.UrnSuffix">
            <summary>
            Gets the urn suffix in the urn expression
            </summary>
            <value>The urn suffix.</value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection">
            <summary>
            Instance class encapsulating : Server[@Name='']/Database/XmlSchemaCollection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.Create">
            <summary>
            Drops the namespace.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.Drop">
            <summary>
            Drops the namespace.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.DropIfExists">
            <summary>
            Drops the object with IF EXISTS option. If object is invalid for drop function will
            return without exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.Alter">
            <summary>
            Save changes made to the object to the database.
            Note that only extended properties can be modified.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.AddSchemaDocument(System.String)">
            <summary>
            Allows the addition of new schema documents to the xml schema collection.
            </summary>
            <param name="xmlSchemaDocument"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.EnumNamespaces">
            <summary>
            Enumerates the namespaces within this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.EnumTypes">
            <summary>
            Enumerates all types contained in this xml schema collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.EnumTypes(System.String)">
            <summary>
            Enumerates all types contained in this xml schema collection, limited
            to the specified namespace.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server.
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.Permissions">
            <summary>
            This object supports permissions.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.Microsoft#SqlServer#Management#Sdk#Sfc#ISfcSupportsDesignMode#IsDesignMode">
            <summary>
            This object extend ISfcSupportsDesignMode.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.XmlSchemaCollection.ExtendedProperties">
            <summary>
            Collection of extended properties for this object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerEventValues">
            REVIEW-2003/10/28-macies Commented out server event groups
            Comment out until we figure out how 
            to deal with server event groups.
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectEventValues">
            REVIEW-2003/10/28-macies Commented out server event groups
            Commented out until we figure out how to deal with
            server event groups
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AddRoleMember">
            <summary>define static property for AddRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AddServerRoleMember">
            <summary>define static property for AddServerRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AddSignature">
            <summary>define static property for AddSignature</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AddSignatureSchemaObject">
            <summary>define static property for AddSignatureSchemaObject</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterApplicationRole">
            <summary>define static property for AlterApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterAssembly">
            <summary>define static property for AlterAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterAsymmetricKey">
            <summary>define static property for AlterAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterAudit">
            <summary>define static property for AlterAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterAuthorizationDatabase">
            <summary>define static property for AlterAuthorizationDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterAuthorizationServer">
            <summary>define static property for AlterAuthorizationServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterAvailabilityGroup">
            <summary>define static property for AlterAvailabilityGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterBrokerPriority">
            <summary>define static property for AlterBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterCertificate">
            <summary>define static property for AlterCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterColumnEncryptionKey">
            <summary>define static property for AlterColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterCredential">
            <summary>define static property for AlterCredential</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterCryptographicProvider">
            <summary>define static property for AlterCryptographicProvider</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterDatabase">
            <summary>define static property for AlterDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterDatabaseAuditSpecification">
            <summary>define static property for AlterDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterDatabaseEncryptionKey">
            <summary>define static property for AlterDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterEndpoint">
            <summary>define static property for AlterEndpoint</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterEventSession">
            <summary>define static property for AlterEventSession</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterExtendedProperty">
            <summary>define static property for AlterExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterFulltextCatalog">
            <summary>define static property for AlterFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterFulltextIndex">
            <summary>define static property for AlterFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterFulltextStoplist">
            <summary>define static property for AlterFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterFunction">
            <summary>define static property for AlterFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterIndex">
            <summary>define static property for AlterIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterInstance">
            <summary>define static property for AlterInstance</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterLinkedServer">
            <summary>define static property for AlterLinkedServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterLogin">
            <summary>define static property for AlterLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterMasterKey">
            <summary>define static property for AlterMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterMessage">
            <summary>define static property for AlterMessage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterMessageType">
            <summary>define static property for AlterMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterPartitionFunction">
            <summary>define static property for AlterPartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterPartitionScheme">
            <summary>define static property for AlterPartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterPlanGuide">
            <summary>define static property for AlterPlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterProcedure">
            <summary>define static property for AlterProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterQueue">
            <summary>define static property for AlterQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterRemoteServer">
            <summary>define static property for AlterRemoteServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterRemoteServiceBinding">
            <summary>define static property for AlterRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterResourceGovernorConfig">
            <summary>define static property for AlterResourceGovernorConfig</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterResourcePool">
            <summary>define static property for AlterResourcePool</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterRole">
            <summary>define static property for AlterRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterRoute">
            <summary>define static property for AlterRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterSchema">
            <summary>define static property for AlterSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterSearchPropertyList">
            <summary>define static property for AlterSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterSecurityPolicy">
            <summary>define static property for AlterSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterSequence">
            <summary>define static property for AlterSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterServerAudit">
            <summary>define static property for AlterServerAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterServerAuditSpecification">
            <summary>define static property for AlterServerAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterServerConfiguration">
            <summary>define static property for AlterServerConfiguration</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterServerRole">
            <summary>define static property for AlterServerRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterService">
            <summary>define static property for AlterService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterServiceMasterKey">
            <summary>define static property for AlterServiceMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterSymmetricKey">
            <summary>define static property for AlterSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterTable">
            <summary>define static property for AlterTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterTrigger">
            <summary>define static property for AlterTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterUser">
            <summary>define static property for AlterUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterView">
            <summary>define static property for AlterView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterWorkloadGroup">
            <summary>define static property for AlterWorkloadGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.AlterXmlSchemaCollection">
            <summary>define static property for AlterXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.BindDefault">
            <summary>define static property for BindDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.BindRule">
            <summary>define static property for BindRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateApplicationRole">
            <summary>define static property for CreateApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateAssembly">
            <summary>define static property for CreateAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateAsymmetricKey">
            <summary>define static property for CreateAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateAudit">
            <summary>define static property for CreateAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateAvailabilityGroup">
            <summary>define static property for CreateAvailabilityGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateBrokerPriority">
            <summary>define static property for CreateBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateCertificate">
            <summary>define static property for CreateCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateColumnEncryptionKey">
            <summary>define static property for CreateColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateColumnMasterKey">
            <summary>define static property for CreateColumnMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateContract">
            <summary>define static property for CreateContract</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateCredential">
            <summary>define static property for CreateCredential</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateCryptographicProvider">
            <summary>define static property for CreateCryptographicProvider</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateDatabase">
            <summary>define static property for CreateDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateDatabaseAuditSpecification">
            <summary>define static property for CreateDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateDatabaseEncryptionKey">
            <summary>define static property for CreateDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateDefault">
            <summary>define static property for CreateDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateEndpoint">
            <summary>define static property for CreateEndpoint</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateEventNotification">
            <summary>define static property for CreateEventNotification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateEventSession">
            <summary>define static property for CreateEventSession</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateExtendedProcedure">
            <summary>define static property for CreateExtendedProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateExtendedProperty">
            <summary>define static property for CreateExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateFulltextCatalog">
            <summary>define static property for CreateFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateFulltextIndex">
            <summary>define static property for CreateFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateFulltextStoplist">
            <summary>define static property for CreateFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateFunction">
            <summary>define static property for CreateFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateIndex">
            <summary>define static property for CreateIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateLinkedServer">
            <summary>define static property for CreateLinkedServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateLinkedServerLogin">
            <summary>define static property for CreateLinkedServerLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateLogin">
            <summary>define static property for CreateLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateMasterKey">
            <summary>define static property for CreateMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateMessage">
            <summary>define static property for CreateMessage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateMessageType">
            <summary>define static property for CreateMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreatePartitionFunction">
            <summary>define static property for CreatePartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreatePartitionScheme">
            <summary>define static property for CreatePartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreatePlanGuide">
            <summary>define static property for CreatePlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateProcedure">
            <summary>define static property for CreateProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateQueue">
            <summary>define static property for CreateQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateRemoteServer">
            <summary>define static property for CreateRemoteServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateRemoteServiceBinding">
            <summary>define static property for CreateRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateResourcePool">
            <summary>define static property for CreateResourcePool</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateRole">
            <summary>define static property for CreateRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateRoute">
            <summary>define static property for CreateRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateRule">
            <summary>define static property for CreateRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateSchema">
            <summary>define static property for CreateSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateSearchPropertyList">
            <summary>define static property for CreateSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateSecurityPolicy">
            <summary>define static property for CreateSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateSequence">
            <summary>define static property for CreateSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateServerAudit">
            <summary>define static property for CreateServerAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateServerAuditSpecification">
            <summary>define static property for CreateServerAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateServerRole">
            <summary>define static property for CreateServerRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateService">
            <summary>define static property for CreateService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateSpatialIndex">
            <summary>define static property for CreateSpatialIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateStatistics">
            <summary>define static property for CreateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateSymmetricKey">
            <summary>define static property for CreateSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateSynonym">
            <summary>define static property for CreateSynonym</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateTable">
            <summary>define static property for CreateTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateTrigger">
            <summary>define static property for CreateTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateType">
            <summary>define static property for CreateType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateUser">
            <summary>define static property for CreateUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateView">
            <summary>define static property for CreateView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateWorkloadGroup">
            <summary>define static property for CreateWorkloadGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateXmlIndex">
            <summary>define static property for CreateXmlIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.CreateXmlSchemaCollection">
            <summary>define static property for CreateXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DenyDatabase">
            <summary>define static property for DenyDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DenyServer">
            <summary>define static property for DenyServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropApplicationRole">
            <summary>define static property for DropApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropAssembly">
            <summary>define static property for DropAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropAsymmetricKey">
            <summary>define static property for DropAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropAudit">
            <summary>define static property for DropAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropAvailabilityGroup">
            <summary>define static property for DropAvailabilityGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropBrokerPriority">
            <summary>define static property for DropBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropCertificate">
            <summary>define static property for DropCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropColumnEncryptionKey">
            <summary>define static property for DropColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropColumnMasterKey">
            <summary>define static property for DropColumnMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropContract">
            <summary>define static property for DropContract</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropCredential">
            <summary>define static property for DropCredential</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropCryptographicProvider">
            <summary>define static property for DropCryptographicProvider</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropDatabase">
            <summary>define static property for DropDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropDatabaseAuditSpecification">
            <summary>define static property for DropDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropDatabaseEncryptionKey">
            <summary>define static property for DropDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropDefault">
            <summary>define static property for DropDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropEndpoint">
            <summary>define static property for DropEndpoint</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropEventNotification">
            <summary>define static property for DropEventNotification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropEventSession">
            <summary>define static property for DropEventSession</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropExtendedProcedure">
            <summary>define static property for DropExtendedProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropExtendedProperty">
            <summary>define static property for DropExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropFulltextCatalog">
            <summary>define static property for DropFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropFulltextIndex">
            <summary>define static property for DropFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropFulltextStoplist">
            <summary>define static property for DropFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropFunction">
            <summary>define static property for DropFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropIndex">
            <summary>define static property for DropIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropLinkedServer">
            <summary>define static property for DropLinkedServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropLinkedServerLogin">
            <summary>define static property for DropLinkedServerLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropLogin">
            <summary>define static property for DropLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropMasterKey">
            <summary>define static property for DropMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropMessage">
            <summary>define static property for DropMessage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropMessageType">
            <summary>define static property for DropMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropPartitionFunction">
            <summary>define static property for DropPartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropPartitionScheme">
            <summary>define static property for DropPartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropPlanGuide">
            <summary>define static property for DropPlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropProcedure">
            <summary>define static property for DropProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropQueue">
            <summary>define static property for DropQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropRemoteServer">
            <summary>define static property for DropRemoteServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropRemoteServiceBinding">
            <summary>define static property for DropRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropResourcePool">
            <summary>define static property for DropResourcePool</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropRole">
            <summary>define static property for DropRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropRoleMember">
            <summary>define static property for DropRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropRoute">
            <summary>define static property for DropRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropRule">
            <summary>define static property for DropRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropSchema">
            <summary>define static property for DropSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropSearchPropertyList">
            <summary>define static property for DropSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropSecurityPolicy">
            <summary>define static property for DropSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropSequence">
            <summary>define static property for DropSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropServerAudit">
            <summary>define static property for DropServerAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropServerAuditSpecification">
            <summary>define static property for DropServerAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropServerRole">
            <summary>define static property for DropServerRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropServerRoleMember">
            <summary>define static property for DropServerRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropService">
            <summary>define static property for DropService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropSignature">
            <summary>define static property for DropSignature</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropSignatureSchemaObject">
            <summary>define static property for DropSignatureSchemaObject</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropStatistics">
            <summary>define static property for DropStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropSymmetricKey">
            <summary>define static property for DropSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropSynonym">
            <summary>define static property for DropSynonym</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropTable">
            <summary>define static property for DropTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropTrigger">
            <summary>define static property for DropTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropType">
            <summary>define static property for DropType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropUser">
            <summary>define static property for DropUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropView">
            <summary>define static property for DropView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropWorkloadGroup">
            <summary>define static property for DropWorkloadGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.DropXmlSchemaCollection">
            <summary>define static property for DropXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.GrantDatabase">
            <summary>define static property for GrantDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.GrantServer">
            <summary>define static property for GrantServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.Rename">
            <summary>define static property for Rename</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.RevokeDatabase">
            <summary>define static property for RevokeDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.RevokeServer">
            <summary>define static property for RevokeServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.UnbindDefault">
            <summary>define static property for UnbindDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.UnbindRule">
            <summary>define static property for UnbindRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEvent.UpdateStatistics">
            <summary>define static property for UpdateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AddRoleMember">
            <summary>define property for AddRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AddServerRoleMember">
            <summary>define property for AddServerRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AddSignature">
            <summary>define property for AddSignature</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AddSignatureSchemaObject">
            <summary>define property for AddSignatureSchemaObject</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterApplicationRole">
            <summary>define property for AlterApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterAssembly">
            <summary>define property for AlterAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterAsymmetricKey">
            <summary>define property for AlterAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterAudit">
            <summary>define property for AlterAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterAuthorizationDatabase">
            <summary>define property for AlterAuthorizationDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterAuthorizationServer">
            <summary>define property for AlterAuthorizationServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterAvailabilityGroup">
            <summary>define property for AlterAvailabilityGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterBrokerPriority">
            <summary>define property for AlterBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterCertificate">
            <summary>define property for AlterCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterColumnEncryptionKey">
            <summary>define property for AlterColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterCredential">
            <summary>define property for AlterCredential</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterCryptographicProvider">
            <summary>define property for AlterCryptographicProvider</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterDatabase">
            <summary>define property for AlterDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterDatabaseAuditSpecification">
            <summary>define property for AlterDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterDatabaseEncryptionKey">
            <summary>define property for AlterDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterEndpoint">
            <summary>define property for AlterEndpoint</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterEventSession">
            <summary>define property for AlterEventSession</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterExtendedProperty">
            <summary>define property for AlterExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterFulltextCatalog">
            <summary>define property for AlterFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterFulltextIndex">
            <summary>define property for AlterFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterFulltextStoplist">
            <summary>define property for AlterFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterFunction">
            <summary>define property for AlterFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterIndex">
            <summary>define property for AlterIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterInstance">
            <summary>define property for AlterInstance</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterLinkedServer">
            <summary>define property for AlterLinkedServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterLogin">
            <summary>define property for AlterLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterMasterKey">
            <summary>define property for AlterMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterMessage">
            <summary>define property for AlterMessage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterMessageType">
            <summary>define property for AlterMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterPartitionFunction">
            <summary>define property for AlterPartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterPartitionScheme">
            <summary>define property for AlterPartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterPlanGuide">
            <summary>define property for AlterPlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterProcedure">
            <summary>define property for AlterProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterQueue">
            <summary>define property for AlterQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterRemoteServer">
            <summary>define property for AlterRemoteServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterRemoteServiceBinding">
            <summary>define property for AlterRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterResourceGovernorConfig">
            <summary>define property for AlterResourceGovernorConfig</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterResourcePool">
            <summary>define property for AlterResourcePool</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterRole">
            <summary>define property for AlterRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterRoute">
            <summary>define property for AlterRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterSchema">
            <summary>define property for AlterSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterSearchPropertyList">
            <summary>define property for AlterSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterSecurityPolicy">
            <summary>define property for AlterSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterSequence">
            <summary>define property for AlterSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterServerAudit">
            <summary>define property for AlterServerAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterServerAuditSpecification">
            <summary>define property for AlterServerAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterServerConfiguration">
            <summary>define property for AlterServerConfiguration</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterServerRole">
            <summary>define property for AlterServerRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterService">
            <summary>define property for AlterService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterServiceMasterKey">
            <summary>define property for AlterServiceMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterSymmetricKey">
            <summary>define property for AlterSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterTable">
            <summary>define property for AlterTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterTrigger">
            <summary>define property for AlterTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterUser">
            <summary>define property for AlterUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterView">
            <summary>define property for AlterView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterWorkloadGroup">
            <summary>define property for AlterWorkloadGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.AlterXmlSchemaCollection">
            <summary>define property for AlterXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.BindDefault">
            <summary>define property for BindDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.BindRule">
            <summary>define property for BindRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateApplicationRole">
            <summary>define property for CreateApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateAssembly">
            <summary>define property for CreateAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateAsymmetricKey">
            <summary>define property for CreateAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateAudit">
            <summary>define property for CreateAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateAvailabilityGroup">
            <summary>define property for CreateAvailabilityGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateBrokerPriority">
            <summary>define property for CreateBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateCertificate">
            <summary>define property for CreateCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateColumnEncryptionKey">
            <summary>define property for CreateColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateColumnMasterKey">
            <summary>define property for CreateColumnMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateContract">
            <summary>define property for CreateContract</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateCredential">
            <summary>define property for CreateCredential</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateCryptographicProvider">
            <summary>define property for CreateCryptographicProvider</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateDatabase">
            <summary>define property for CreateDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateDatabaseAuditSpecification">
            <summary>define property for CreateDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateDatabaseEncryptionKey">
            <summary>define property for CreateDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateDefault">
            <summary>define property for CreateDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateEndpoint">
            <summary>define property for CreateEndpoint</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateEventNotification">
            <summary>define property for CreateEventNotification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateEventSession">
            <summary>define property for CreateEventSession</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateExtendedProcedure">
            <summary>define property for CreateExtendedProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateExtendedProperty">
            <summary>define property for CreateExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateFulltextCatalog">
            <summary>define property for CreateFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateFulltextIndex">
            <summary>define property for CreateFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateFulltextStoplist">
            <summary>define property for CreateFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateFunction">
            <summary>define property for CreateFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateIndex">
            <summary>define property for CreateIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateLinkedServer">
            <summary>define property for CreateLinkedServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateLinkedServerLogin">
            <summary>define property for CreateLinkedServerLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateLogin">
            <summary>define property for CreateLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateMasterKey">
            <summary>define property for CreateMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateMessage">
            <summary>define property for CreateMessage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateMessageType">
            <summary>define property for CreateMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreatePartitionFunction">
            <summary>define property for CreatePartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreatePartitionScheme">
            <summary>define property for CreatePartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreatePlanGuide">
            <summary>define property for CreatePlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateProcedure">
            <summary>define property for CreateProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateQueue">
            <summary>define property for CreateQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateRemoteServer">
            <summary>define property for CreateRemoteServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateRemoteServiceBinding">
            <summary>define property for CreateRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateResourcePool">
            <summary>define property for CreateResourcePool</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateRole">
            <summary>define property for CreateRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateRoute">
            <summary>define property for CreateRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateRule">
            <summary>define property for CreateRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateSchema">
            <summary>define property for CreateSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateSearchPropertyList">
            <summary>define property for CreateSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateSecurityPolicy">
            <summary>define property for CreateSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateSequence">
            <summary>define property for CreateSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateServerAudit">
            <summary>define property for CreateServerAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateServerAuditSpecification">
            <summary>define property for CreateServerAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateServerRole">
            <summary>define property for CreateServerRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateService">
            <summary>define property for CreateService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateSpatialIndex">
            <summary>define property for CreateSpatialIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateStatistics">
            <summary>define property for CreateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateSymmetricKey">
            <summary>define property for CreateSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateSynonym">
            <summary>define property for CreateSynonym</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateTable">
            <summary>define property for CreateTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateTrigger">
            <summary>define property for CreateTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateType">
            <summary>define property for CreateType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateUser">
            <summary>define property for CreateUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateView">
            <summary>define property for CreateView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateWorkloadGroup">
            <summary>define property for CreateWorkloadGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateXmlIndex">
            <summary>define property for CreateXmlIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.CreateXmlSchemaCollection">
            <summary>define property for CreateXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DenyDatabase">
            <summary>define property for DenyDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DenyServer">
            <summary>define property for DenyServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropApplicationRole">
            <summary>define property for DropApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropAssembly">
            <summary>define property for DropAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropAsymmetricKey">
            <summary>define property for DropAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropAudit">
            <summary>define property for DropAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropAvailabilityGroup">
            <summary>define property for DropAvailabilityGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropBrokerPriority">
            <summary>define property for DropBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropCertificate">
            <summary>define property for DropCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropColumnEncryptionKey">
            <summary>define property for DropColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropColumnMasterKey">
            <summary>define property for DropColumnMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropContract">
            <summary>define property for DropContract</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropCredential">
            <summary>define property for DropCredential</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropCryptographicProvider">
            <summary>define property for DropCryptographicProvider</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropDatabase">
            <summary>define property for DropDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropDatabaseAuditSpecification">
            <summary>define property for DropDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropDatabaseEncryptionKey">
            <summary>define property for DropDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropDefault">
            <summary>define property for DropDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropEndpoint">
            <summary>define property for DropEndpoint</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropEventNotification">
            <summary>define property for DropEventNotification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropEventSession">
            <summary>define property for DropEventSession</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropExtendedProcedure">
            <summary>define property for DropExtendedProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropExtendedProperty">
            <summary>define property for DropExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropFulltextCatalog">
            <summary>define property for DropFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropFulltextIndex">
            <summary>define property for DropFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropFulltextStoplist">
            <summary>define property for DropFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropFunction">
            <summary>define property for DropFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropIndex">
            <summary>define property for DropIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropLinkedServer">
            <summary>define property for DropLinkedServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropLinkedServerLogin">
            <summary>define property for DropLinkedServerLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropLogin">
            <summary>define property for DropLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropMasterKey">
            <summary>define property for DropMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropMessage">
            <summary>define property for DropMessage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropMessageType">
            <summary>define property for DropMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropPartitionFunction">
            <summary>define property for DropPartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropPartitionScheme">
            <summary>define property for DropPartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropPlanGuide">
            <summary>define property for DropPlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropProcedure">
            <summary>define property for DropProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropQueue">
            <summary>define property for DropQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropRemoteServer">
            <summary>define property for DropRemoteServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropRemoteServiceBinding">
            <summary>define property for DropRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropResourcePool">
            <summary>define property for DropResourcePool</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropRole">
            <summary>define property for DropRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropRoleMember">
            <summary>define property for DropRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropRoute">
            <summary>define property for DropRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropRule">
            <summary>define property for DropRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropSchema">
            <summary>define property for DropSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropSearchPropertyList">
            <summary>define property for DropSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropSecurityPolicy">
            <summary>define property for DropSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropSequence">
            <summary>define property for DropSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropServerAudit">
            <summary>define property for DropServerAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropServerAuditSpecification">
            <summary>define property for DropServerAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropServerRole">
            <summary>define property for DropServerRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropServerRoleMember">
            <summary>define property for DropServerRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropService">
            <summary>define property for DropService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropSignature">
            <summary>define property for DropSignature</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropSignatureSchemaObject">
            <summary>define property for DropSignatureSchemaObject</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropStatistics">
            <summary>define property for DropStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropSymmetricKey">
            <summary>define property for DropSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropSynonym">
            <summary>define property for DropSynonym</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropTable">
            <summary>define property for DropTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropTrigger">
            <summary>define property for DropTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropType">
            <summary>define property for DropType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropUser">
            <summary>define property for DropUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropView">
            <summary>define property for DropView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropWorkloadGroup">
            <summary>define property for DropWorkloadGroup</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.DropXmlSchemaCollection">
            <summary>define property for DropXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.GrantDatabase">
            <summary>define property for GrantDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.GrantServer">
            <summary>define property for GrantServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.Rename">
            <summary>define property for Rename</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.RevokeDatabase">
            <summary>define property for RevokeDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.RevokeServer">
            <summary>define property for RevokeServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.UnbindDefault">
            <summary>define property for UnbindDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.UnbindRule">
            <summary>define property for UnbindRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerEventSet.UpdateStatistics">
            <summary>define property for UpdateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AssemblyLoad">
            <summary>define static property for AssemblyLoad</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditAddloginEvent">
            <summary>define static property for AuditAddloginEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditAddDBUserEvent">
            <summary>define static property for AuditAddDBUserEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditAddLoginToServerRoleEvent">
            <summary>define static property for AuditAddLoginToServerRoleEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditAddMemberToDBRoleEvent">
            <summary>define static property for AuditAddMemberToDBRoleEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditAddRoleEvent">
            <summary>define static property for AuditAddRoleEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditAppRoleChangePasswordEvent">
            <summary>define static property for AuditAppRoleChangePasswordEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditBackupRestoreEvent">
            <summary>define static property for AuditBackupRestoreEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditChangeAuditEvent">
            <summary>define static property for AuditChangeAuditEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditChangeDatabaseOwner">
            <summary>define static property for AuditChangeDatabaseOwner</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabaseManagementEvent">
            <summary>define static property for AuditDatabaseManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabaseObjectAccessEvent">
            <summary>define static property for AuditDatabaseObjectAccessEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabaseObjectGdrEvent">
            <summary>define static property for AuditDatabaseObjectGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabaseObjectManagementEvent">
            <summary>define static property for AuditDatabaseObjectManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabaseObjectTakeOwnershipEvent">
            <summary>define static property for AuditDatabaseObjectTakeOwnershipEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabaseOperationEvent">
            <summary>define static property for AuditDatabaseOperationEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabasePrincipalImpersonationEvent">
            <summary>define static property for AuditDatabasePrincipalImpersonationEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabasePrincipalManagementEvent">
            <summary>define static property for AuditDatabasePrincipalManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDatabaseScopeGdrEvent">
            <summary>define static property for AuditDatabaseScopeGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditDbccEvent">
            <summary>define static property for AuditDbccEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditFulltext">
            <summary>define static property for AuditFulltext</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditLogin">
            <summary>define static property for AuditLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditLoginChangePasswordEvent">
            <summary>define static property for AuditLoginChangePasswordEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditLoginChangePropertyEvent">
            <summary>define static property for AuditLoginChangePropertyEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditLoginFailed">
            <summary>define static property for AuditLoginFailed</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditLoginGdrEvent">
            <summary>define static property for AuditLoginGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditLogout">
            <summary>define static property for AuditLogout</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditSchemaObjectAccessEvent">
            <summary>define static property for AuditSchemaObjectAccessEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditSchemaObjectGdrEvent">
            <summary>define static property for AuditSchemaObjectGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditSchemaObjectManagementEvent">
            <summary>define static property for AuditSchemaObjectManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditSchemaObjectTakeOwnershipEvent">
            <summary>define static property for AuditSchemaObjectTakeOwnershipEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditServerAlterTraceEvent">
            <summary>define static property for AuditServerAlterTraceEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditServerObjectGdrEvent">
            <summary>define static property for AuditServerObjectGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditServerObjectManagementEvent">
            <summary>define static property for AuditServerObjectManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditServerObjectTakeOwnershipEvent">
            <summary>define static property for AuditServerObjectTakeOwnershipEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditServerOperationEvent">
            <summary>define static property for AuditServerOperationEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditServerPrincipalImpersonationEvent">
            <summary>define static property for AuditServerPrincipalImpersonationEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditServerPrincipalManagementEvent">
            <summary>define static property for AuditServerPrincipalManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.AuditServerScopeGdrEvent">
            <summary>define static property for AuditServerScopeGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.BitmapWarning">
            <summary>define static property for BitmapWarning</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.BlockedProcessReport">
            <summary>define static property for BlockedProcessReport</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.CpuThresholdExceeded">
            <summary>define static property for CpuThresholdExceeded</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.DatabaseMirroringStateChange">
            <summary>define static property for DatabaseMirroringStateChange</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.DatabaseSuspectDataPage">
            <summary>define static property for DatabaseSuspectDataPage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.DataFileAutoGrow">
            <summary>define static property for DataFileAutoGrow</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.DataFileAutoShrink">
            <summary>define static property for DataFileAutoShrink</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.DeadlockGraph">
            <summary>define static property for DeadlockGraph</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.DeprecationAnnouncement">
            <summary>define static property for DeprecationAnnouncement</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.DeprecationFinalSupport">
            <summary>define static property for DeprecationFinalSupport</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Errorlog">
            <summary>define static property for Errorlog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Eventlog">
            <summary>define static property for Eventlog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Exception">
            <summary>define static property for Exception</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ExchangeSpillEvent">
            <summary>define static property for ExchangeSpillEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ExecutionWarnings">
            <summary>define static property for ExecutionWarnings</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.FtCrawlAborted">
            <summary>define static property for FtCrawlAborted</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.FtCrawlStarted">
            <summary>define static property for FtCrawlStarted</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.FtCrawlStopped">
            <summary>define static property for FtCrawlStopped</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.HashWarning">
            <summary>define static property for HashWarning</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.LockDeadlock">
            <summary>define static property for LockDeadlock</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.LockDeadlockChain">
            <summary>define static property for LockDeadlockChain</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.LockEscalation">
            <summary>define static property for LockEscalation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.LogFileAutoGrow">
            <summary>define static property for LogFileAutoGrow</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.LogFileAutoShrink">
            <summary>define static property for LogFileAutoShrink</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.MissingColumnStatistics">
            <summary>define static property for MissingColumnStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.MissingJoinPredicate">
            <summary>define static property for MissingJoinPredicate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.MountTape">
            <summary>define static property for MountTape</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ObjectAltered">
            <summary>define static property for ObjectAltered</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ObjectCreated">
            <summary>define static property for ObjectCreated</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ObjectDeleted">
            <summary>define static property for ObjectDeleted</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.OledbCallEvent">
            <summary>define static property for OledbCallEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.OledbDatareadEvent">
            <summary>define static property for OledbDatareadEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.OledbErrors">
            <summary>define static property for OledbErrors</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.OledbProviderInformation">
            <summary>define static property for OledbProviderInformation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.OledbQueryinterfaceEvent">
            <summary>define static property for OledbQueryinterfaceEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Qn_dynamics">
            <summary>define static property for Qn_dynamics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Qn_parameterTable">
            <summary>define static property for Qn_parameterTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Qn_subscription">
            <summary>define static property for Qn_subscription</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Qn_template">
            <summary>define static property for Qn_template</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ServerMemoryChange">
            <summary>define static property for ServerMemoryChange</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ShowplanAllForQueryCompile">
            <summary>define static property for ShowplanAllForQueryCompile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ShowplanXml">
            <summary>define static property for ShowplanXml</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ShowplanXmlForQueryCompile">
            <summary>define static property for ShowplanXmlForQueryCompile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.ShowplanXmlStatisticsProfile">
            <summary>define static property for ShowplanXmlStatisticsProfile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.SortWarnings">
            <summary>define static property for SortWarnings</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.SpCacheinsert">
            <summary>define static property for SpCacheinsert</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.SpCachemiss">
            <summary>define static property for SpCachemiss</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.SpCacheremove">
            <summary>define static property for SpCacheremove</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.SpRecompile">
            <summary>define static property for SpRecompile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.SqlStmtrecompile">
            <summary>define static property for SqlStmtrecompile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceFileClose">
            <summary>define static property for TraceFileClose</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceAllEvents">
            <summary>define static property for TraceAllEvents</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceClr">
            <summary>define static property for TraceClr</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceDatabase">
            <summary>define static property for TraceDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceDeprecation">
            <summary>define static property for TraceDeprecation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceErrorsAndWarnings">
            <summary>define static property for TraceErrorsAndWarnings</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceFullText">
            <summary>define static property for TraceFullText</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceLocks">
            <summary>define static property for TraceLocks</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceObjects">
            <summary>define static property for TraceObjects</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceOledb">
            <summary>define static property for TraceOledb</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TracePerformance">
            <summary>define static property for TracePerformance</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceQueryNotifications">
            <summary>define static property for TraceQueryNotifications</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceSecurityAudit">
            <summary>define static property for TraceSecurityAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceServer">
            <summary>define static property for TraceServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceStoredProcedures">
            <summary>define static property for TraceStoredProcedures</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceTsql">
            <summary>define static property for TraceTsql</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.TraceUserConfigurable">
            <summary>define static property for TraceUserConfigurable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable0">
            <summary>define static property for Userconfigurable0</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable1">
            <summary>define static property for Userconfigurable1</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable2">
            <summary>define static property for Userconfigurable2</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable3">
            <summary>define static property for Userconfigurable3</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable4">
            <summary>define static property for Userconfigurable4</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable5">
            <summary>define static property for Userconfigurable5</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable6">
            <summary>define static property for Userconfigurable6</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable7">
            <summary>define static property for Userconfigurable7</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable8">
            <summary>define static property for Userconfigurable8</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.Userconfigurable9">
            <summary>define static property for Userconfigurable9</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.UserErrorMessage">
            <summary>define static property for UserErrorMessage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEvent.XqueryStaticType">
            <summary>define static property for XqueryStaticType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AssemblyLoad">
            <summary>define property for AssemblyLoad</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditAddloginEvent">
            <summary>define property for AuditAddloginEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditAddDBUserEvent">
            <summary>define property for AuditAddDBUserEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditAddLoginToServerRoleEvent">
            <summary>define property for AuditAddLoginToServerRoleEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditAddMemberToDBRoleEvent">
            <summary>define property for AuditAddMemberToDBRoleEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditAddRoleEvent">
            <summary>define property for AuditAddRoleEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditAppRoleChangePasswordEvent">
            <summary>define property for AuditAppRoleChangePasswordEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditBackupRestoreEvent">
            <summary>define property for AuditBackupRestoreEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditChangeAuditEvent">
            <summary>define property for AuditChangeAuditEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditChangeDatabaseOwner">
            <summary>define property for AuditChangeDatabaseOwner</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabaseManagementEvent">
            <summary>define property for AuditDatabaseManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabaseObjectAccessEvent">
            <summary>define property for AuditDatabaseObjectAccessEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabaseObjectGdrEvent">
            <summary>define property for AuditDatabaseObjectGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabaseObjectManagementEvent">
            <summary>define property for AuditDatabaseObjectManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabaseObjectTakeOwnershipEvent">
            <summary>define property for AuditDatabaseObjectTakeOwnershipEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabaseOperationEvent">
            <summary>define property for AuditDatabaseOperationEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabasePrincipalImpersonationEvent">
            <summary>define property for AuditDatabasePrincipalImpersonationEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabasePrincipalManagementEvent">
            <summary>define property for AuditDatabasePrincipalManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDatabaseScopeGdrEvent">
            <summary>define property for AuditDatabaseScopeGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditDbccEvent">
            <summary>define property for AuditDbccEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditFulltext">
            <summary>define property for AuditFulltext</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditLogin">
            <summary>define property for AuditLogin</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditLoginChangePasswordEvent">
            <summary>define property for AuditLoginChangePasswordEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditLoginChangePropertyEvent">
            <summary>define property for AuditLoginChangePropertyEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditLoginFailed">
            <summary>define property for AuditLoginFailed</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditLoginGdrEvent">
            <summary>define property for AuditLoginGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditLogout">
            <summary>define property for AuditLogout</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditSchemaObjectAccessEvent">
            <summary>define property for AuditSchemaObjectAccessEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditSchemaObjectGdrEvent">
            <summary>define property for AuditSchemaObjectGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditSchemaObjectManagementEvent">
            <summary>define property for AuditSchemaObjectManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditSchemaObjectTakeOwnershipEvent">
            <summary>define property for AuditSchemaObjectTakeOwnershipEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditServerAlterTraceEvent">
            <summary>define property for AuditServerAlterTraceEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditServerObjectGdrEvent">
            <summary>define property for AuditServerObjectGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditServerObjectManagementEvent">
            <summary>define property for AuditServerObjectManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditServerObjectTakeOwnershipEvent">
            <summary>define property for AuditServerObjectTakeOwnershipEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditServerOperationEvent">
            <summary>define property for AuditServerOperationEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditServerPrincipalImpersonationEvent">
            <summary>define property for AuditServerPrincipalImpersonationEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditServerPrincipalManagementEvent">
            <summary>define property for AuditServerPrincipalManagementEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.AuditServerScopeGdrEvent">
            <summary>define property for AuditServerScopeGdrEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.BitmapWarning">
            <summary>define property for BitmapWarning</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.BlockedProcessReport">
            <summary>define property for BlockedProcessReport</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.CpuThresholdExceeded">
            <summary>define property for CpuThresholdExceeded</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.DatabaseMirroringStateChange">
            <summary>define property for DatabaseMirroringStateChange</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.DatabaseSuspectDataPage">
            <summary>define property for DatabaseSuspectDataPage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.DataFileAutoGrow">
            <summary>define property for DataFileAutoGrow</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.DataFileAutoShrink">
            <summary>define property for DataFileAutoShrink</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.DeadlockGraph">
            <summary>define property for DeadlockGraph</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.DeprecationAnnouncement">
            <summary>define property for DeprecationAnnouncement</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.DeprecationFinalSupport">
            <summary>define property for DeprecationFinalSupport</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Errorlog">
            <summary>define property for Errorlog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Eventlog">
            <summary>define property for Eventlog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Exception">
            <summary>define property for Exception</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ExchangeSpillEvent">
            <summary>define property for ExchangeSpillEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ExecutionWarnings">
            <summary>define property for ExecutionWarnings</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.FtCrawlAborted">
            <summary>define property for FtCrawlAborted</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.FtCrawlStarted">
            <summary>define property for FtCrawlStarted</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.FtCrawlStopped">
            <summary>define property for FtCrawlStopped</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.HashWarning">
            <summary>define property for HashWarning</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.LockDeadlock">
            <summary>define property for LockDeadlock</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.LockDeadlockChain">
            <summary>define property for LockDeadlockChain</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.LockEscalation">
            <summary>define property for LockEscalation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.LogFileAutoGrow">
            <summary>define property for LogFileAutoGrow</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.LogFileAutoShrink">
            <summary>define property for LogFileAutoShrink</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.MissingColumnStatistics">
            <summary>define property for MissingColumnStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.MissingJoinPredicate">
            <summary>define property for MissingJoinPredicate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.MountTape">
            <summary>define property for MountTape</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ObjectAltered">
            <summary>define property for ObjectAltered</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ObjectCreated">
            <summary>define property for ObjectCreated</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ObjectDeleted">
            <summary>define property for ObjectDeleted</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.OledbCallEvent">
            <summary>define property for OledbCallEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.OledbDatareadEvent">
            <summary>define property for OledbDatareadEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.OledbErrors">
            <summary>define property for OledbErrors</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.OledbProviderInformation">
            <summary>define property for OledbProviderInformation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.OledbQueryinterfaceEvent">
            <summary>define property for OledbQueryinterfaceEvent</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Qn_dynamics">
            <summary>define property for Qn_dynamics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Qn_parameterTable">
            <summary>define property for Qn_parameterTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Qn_subscription">
            <summary>define property for Qn_subscription</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Qn_template">
            <summary>define property for Qn_template</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ServerMemoryChange">
            <summary>define property for ServerMemoryChange</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ShowplanAllForQueryCompile">
            <summary>define property for ShowplanAllForQueryCompile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ShowplanXml">
            <summary>define property for ShowplanXml</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ShowplanXmlForQueryCompile">
            <summary>define property for ShowplanXmlForQueryCompile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.ShowplanXmlStatisticsProfile">
            <summary>define property for ShowplanXmlStatisticsProfile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.SortWarnings">
            <summary>define property for SortWarnings</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.SpCacheinsert">
            <summary>define property for SpCacheinsert</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.SpCachemiss">
            <summary>define property for SpCachemiss</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.SpCacheremove">
            <summary>define property for SpCacheremove</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.SpRecompile">
            <summary>define property for SpRecompile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.SqlStmtrecompile">
            <summary>define property for SqlStmtrecompile</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceFileClose">
            <summary>define property for TraceFileClose</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceAllEvents">
            <summary>define property for TraceAllEvents</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceClr">
            <summary>define property for TraceClr</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceDatabase">
            <summary>define property for TraceDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceDeprecation">
            <summary>define property for TraceDeprecation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceErrorsAndWarnings">
            <summary>define property for TraceErrorsAndWarnings</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceFullText">
            <summary>define property for TraceFullText</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceLocks">
            <summary>define property for TraceLocks</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceObjects">
            <summary>define property for TraceObjects</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceOledb">
            <summary>define property for TraceOledb</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TracePerformance">
            <summary>define property for TracePerformance</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceQueryNotifications">
            <summary>define property for TraceQueryNotifications</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceSecurityAudit">
            <summary>define property for TraceSecurityAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceServer">
            <summary>define property for TraceServer</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceStoredProcedures">
            <summary>define property for TraceStoredProcedures</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceTsql">
            <summary>define property for TraceTsql</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.TraceUserConfigurable">
            <summary>define property for TraceUserConfigurable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable0">
            <summary>define property for Userconfigurable0</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable1">
            <summary>define property for Userconfigurable1</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable2">
            <summary>define property for Userconfigurable2</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable3">
            <summary>define property for Userconfigurable3</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable4">
            <summary>define property for Userconfigurable4</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable5">
            <summary>define property for Userconfigurable5</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable6">
            <summary>define property for Userconfigurable6</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable7">
            <summary>define property for Userconfigurable7</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable8">
            <summary>define property for Userconfigurable8</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.Userconfigurable9">
            <summary>define property for Userconfigurable9</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.UserErrorMessage">
            <summary>define property for UserErrorMessage</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerTraceEventSet.XqueryStaticType">
            <summary>define property for XqueryStaticType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AddRoleMember">
            <summary>define static property for AddRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AddSignature">
            <summary>define static property for AddSignature</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AddSignatureSchemaObject">
            <summary>define static property for AddSignatureSchemaObject</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterApplicationRole">
            <summary>define static property for AlterApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterAssembly">
            <summary>define static property for AlterAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterAsymmetricKey">
            <summary>define static property for AlterAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterAudit">
            <summary>define static property for AlterAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterAuthorizationDatabase">
            <summary>define static property for AlterAuthorizationDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterBrokerPriority">
            <summary>define static property for AlterBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterCertificate">
            <summary>define static property for AlterCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterColumnEncryptionKey">
            <summary>define static property for AlterColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterDatabaseAuditSpecification">
            <summary>define static property for AlterDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterDatabaseEncryptionKey">
            <summary>define static property for AlterDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterExtendedProperty">
            <summary>define static property for AlterExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterFulltextCatalog">
            <summary>define static property for AlterFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterFulltextIndex">
            <summary>define static property for AlterFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterFulltextStoplist">
            <summary>define static property for AlterFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterFunction">
            <summary>define static property for AlterFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterIndex">
            <summary>define static property for AlterIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterMasterKey">
            <summary>define static property for AlterMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterMessageType">
            <summary>define static property for AlterMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterPartitionFunction">
            <summary>define static property for AlterPartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterPartitionScheme">
            <summary>define static property for AlterPartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterPlanGuide">
            <summary>define static property for AlterPlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterProcedure">
            <summary>define static property for AlterProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterQueue">
            <summary>define static property for AlterQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterRemoteServiceBinding">
            <summary>define static property for AlterRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterRole">
            <summary>define static property for AlterRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterRoute">
            <summary>define static property for AlterRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterSchema">
            <summary>define static property for AlterSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterSearchPropertyList">
            <summary>define static property for AlterSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterSecurityPolicy">
            <summary>define static property for AlterSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterSequence">
            <summary>define static property for AlterSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterService">
            <summary>define static property for AlterService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterSymmetricKey">
            <summary>define static property for AlterSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterTable">
            <summary>define static property for AlterTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterTrigger">
            <summary>define static property for AlterTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterUser">
            <summary>define static property for AlterUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterView">
            <summary>define static property for AlterView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.AlterXmlSchemaCollection">
            <summary>define static property for AlterXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.BindDefault">
            <summary>define static property for BindDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.BindRule">
            <summary>define static property for BindRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateApplicationRole">
            <summary>define static property for CreateApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateAssembly">
            <summary>define static property for CreateAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateAsymmetricKey">
            <summary>define static property for CreateAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateAudit">
            <summary>define static property for CreateAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateBrokerPriority">
            <summary>define static property for CreateBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateCertificate">
            <summary>define static property for CreateCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateColumnEncryptionKey">
            <summary>define static property for CreateColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateColumnMasterKey">
            <summary>define static property for CreateColumnMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateContract">
            <summary>define static property for CreateContract</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateDatabaseAuditSpecification">
            <summary>define static property for CreateDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateDatabaseEncryptionKey">
            <summary>define static property for CreateDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateDefault">
            <summary>define static property for CreateDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateEventNotification">
            <summary>define static property for CreateEventNotification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateExtendedProperty">
            <summary>define static property for CreateExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateFulltextCatalog">
            <summary>define static property for CreateFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateFulltextIndex">
            <summary>define static property for CreateFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateFulltextStoplist">
            <summary>define static property for CreateFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateFunction">
            <summary>define static property for CreateFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateIndex">
            <summary>define static property for CreateIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateMasterKey">
            <summary>define static property for CreateMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateMessageType">
            <summary>define static property for CreateMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreatePartitionFunction">
            <summary>define static property for CreatePartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreatePartitionScheme">
            <summary>define static property for CreatePartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreatePlanGuide">
            <summary>define static property for CreatePlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateProcedure">
            <summary>define static property for CreateProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateQueue">
            <summary>define static property for CreateQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateRemoteServiceBinding">
            <summary>define static property for CreateRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateRole">
            <summary>define static property for CreateRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateRoute">
            <summary>define static property for CreateRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateRule">
            <summary>define static property for CreateRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateSchema">
            <summary>define static property for CreateSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateSearchPropertyList">
            <summary>define static property for CreateSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateSecurityPolicy">
            <summary>define static property for CreateSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateSequence">
            <summary>define static property for CreateSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateService">
            <summary>define static property for CreateService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateSpatialIndex">
            <summary>define static property for CreateSpatialIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateStatistics">
            <summary>define static property for CreateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateSymmetricKey">
            <summary>define static property for CreateSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateSynonym">
            <summary>define static property for CreateSynonym</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateTable">
            <summary>define static property for CreateTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateTrigger">
            <summary>define static property for CreateTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateType">
            <summary>define static property for CreateType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateUser">
            <summary>define static property for CreateUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateView">
            <summary>define static property for CreateView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateXmlIndex">
            <summary>define static property for CreateXmlIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.CreateXmlSchemaCollection">
            <summary>define static property for CreateXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DenyDatabase">
            <summary>define static property for DenyDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropApplicationRole">
            <summary>define static property for DropApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropAssembly">
            <summary>define static property for DropAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropAsymmetricKey">
            <summary>define static property for DropAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropAudit">
            <summary>define static property for DropAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropBrokerPriority">
            <summary>define static property for DropBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropCertificate">
            <summary>define static property for DropCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropColumnEncryptionKey">
            <summary>define static property for DropColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropColumnMasterKey">
            <summary>define static property for DropColumnMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropContract">
            <summary>define static property for DropContract</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropDatabase">
            <summary>define static property for DropDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropDatabaseAuditSpecification">
            <summary>define static property for DropDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropDatabaseEncryptionKey">
            <summary>define static property for DropDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropDefault">
            <summary>define static property for DropDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropEventNotification">
            <summary>define static property for DropEventNotification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropExtendedProperty">
            <summary>define static property for DropExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropFulltextCatalog">
            <summary>define static property for DropFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropFulltextIndex">
            <summary>define static property for DropFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropFulltextStoplist">
            <summary>define static property for DropFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropFunction">
            <summary>define static property for DropFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropIndex">
            <summary>define static property for DropIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropMasterKey">
            <summary>define static property for DropMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropMessageType">
            <summary>define static property for DropMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropPartitionFunction">
            <summary>define static property for DropPartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropPartitionScheme">
            <summary>define static property for DropPartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropPlanGuide">
            <summary>define static property for DropPlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropProcedure">
            <summary>define static property for DropProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropQueue">
            <summary>define static property for DropQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropRemoteServiceBinding">
            <summary>define static property for DropRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropRole">
            <summary>define static property for DropRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropRoleMember">
            <summary>define static property for DropRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropRoute">
            <summary>define static property for DropRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropRule">
            <summary>define static property for DropRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropSchema">
            <summary>define static property for DropSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropSearchPropertyList">
            <summary>define static property for DropSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropSecurityPolicy">
            <summary>define static property for DropSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropSequence">
            <summary>define static property for DropSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropService">
            <summary>define static property for DropService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropSignature">
            <summary>define static property for DropSignature</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropSignatureSchemaObject">
            <summary>define static property for DropSignatureSchemaObject</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropStatistics">
            <summary>define static property for DropStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropSymmetricKey">
            <summary>define static property for DropSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropSynonym">
            <summary>define static property for DropSynonym</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropTable">
            <summary>define static property for DropTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropTrigger">
            <summary>define static property for DropTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropType">
            <summary>define static property for DropType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropUser">
            <summary>define static property for DropUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropView">
            <summary>define static property for DropView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.DropXmlSchemaCollection">
            <summary>define static property for DropXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.GrantDatabase">
            <summary>define static property for GrantDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.Rename">
            <summary>define static property for Rename</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.RevokeDatabase">
            <summary>define static property for RevokeDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.UnbindDefault">
            <summary>define static property for UnbindDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.UnbindRule">
            <summary>define static property for UnbindRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEvent.UpdateStatistics">
            <summary>define static property for UpdateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AddRoleMember">
            <summary>define property for AddRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AddSignature">
            <summary>define property for AddSignature</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AddSignatureSchemaObject">
            <summary>define property for AddSignatureSchemaObject</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterApplicationRole">
            <summary>define property for AlterApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterAssembly">
            <summary>define property for AlterAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterAsymmetricKey">
            <summary>define property for AlterAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterAudit">
            <summary>define property for AlterAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterAuthorizationDatabase">
            <summary>define property for AlterAuthorizationDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterBrokerPriority">
            <summary>define property for AlterBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterCertificate">
            <summary>define property for AlterCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterColumnEncryptionKey">
            <summary>define property for AlterColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterDatabaseAuditSpecification">
            <summary>define property for AlterDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterDatabaseEncryptionKey">
            <summary>define property for AlterDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterExtendedProperty">
            <summary>define property for AlterExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterFulltextCatalog">
            <summary>define property for AlterFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterFulltextIndex">
            <summary>define property for AlterFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterFulltextStoplist">
            <summary>define property for AlterFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterFunction">
            <summary>define property for AlterFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterIndex">
            <summary>define property for AlterIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterMasterKey">
            <summary>define property for AlterMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterMessageType">
            <summary>define property for AlterMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterPartitionFunction">
            <summary>define property for AlterPartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterPartitionScheme">
            <summary>define property for AlterPartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterPlanGuide">
            <summary>define property for AlterPlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterProcedure">
            <summary>define property for AlterProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterQueue">
            <summary>define property for AlterQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterRemoteServiceBinding">
            <summary>define property for AlterRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterRole">
            <summary>define property for AlterRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterRoute">
            <summary>define property for AlterRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterSchema">
            <summary>define property for AlterSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterSearchPropertyList">
            <summary>define property for AlterSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterSecurityPolicy">
            <summary>define property for AlterSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterSequence">
            <summary>define property for AlterSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterService">
            <summary>define property for AlterService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterSymmetricKey">
            <summary>define property for AlterSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterTable">
            <summary>define property for AlterTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterTrigger">
            <summary>define property for AlterTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterUser">
            <summary>define property for AlterUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterView">
            <summary>define property for AlterView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.AlterXmlSchemaCollection">
            <summary>define property for AlterXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.BindDefault">
            <summary>define property for BindDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.BindRule">
            <summary>define property for BindRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateApplicationRole">
            <summary>define property for CreateApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateAssembly">
            <summary>define property for CreateAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateAsymmetricKey">
            <summary>define property for CreateAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateAudit">
            <summary>define property for CreateAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateBrokerPriority">
            <summary>define property for CreateBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateCertificate">
            <summary>define property for CreateCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateColumnEncryptionKey">
            <summary>define property for CreateColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateColumnMasterKey">
            <summary>define property for CreateColumnMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateContract">
            <summary>define property for CreateContract</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateDatabaseAuditSpecification">
            <summary>define property for CreateDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateDatabaseEncryptionKey">
            <summary>define property for CreateDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateDefault">
            <summary>define property for CreateDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateEventNotification">
            <summary>define property for CreateEventNotification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateExtendedProperty">
            <summary>define property for CreateExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateFulltextCatalog">
            <summary>define property for CreateFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateFulltextIndex">
            <summary>define property for CreateFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateFulltextStoplist">
            <summary>define property for CreateFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateFunction">
            <summary>define property for CreateFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateIndex">
            <summary>define property for CreateIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateMasterKey">
            <summary>define property for CreateMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateMessageType">
            <summary>define property for CreateMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreatePartitionFunction">
            <summary>define property for CreatePartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreatePartitionScheme">
            <summary>define property for CreatePartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreatePlanGuide">
            <summary>define property for CreatePlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateProcedure">
            <summary>define property for CreateProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateQueue">
            <summary>define property for CreateQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateRemoteServiceBinding">
            <summary>define property for CreateRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateRole">
            <summary>define property for CreateRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateRoute">
            <summary>define property for CreateRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateRule">
            <summary>define property for CreateRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateSchema">
            <summary>define property for CreateSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateSearchPropertyList">
            <summary>define property for CreateSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateSecurityPolicy">
            <summary>define property for CreateSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateSequence">
            <summary>define property for CreateSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateService">
            <summary>define property for CreateService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateSpatialIndex">
            <summary>define property for CreateSpatialIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateStatistics">
            <summary>define property for CreateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateSymmetricKey">
            <summary>define property for CreateSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateSynonym">
            <summary>define property for CreateSynonym</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateTable">
            <summary>define property for CreateTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateTrigger">
            <summary>define property for CreateTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateType">
            <summary>define property for CreateType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateUser">
            <summary>define property for CreateUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateView">
            <summary>define property for CreateView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateXmlIndex">
            <summary>define property for CreateXmlIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.CreateXmlSchemaCollection">
            <summary>define property for CreateXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DenyDatabase">
            <summary>define property for DenyDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropApplicationRole">
            <summary>define property for DropApplicationRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropAssembly">
            <summary>define property for DropAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropAsymmetricKey">
            <summary>define property for DropAsymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropAudit">
            <summary>define property for DropAudit</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropBrokerPriority">
            <summary>define property for DropBrokerPriority</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropCertificate">
            <summary>define property for DropCertificate</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropColumnEncryptionKey">
            <summary>define property for DropColumnEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropColumnMasterKey">
            <summary>define property for DropColumnMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropContract">
            <summary>define property for DropContract</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropDatabase">
            <summary>define property for DropDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropDatabaseAuditSpecification">
            <summary>define property for DropDatabaseAuditSpecification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropDatabaseEncryptionKey">
            <summary>define property for DropDatabaseEncryptionKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropDefault">
            <summary>define property for DropDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropEventNotification">
            <summary>define property for DropEventNotification</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropExtendedProperty">
            <summary>define property for DropExtendedProperty</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropFulltextCatalog">
            <summary>define property for DropFulltextCatalog</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropFulltextIndex">
            <summary>define property for DropFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropFulltextStoplist">
            <summary>define property for DropFulltextStoplist</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropFunction">
            <summary>define property for DropFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropIndex">
            <summary>define property for DropIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropMasterKey">
            <summary>define property for DropMasterKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropMessageType">
            <summary>define property for DropMessageType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropPartitionFunction">
            <summary>define property for DropPartitionFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropPartitionScheme">
            <summary>define property for DropPartitionScheme</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropPlanGuide">
            <summary>define property for DropPlanGuide</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropProcedure">
            <summary>define property for DropProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropQueue">
            <summary>define property for DropQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropRemoteServiceBinding">
            <summary>define property for DropRemoteServiceBinding</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropRole">
            <summary>define property for DropRole</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropRoleMember">
            <summary>define property for DropRoleMember</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropRoute">
            <summary>define property for DropRoute</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropRule">
            <summary>define property for DropRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropSchema">
            <summary>define property for DropSchema</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropSearchPropertyList">
            <summary>define property for DropSearchPropertyList</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropSecurityPolicy">
            <summary>define property for DropSecurityPolicy</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropSequence">
            <summary>define property for DropSequence</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropService">
            <summary>define property for DropService</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropSignature">
            <summary>define property for DropSignature</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropSignatureSchemaObject">
            <summary>define property for DropSignatureSchemaObject</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropStatistics">
            <summary>define property for DropStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropSymmetricKey">
            <summary>define property for DropSymmetricKey</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropSynonym">
            <summary>define property for DropSynonym</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropTable">
            <summary>define property for DropTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropTrigger">
            <summary>define property for DropTrigger</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropType">
            <summary>define property for DropType</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropUser">
            <summary>define property for DropUser</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropView">
            <summary>define property for DropView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.DropXmlSchemaCollection">
            <summary>define property for DropXmlSchemaCollection</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.GrantDatabase">
            <summary>define property for GrantDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.Rename">
            <summary>define property for Rename</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.RevokeDatabase">
            <summary>define property for RevokeDatabase</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.UnbindDefault">
            <summary>define property for UnbindDefault</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.UnbindRule">
            <summary>define property for UnbindRule</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseEventSet.UpdateStatistics">
            <summary>define property for UpdateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.AlterFulltextIndex">
            <summary>define static property for AlterFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.AlterIndex">
            <summary>define static property for AlterIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.AlterTable">
            <summary>define static property for AlterTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.CreateFulltextIndex">
            <summary>define static property for CreateFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.CreateIndex">
            <summary>define static property for CreateIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.CreateSpatialIndex">
            <summary>define static property for CreateSpatialIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.CreateStatistics">
            <summary>define static property for CreateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.CreateXmlIndex">
            <summary>define static property for CreateXmlIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.DropFulltextIndex">
            <summary>define static property for DropFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.DropIndex">
            <summary>define static property for DropIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.DropStatistics">
            <summary>define static property for DropStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.DropTable">
            <summary>define static property for DropTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEvent.UpdateStatistics">
            <summary>define static property for UpdateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.AlterFulltextIndex">
            <summary>define property for AlterFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.AlterIndex">
            <summary>define property for AlterIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.AlterTable">
            <summary>define property for AlterTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.CreateFulltextIndex">
            <summary>define property for CreateFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.CreateIndex">
            <summary>define property for CreateIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.CreateSpatialIndex">
            <summary>define property for CreateSpatialIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.CreateStatistics">
            <summary>define property for CreateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.CreateXmlIndex">
            <summary>define property for CreateXmlIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.DropFulltextIndex">
            <summary>define property for DropFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.DropIndex">
            <summary>define property for DropIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.DropStatistics">
            <summary>define property for DropStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.DropTable">
            <summary>define property for DropTable</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableEventSet.UpdateStatistics">
            <summary>define property for UpdateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.AlterFulltextIndex">
            <summary>define static property for AlterFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.AlterIndex">
            <summary>define static property for AlterIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.AlterView">
            <summary>define static property for AlterView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.CreateFulltextIndex">
            <summary>define static property for CreateFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.CreateIndex">
            <summary>define static property for CreateIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.CreateSpatialIndex">
            <summary>define static property for CreateSpatialIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.CreateStatistics">
            <summary>define static property for CreateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.CreateXmlIndex">
            <summary>define static property for CreateXmlIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.DropFulltextIndex">
            <summary>define static property for DropFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.DropIndex">
            <summary>define static property for DropIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.DropStatistics">
            <summary>define static property for DropStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.DropView">
            <summary>define static property for DropView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEvent.UpdateStatistics">
            <summary>define static property for UpdateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.AlterFulltextIndex">
            <summary>define property for AlterFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.AlterIndex">
            <summary>define property for AlterIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.AlterView">
            <summary>define property for AlterView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.CreateFulltextIndex">
            <summary>define property for CreateFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.CreateIndex">
            <summary>define property for CreateIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.CreateSpatialIndex">
            <summary>define property for CreateSpatialIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.CreateStatistics">
            <summary>define property for CreateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.CreateXmlIndex">
            <summary>define property for CreateXmlIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.DropFulltextIndex">
            <summary>define property for DropFulltextIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.DropIndex">
            <summary>define property for DropIndex</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.DropStatistics">
            <summary>define property for DropStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.DropView">
            <summary>define property for DropView</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ViewEventSet.UpdateStatistics">
            <summary>define property for UpdateStatistics</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceQueueEvent.AlterQueue">
            <summary>define static property for AlterQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceQueueEvent.BrokerQueueDisabled">
            <summary>define static property for BrokerQueueDisabled</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceQueueEvent.DropQueue">
            <summary>define static property for DropQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceQueueEvent.QueueActivation">
            <summary>define static property for QueueActivation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceQueueEventSet.AlterQueue">
            <summary>define property for AlterQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceQueueEventSet.BrokerQueueDisabled">
            <summary>define property for BrokerQueueDisabled</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceQueueEventSet.DropQueue">
            <summary>define property for DropQueue</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceQueueEventSet.QueueActivation">
            <summary>define property for QueueActivation</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectEvent.Alter">
            <summary>define static property for Alter</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectEvent.Drop">
            <summary>define static property for Drop</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectEventSet.Alter">
            <summary>define property for Alter</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectEventSet.Drop">
            <summary>define property for Drop</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEvent.AlterFunction">
            <summary>define static property for AlterFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEvent.DropFunction">
            <summary>define static property for DropFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEventSet.AlterFunction">
            <summary>define property for AlterFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionEventSet.DropFunction">
            <summary>define property for DropFunction</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoredProcedureEvent.AlterProcedure">
            <summary>define static property for AlterProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoredProcedureEvent.DropProcedure">
            <summary>define static property for DropProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoredProcedureEventSet.AlterProcedure">
            <summary>define property for AlterProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoredProcedureEventSet.DropProcedure">
            <summary>define property for DropProcedure</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlAssemblyEvent.AlterAssembly">
            <summary>define static property for AlterAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlAssemblyEvent.DropAssembly">
            <summary>define static property for DropAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlAssemblyEventSet.AlterAssembly">
            <summary>define property for AlterAssembly</summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlAssemblyEventSet.DropAssembly">
            <summary>define property for DropAssembly</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SimpleObjectCollectionBase">
            <summary>
            base class for all generic collections
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AbstractCollectionBase">
            <summary>
            Base class for all SMO collections
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoCollectionBase.ClearAndInitialize(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears old objects and initializes the collection
            </summary>
            <param name="filterQuery">the xpath to filter the objects by properties 
            (e.g. setting the filter to [(@IsSystemObject = 0)] will exclude the system objects from the result. 
            By setting the parameter to null or empty string, no filter will be applied to the result</param>        
            <param name="extraFields">the list of fields to be loaded in each object. 
            (e.g. setting the extraFields to "new string[] { "IsSystemVersioned" })" when calling this method for TableCollection 
            will include "IsSystemVersioned" property for each table object. 
            By setting the parameter to null or empty array, only the default fields will be included in the result</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoCollectionBase.InitializeChildCollection">
            <summary>
            Initialize the child collection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoCollectionBase.InitializeChildCollection(System.Boolean)">
            <summary>
            Initializes the child collection, optionally keeping all the old objects
            </summary>
            <param name="refresh">directs if we discard the old objects</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoCollectionBase.GetEnumerator(Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns an enumerator after making sure the collection is initialized
            </summary>
            <param name="sp">The optional scripting settings to pass along to each SqlSmoObject.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoCollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator after making sure the collection is initialized with the default properties
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoCollectionBase.IsCollectionLocked">
            <summary>
             return true if the collection is locked for updates ( it gets locked
             when the parent text object in in text mode )
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SimpleObjectCollectionBase.InitInnerCollection">
            <summary>
            Initializes the storage
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SimpleObjectCollectionBase.Contains(System.String)">
            <summary>
            Contains
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.EndpointCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.CertificateCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FileGroupCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DataFileCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LanguageCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerRoleCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LoginCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AuditCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerAuditSpecificationCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseAuditSpecificationCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LinkedServerCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LinkedServerLoginCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseRoleCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ApplicationRoleCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SchemaCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LogFileCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StatisticCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.CheckCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ForeignKeyCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExtendedPropertyCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupDeviceCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitionFunctionCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitionSchemeCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection.CopyTo(Microsoft.SqlServer.Management.Smo.PhysicalPartition[],System.Int32)">
            <summary>
            Copy the content of given PhysicalPartition array to this collection object.
            Staring onward partitionNumberStart.
            </summary>
            <param name="array"></param>
            <param name="partitionNumberStart"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection.CopyTo(Microsoft.SqlServer.Management.Smo.PhysicalPartition[])">
            <summary>
            Copy all content of the given physical partition array in current collection
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection.CopyTo(Microsoft.SqlServer.Management.Smo.PhysicalPartition[],System.Int32,System.Int32)">
            <summary>
            Copy the content of the physical partition array for given range of the 
            partition numbers in current collection
            </summary>
            <param name="array"></param>
            <param name="partitionNumberStart"></param>
            <param name="partitionNumberEnd"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection.Reset(System.Int32)">
            <summary>
            Rebuild specific to partition will call this method after the rebuild method
            </summary>
            <param name="partitionNumber"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection.ReformatCommaString(System.String)">
            <summary>
            This method take the comma separated list of string (1,2,3,7,8,10,11,12) and
            reformat to engine acceptable short form (1 TO 3, 7, 8, 10 TO 12)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection.IsNonDescriptiveScriptAllowed">
            <summary>
            This method check the condition whether we can generate the code like
            DATA_COMPRESSION = ROW (without mentioning the partition information).
            Typically if all partitions are compressed with same type then we
            generate such code. In case if object is in Creating state then we can't
            be sure number of partition is equal to object in this collection so,
            we go ahead and generate the descriptive one. Exception is given to
            objects which has no partition scheme assigned. 
                                   PARTITION SCHEME
                              Assigned    Not-Assigned
                          -----------------------------
               Existing   |             |             |
            S             |      Y      |      Y      |
            T             |             |             |
            A             -----------------------------
            T             |             |             |
            E  Creating   |      N      |      Y      |
                          |             |             |
                          -----------------------------
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection.ValidatePhysicalPartitionObject(System.String)">
            <summary>
            This method get called when there is no partition scheme has been assigned to the parent class. If in 
            such case we find user has assigned more than one object in the collection or an object has partition 
            number value greater than 1 then we through exception.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PhysicalPartitionCollection.GetCompressionCode(System.Boolean,System.Boolean,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            This method generates the DATA_COMPRESSION clause for objects with 1 or more partitions.
            </summary>
            <param name="isOnAlter">True for ALTER statement, false for CREATE</param>
            <param name="isOnTable">True for ALTER/CREATE TABLE statement, false for INDEX
            Needed because columnstores have different default compression than rowstores</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlAssemblyCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalLibraryCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FullTextCatalogCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FullTextStopListCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SearchPropertyCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyCollection.InitInnerCollection">
            <summary>
            Initializes the storage
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SearchPropertyListCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FullTextIndexColumnCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseDdlTriggerCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerDdlTriggerCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SymmetricKeyCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AsymmetricKeyCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.CredentialCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseScopedCredentialCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.CryptographicProviderCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PlanGuideCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityGroupCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityReplicaCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityDatabaseCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseReplicaStateCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their AvailabilityReplicaServerName and AvailabilityDatabaseName properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityGroupListenerIPAddressCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their IPAddress and SubnetMask and SubnetIP properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedMessageCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SoapPayloadMethodCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionParameterCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ParameterCollectionBase.ImplAddExisting(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Inserts the object into the collection. Because the key is the name, we need 
            to insert in the order of ID
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StoredProcedureParameterCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureParameterCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ColumnCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.OrderColumnCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ForeignKeyColumnCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexedColumnCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexedXmlPathCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexedXmlPathNamespaceCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StatisticColumnCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitionFunctionParameterCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitionSchemeParameterCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedAggregateParameterCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedTableTypeCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.TriggerCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedFunctionCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.RuleCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DefaultCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StoredProcedureCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumberedStoredProcedureCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumberedObjectCollectionBase">
            <summary>
            base class for all generic collections
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SynonymCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SequenceCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExtendedStoredProcedureCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ViewCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.TableCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedTypeCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedAggregateCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.XmlSchemaCollectionCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ResourcePoolCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalResourcePoolCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.WorkloadGroupCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.OleDbProviderSettingsCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SystemMessageCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlAssemblyFileCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SystemDataTypeCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.MessageTypeCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceContractCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.MessageTypeMappingCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.BrokerServiceCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.BrokerPriorityCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceContractMappingCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceQueueCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.RemoteServiceBindingCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Broker.ServiceRouteCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.JobCategoryCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.AlertCategoryCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.OperatorCategoryCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.OperatorCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.AlertCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.TargetServerGroupCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.JobScheduleCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.TargetServerCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.JobStepCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.ProxyAccountCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.MailProfileCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.MailAccountCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.ConfigurationValueCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Mail.MailServerCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SecurityPolicyCollection">
            <summary>
             Strongly typed collection of MAPPED_TYPE objects
             Supports indexing objects by their Name and Schema properties
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollectionBase">
            <summary>
            SecurityPredicateCollectionBase
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollectionBase.InitInnerCollection">
            <summary>
            Internal Storage
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollectionBase.Contains(System.Int32)">
            <summary>
             Contains Method
            </summary>
            <param name="securityPredicateID">The security predicate id</param>
            <returns>The security predicate if it exists.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollectionBase.GetItemByTargetObjectID(System.Int32)">
            <summary>
            Gets the filter predicate that applies to the specified object id if it exists.
            </summary>
            <param name="targetObjectID">The target object id</param>
            <returns>The security predicate if found, null otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollectionBase.GetItemByTargetObjectID(System.Int32,Microsoft.SqlServer.Management.Smo.SecurityPredicateType,Microsoft.SqlServer.Management.Smo.SecurityPredicateOperation)">
            <summary>
            Gets the security predicate for a given target object ID, type, and operation.
            </summary>
            <param name="targetObjectID">The target object id</param>
            <param name="predicateType">The type of the security predicate</param>
            <param name="predicateOperation">The operation type of the security predicate</param>
            <returns>The security predicate if found, null otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollection.Add(Microsoft.SqlServer.Management.Smo.SecurityPredicate)">
            <summary>
            Adds the security predicate to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollection.CopyTo(Microsoft.SqlServer.Management.Smo.SecurityPredicate[],System.Int32)">
            <summary>
            Copies the collection to an arryay
            </summary>
            <param name="array">The array to copy to</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollection.GetCollectionElementType">
            <summary>
            Returns the collection element type
            </summary>
            <returns>The collection element type</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollection.Parent">
            <summary>
            Returns the parent object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPredicateCollection.Item(System.Int32)">
            <summary>
            Returns the security predicate for a given index
            </summary>
            <param name="index">The index in the collection</param>
            <returns>The security predicate at the given index</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationCollection">
            <summary>
             DatabaseScopedConfigurationCollection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationCollection.InitInnerCollection">
            <summary>
            Initializes the internal storage
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseScopedConfigurationObjectComparer.Compare(System.Object,System.Object)">
            <summary>
             The name of the database scoped configuration is case insensitive and .non-linguistic (i.e.
             not affected by the current culture of the running thread).
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalDataSourceCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollectionBase">
            <summary>
            ColumnEncryptionKeyValueCollectionBase
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollectionBase.InitInnerCollection">
            <summary>
            Internal Storage
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollectionBase.Contains(System.Int32)">
            <summary>
             Contains Method
            </summary>
            <param name="ColumnMasterKeyID">Column Master Key Defintion ID</param>
            <returns>Returns if there is a CEK value encrypted by the given CMK ID.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollection.GetItemByColumnMasterKeyID(System.Int32)">
            <summary>
            Gets the column encryption key value for a given column master key id
            </summary>
            <param name="ColumnMasterKeyID">The Column Master Key ID</param>
            <returns>The CEK value if found, null otherwise</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollection.Add(Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue)">
            <summary>
            Adds the CEK value to the collection.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollection.CopyTo(Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValue[],System.Int32)">
            <summary>
            Copies the collection to an arryay
            </summary>
            <param name="array">The array to copy to</param>
            <param name="index">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollection.GetCollectionElementType">
            <summary>
            Returns the collection element type
            </summary>
            <returns>The collection element type</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollection.Parent">
            <summary>
            Returns the parent object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueCollection.Item(System.Int32)">
            <summary>
            Returns the column encryption key value for a given index
            </summary>
            <param name="index">The index in the collection</param>
            <returns>The column encryption key at the given index</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ColumnMasterKeyCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalFileFormatCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ResumableIndexCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AffinityInfo">
             <summary>
            AffinityInfo 
             </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AffinityInfoBase">
             <summary>
            AffinityInfoBase 
             </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AffinityInfoBase.table">
            <summary>
            this property will return AffinityInfoTable which is populated from the query directly
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AffinityInfoBase.numaCol">
            <summary>
            Getting NumaCollection Instance
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AffinityInfoBase.Refresh">
            <summary>
            Refresh the AffinityInfoBase class along with CPU collection and Numa Collection
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AffinityInfoBase.Alter">
            <summary>
            Will Generate Alter Statment for Server to Set CPU and Numa Configuration 
            </summary>
            <param name="forcedAuto">If Set to true will generate script to set CPU's to Auto , provided AffinityType is set to AUTO</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AffinityInfoBase.Script">
            <summary>
            Will give script for Cpu And Numa Configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AffinityInfoBase.Script(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Will give script for Cpu And Numa Configuration
            </summary>
            <param name="so">Scripting Optios</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AffinityInfoBase.AffinityType">
            <summary>
            Sets or gets AffinityType 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AffinityInfo.cpuCol">
            <summary>
            Getting CPUcollection instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AffinityInfo.Parent">
            <summary>
            Returns Parent of the object
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AffinityType">
            <summary>
            Affinity type of Cpu Auto or Manual
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.CpuCollection">
            <summary>
            CPU Collection Class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CpuCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies CPU's in collection to Array starting from index
            </summary>
            <param name="array">Array in which collection will be copied</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CpuCollection.CopyTo(Microsoft.SqlServer.Management.Smo.Cpu[],System.Int32)">
            <summary>
            Copies CPU's in collection to CPU Array starting from index
            </summary>
            <param name="array">Array in which collection will be copied</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CpuCollection.GetEnumerator">
            <summary>
            To get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CpuCollection.GetElementAt(System.Int32)">
            <summary>
            Gets a particular Cpu from its Index
            </summary>
            <param name="position">position of the Cpu in collection</param>
            <returns>Cpu object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CpuCollection.GetByID(System.Int32)">
            <summary>
            Gets a particulat Cpu from its ID
            </summary>
            <param name="cpuId">Id of the Cpu</param>
            <returns>Cpu object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CpuCollection.SetAffinityToAll(System.Boolean)">
            <summary>
            Sets Affinity to All Cpus
            </summary>
            <param name="value">value of Affinity</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CpuCollection.SetAffinityToRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Will set Affinity to a Range of CPU's provided.This method will throw an exception if there is a Cpu Id does not exist
            </summary>
            <param name="startIndex">start Cpu Id</param>
            <param name="endIndex">end Cpu Id</param>
            <param name="affinityMask">value of affinity</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CpuCollection.SetAffinityToRange(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Will set Affinity to a Range of CPU's provided
            </summary>
            <param name="startIndex">start Cpu Id</param>
            <param name="endIndex">end Cpu Id</param>
            <param name="affinityMask">value of affinity</param>
            <param name="ignoreMissingIds">Ignore missing Cpu Ids</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CpuCollection.Count">
            <summary>
            Total number of elements in collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CpuCollection.IsSynchronized">
            <summary>
            If collection is Synchronized
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CpuCollection.SyncRoot">
            <summary>
            Returns SyncRoot of collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CpuCollection.Item(System.Int32)">
            <summary>
            Gets a particular Cpu from its Index
            </summary>
            <param name="index">position of the Cpu in collection</param>
            <returns>Cpu object</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CpuCollection.AffitinizedCPUs">
            <summary>
            Will Return Affitinized CPU's
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumaNodeCollection">
            <summary>
            NumaNode collection, class containg collection of all Numas
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies NumaNodes's in collection to Array starting from index
            </summary>
            <param name="array">Array in which collection will be copied</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.CopyTo(Microsoft.SqlServer.Management.Smo.NumaNode[],System.Int32)">
            <summary>
            Copies NumaNode's in collection to NumaNode Array starting from index
            </summary>
            <param name="array">Array in which collection will be copied</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.GetEnumerator">
            <summary>
            To get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.maxNumaId">
            <summary>
            Gets maximum NumaNode Id
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.minNumaId">
            <summary>
            Gets maximum NumaNode Id
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.GetElementAt(System.Int32)">
            <summary>
            Gets a particular NumaNode from the collection on Index
            </summary>
            <param name="position">index of NumaNode</param>
            <returns>NumaNode object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.GetByID(System.Int32)">
            <summary>
            Gets a particular NumaNode from the collection on ID
            </summary>
            <param name="numanodeId">Id of NumaNode</param>
            <returns>NumaNodeObject</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.SetAffinityToRange(System.Int32,System.Int32,Microsoft.SqlServer.Management.Smo.NumaNodeAffinity)">
            <summary>
            Will set Affinity to a Range of NumaNodes's provided.This method will throw an exception if a NumaNode does not exist in the Range
            </summary>
            <param name="startIndex">start index</param>
            <param name="endIndex">end index</param>
            <param name="affinityMask">value of affinity</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.SetAffinityToRange(System.Int32,System.Int32,Microsoft.SqlServer.Management.Smo.NumaNodeAffinity,System.Boolean)">
            <summary>
            Will set Affinity to a Range of NumaNodes's provided
            </summary>
            <param name="startIndex">start index</param>
            <param name="endIndex">end index</param>
            <param name="affinityMask">value of affinity</param>
            <param name="ignoreMissingIds">ignore the missing Id's in NumaNodes</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.Count">
            <summary>
            Total number of elements in collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.IsSynchronized">
            <summary>
            If collection is Synchronized
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.SyncRoot">
            <summary>
            Returns SyncRoot of collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumaNodeCollection.Item(System.Int32)">
            <summary>
            Gets a particular NumaNode from the collection on Index
            </summary>
            <param name="index">index of NumaNode</param>
            <returns>NumaNode object</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SchedulerCollection">
            <summary>
            Scheduler collection, a class containg collection of all schedulers in the system and their affinity to the parent resource
            pool.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SchedulerCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies NumaNodes's in collection to Array starting from index
            </summary>
            <param name="array">Array in which collection will be copied</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SchedulerCollection.CopyTo(Microsoft.SqlServer.Management.Smo.NumaNode[],System.Int32)">
            <summary>
            Copies NumaNode's in collection to NumaNode Array starting from index
            </summary>
            <param name="array">Array in which collection will be copied</param>
            <param name="index">Start index</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SchedulerCollection.GetEnumerator">
            <summary>
            To get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SchedulerCollection.maxSchedulerId">
            <summary>
            Gets maximum Scheduler Id
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SchedulerCollection.minSchedulerId">
            <summary>
            Gets minimum scheduler Id
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SchedulerCollection.GetElementAt(System.Int32)">
            <summary>
            Gets a particular Scheduler from the collection on Index
            </summary>
            <param name="position">index of Schduler</param>
            <returns>Scheduler object</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SchedulerCollection.GetByID(System.Int32)">
            <summary>
            Gets a particular Schduler from the collection on ID
            </summary>
            <param name="SchedulerId">Id of Scheduler</param>
            <returns>SchedulerObject</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SchedulerCollection.SetAffinityToRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Will set Affinity to a Range of SchdulerNodes's provided.This method will throw an exception if a SchdulerNode does not exist in the Range
            </summary>
            <param name="startIndex">start index</param>
            <param name="endIndex">end index</param>
            <param name="affinityMask">value of affinity</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SchedulerCollection.Count">
            <summary>
            Total number of elements in collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SchedulerCollection.IsSynchronized">
            <summary>
            If collection is Synchronized
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SchedulerCollection.SyncRoot">
            <summary>
            Returns SyncRoot of collection
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SchedulerCollection.Item(System.Int32)">
            <summary>
            Gets a particular NumaNode from the collection on Index
            </summary>
            <param name="index">index of NumaNode</param>
            <returns>NumaNode object</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumaCPUCollectionBase`1">
            <summary>
            Internal generic class of NumaNode and CPU collection
            </summary>
            <typeparam name="T">CPU or NumaNode</typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumaCPUEnumerator">
            <summary>
             nested enumerator class. It basically uses SortedList enumerations.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.NotifyType">
            <summary>
            Notification type
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Agent.NotifyType.All">
            <summary>
            Return all operators or alerts.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Agent.NotifyType.Actual">
            <summary>
            Return only those operators or alerts configured for notification.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Agent.NotifyType.Target">
            <summary>
            Return a result set that enumerates notification for the operator 
            or alert specified in the alertOrOperator argument.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoApplicationEventsSingleton">
            <summary>
            This class holds global application data
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoApplicationEventsSingleton.objectDropped">
            <summary>
            Event that is called when an object is successfully dropped.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoApplicationEventsSingleton.objectRenamed">
            <summary>
            Event that is called when an object is successfully renamed.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoApplicationEventsSingleton.objectAltered">
            <summary>
            Event that is called when an object is successfully altered.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoApplicationEventsSingleton.anyObjectEvent">
            <summary>
            This event is called for any of the above events. This allows handling 
            all event types using one handler.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoApplicationEventsSingleton.databaseEvent">
            <summary>
            This event is called for any of the above events. This allows handling 
            all event types using one handler.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoApplication.ObjectCreatedEventHandler">
            <summary>
            Called when an object is successfully created
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoApplication.ObjectDroppedEventHandler">
            <summary>
            called when an object is successfully dropped
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoApplication.ObjectRenamedEventHandler">
            <summary>
            called when an object is successfully renamed
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoApplication.ObjectAlteredEventHandler">
            <summary>
            called when an object is successfully altered
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoApplication.AnyObjectEventHandler">
            <summary>
            called for any of the above events. This allows handling all event types using one handler
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoApplication.DatabaseEventHandler">
            <summary>
            called for database events
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoEventArgs">
            <summary>
            Base argument class for Smo native events
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectCreatedEventArgs">
            <summary>
            argument for ObjectCreatedEventHandler
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectDroppedEventArgs">
            <summary>
            argument for ObjectDroppedEventHandler
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectRenamedEventArgs">
            <summary>
            argument for ObjectRenamedEventHandler
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectAlteredEventArgs">
            <summary>
            argument for ObjectAlteredEventHandler
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AsymmetricKeySourceType">
            <summary>
             Specifies the source of the certificate, when loading.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AsymmetricKeySourceType.File">
            Load the public key from file.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AsymmetricKeySourceType.Executable">
            Load the public key from executable.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AsymmetricKeySourceType.SqlAssembly">
            Load the public key from the specified assembly.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AsymmetricKeySourceType.Provider">
            Load the public key from the Cryptographic Provider.
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoObjectExtender`1">
            <summary>
            Extender class for Smo Objects
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoObjectExtender`1.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoObjectExtender`1.#ctor(`0)">
            <summary>
            ctor. Takes parent database object to aggregate on
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ObjectKeyBase.GetExceptionName">
            <summary>
            Returns the name that we will use while displaying an exception 
            that involves this object. We need this function because some 
            exception boxes should not show a ToString() formatted name
            e.g. [dbo].[t1] will be shown as 'dbo.t1'
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupMedia">
            <summary>
            Backup Media class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMedia.#ctor(System.Data.DataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupMedia"/> class.
            </summary>
            <param name="dr">The DataRow from Msdb table</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMedia.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupMedia"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMedia.#ctor(System.String,Microsoft.SqlServer.Management.Smo.DeviceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupMedia"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="backupMediaType">Type of the backup media.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMedia.#ctor(System.String,Microsoft.SqlServer.Management.Smo.DeviceType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupMedia"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="backupMediaType">Type of the backup media.</param>
            <param name="credentialName">SQL Server credential name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMedia.IsBackupUrlDeviceSupported(Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            Helper to check if BackupToUrl is supported on the connected server version
            </summary>
            <param name="currentServerVersion"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMedia.MediaName">
            <summary>
            Gets the backup media name.
            </summary>
            <value>The name of the backup media.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMedia.MediaType">
            <summary>
            Gets or sets the type of the backup media.
            </summary>
            <value>The type of the backup media.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMedia.FamilySequenceNumber">
            <summary>
            Gets the family sequence number.
            </summary>
            <value>The family sequence number.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMedia.CredentialName">
            <summary>
            Gets or sets the credential name that is used by Backup to Url
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMedia.MirrorSequenceNumber">
            <summary>
            Gets the mirror sequence number.
            </summary>
            <value>The mirror sequence number.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMedia.BackupUrlDeviceSupportedServerVersion">
            <summary>
            SQL 11 PCU1 CU2 version is 11.0.3339.0
            Reference: http://hotfix.partners.extranet.microsoft.com/search.aspx?search=2790947
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupMediaSet">
            <summary>
            Backup Media Set
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMediaSet.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Int32)">
            <summary>
            Creates a BackupMediaSet object
            Internal Constructor for  reading the msdb header.
            </summary>
            <param name="server">The server.</param>
            <param name="mediaSetID">The media set ID.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMediaSet.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Collections.Generic.List{Microsoft.SqlServer.Management.Smo.BackupMedia})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupMediaSet"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="backupMediaList">The backup media list.</param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupMediaSet.IsPresentInMsdb">
            <summary>
            Is the info about this backupMediaSet present in msdb
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMediaSet.Populate(System.Int32)">
            <summary>
            Populates the properties by reading
            the msdb.dbo.backupmediaset table.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMediaSet.Populate(System.Collections.Generic.List{Microsoft.SqlServer.Management.Smo.BackupMedia})">
            <summary>
            Populates the properties by reading
            the BackupMedia Headers and labels.
            </summary>
            <param name="backupMediaList">The backup media list.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMediaSet.ReadBackupSetHeader">
            <summary>
            Reads the backup set header.
            </summary>
            <returns>BackupSets in the device.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMediaSet.CheckMediaSetComplete">
            <summary>
            Checks the media set is complete.
            Throws IncompleteBackupMediaSetException if not.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMediaSet.Name">
            <summary>
            Gets the name of the media set.
            </summary>
            <value>The name of the media set.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMediaSet.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMediaSet.MirrorCount">
            <summary>
            Gets the mirror count.
            </summary>
            <value>The mirror count.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMediaSet.FamilyCount">
            <summary>
            Gets the number of Family Backup media present in Backup media set.
            </summary>
            <value>The family count.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMediaSet.MediaType">
            <summary>
            Gets the device type of the media.
            </summary>
            <value>The Media type.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMediaSet.BackupMediaList">
            <summary>
            Collection of Backup media that
            the Backup media set contains.
            </summary>
            <value>The backup media list.</value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupMediaSet.IncompleteBackupMediaSetException">
            <summary>
            Incomplete backup MediaSet Exception
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupMediaSet.IncompleteBackupMediaSetException.#ctor(Microsoft.SqlServer.Management.Smo.BackupMediaSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupMediaSet.IncompleteBackupMediaSetException"/> class.
            </summary>
            <param name="backupMediaSet">The backup media set.</param>
            <param name="missingFamilyNumber">The missing family number.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupMediaSet.IncompleteBackupMediaSetException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value></value>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DeviceType">
            <summary>
            Backup Media Device Type 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DeviceType.LogicalDevice">
            <summary>
            Logical Device
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DeviceType.Tape">
            <summary>
            Tape Device
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DeviceType.File">
            <summary>
            File
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DeviceType.Pipe">
            <summary>
            Pipe
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DeviceType.VirtualDevice">
            <summary>
            Virtual Device
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DeviceType.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupSet">
            <summary>
            Backupset class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupSet"/> class.
            Populates the properties by reading the msdb tables.
            </summary>
            <param name="parentServer">The parent server.</param>
            <param name="BackupSetGuid">The backup set GUID.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.#ctor(Microsoft.SqlServer.Management.Smo.Server,Microsoft.SqlServer.Management.Smo.BackupMediaSet,System.Data.DataRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupSet"/> class.
            Populates the proerties by reading the media headers.
            </summary>
            <param name="parentServer">The parent server.</param>
            <param name="mediaSet">The media set.</param>
            <param name="dr">The datarow.</param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupSet.StopAtLsn">
            <summary>
            Used by DatabaseRestorePlanner to specify that this
            backupset restore should stop at this LSN.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupSet.ID">
            <summary>
            ID used by the Database Restore Planner. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupSet.isPopulated">
            <summary>
            Is the properties populated
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.CheckBackupFilesExistence">
            <summary>
            Checks the backup files existence.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.Verify">
            <summary>
            Verifies the backupset
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.Populate">
            <summary>
            Populates this instance.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.PopulateV7Properties(System.Data.DataRow)">
            <summary>
            Populates the shiloh properties.
            </summary>
            <param name="dr">The datarow.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.PopulateV9Properties(System.Data.DataRow)">
            <summary>
            Populates the yukon properties.
            </summary>
            <param name="dr">The datarow.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.PopulateV10Properties(System.Data.DataRow)">
            <summary>
            Populates the V10 properties.
            </summary>
            <param name="dr">The dr.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.VersionCheck(System.Int32,System.String)">
            <summary>
            Checks the version.
            </summary>
            <param name="minSupportedVersion">The minimum supported version.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.IsBackupsForked(System.Collections.Generic.List{Microsoft.SqlServer.Management.Smo.BackupSet})">
            <summary>
            Determines whether [is backups forked] [the specified bk set list].
            </summary>
            <param name="backupSetList">The backupset list.</param>
            <returns>
            	<c>true</c> if [is backups forked] [the specified bk set list]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.IsBackupSetsInSequence(Microsoft.SqlServer.Management.Smo.BackupSet,Microsoft.SqlServer.Management.Smo.BackupSet,System.Decimal@)">
            <summary>
            Determines whether [backup sets in sequence].
            </summary>
            <param name="first">The first BackupSet.</param>
            <param name="second">The second BackupSet.</param>
            <param name="stopAtLsn">The stop at LSN.</param>
            <returns>
            <c>true</c> if [backup sets in sequence]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.IsBackupSetsInSequence(Microsoft.SqlServer.Management.Smo.BackupSet,Microsoft.SqlServer.Management.Smo.BackupSet)">
            <summary>
            Determines whether [backup sets in sequence].
            </summary>
            <param name="first">The first BackupSet.</param>
            <param name="second">The second BackupSet.</param>
            <returns>
            <c>true</c> if [backup sets in sequence]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSet.IsBackupSetsInSequence(Microsoft.SqlServer.Management.Smo.BackupSet,Microsoft.SqlServer.Management.Smo.BackupSet,System.String@,System.Object@,System.Decimal@)">
            <summary>
            Determines whether [backup sets in sequence].
            </summary>
            <param name="first">The first BackupSet.</param>
            <param name="second">The second BackupSet.</param>
            <param name="errMsg">The err MSG.</param>
            <param name="errSource">The err source.</param>
            <param name="stopAtLsn">The stop at LSN.</param>
            <returns>
            	<c>true</c> if [backup sets in sequence]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.targetServerVersion">
            <summary>
            Gets the target server version.
            </summary>
            <value>The target server version.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.Parent">
            <summary>
            Gets Parent of the object
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.Name">
            <summary>
            Gets name of the backup set.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.Description">
            <summary>
            Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.BackupSetType">
            <summary>
            Gets the Backup set type. Can be:
            Database, Differential, Log, FileOrFilegroup
            </summary>
            <value>The type of the backup set.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.BackupStartDate">
            <summary>
            Gets Datetime when the backup operation started.
            </summary>
            <value>The backup start date.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.BackupFinishDate">
            <summary>
            Date and time the backup operation finished.
            </summary>
            <value>The backup finish date.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.ExpirationDate">
            <summary>
            Date and time the backup set expires.
            </summary>
            <value>The expiration date.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.Position">
            <summary>
            Backup set position used in the restore operation
            to locate the position of appropriate backup set in the file.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.DatabaseName">
            <summary>
            Name of the database involved in the backup operation.
            </summary>
            <value>The name of the database.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.ServerName">
            <summary>
            Name of the server where the Backup was taken.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.MachineName">
            <summary>
            Name of the computer where the Backup was taken.
            </summary>
            <value>The name of the machine.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.UserName">
            <summary>
            Name of the user who performed the backup operation.
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.ServerVersion">
            <summary>
            Microsoft SQL Server version where the backup was taken.
            </summary>
            <value>The server version.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.IsSnapshot">
            <summary>
            Was Backup taken using the SNAPSHOT option.
            </summary>
            <value>
            	<c>true</c> if this instance is snapshot backup; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.IsReadOnly">
            <summary>
            Was database read-only at the time of backup.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.IsDamaged">
            <summary>
            Was damage to the database detected when this backup was created,
            and the backup operation was requested to continue despite errors.
            </summary>
            <value>
            	<c>true</c> if this instance is damaged; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.IsCopyOnly">
            <summary>
            Is the backupset Copy-only.
            </summary>
            <value>
            	<c>true</c> if this instance is copy only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.IsForceOffline">
            <summary>
            Was the Database offline when the backup was taken.
            </summary>
            <value>
            	<c>true</c> if this database was offline when the backup was taken; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.HasIncompleteMetaData">
            <summary>
            Is the backup a tail log backup with incomplete metadata.
            </summary>
            <value>
            	<c>true</c> if this instance has incomplete meta data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.HasBulkLoggedData">
            <summary>
            Does the Backup contain bulk-logged data.
            </summary>
            <value>
            	<c>true</c> if this instance has bulk logged data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.BeginsLogChain">
            <summary>
            Is this the first in a continuous chain of log backups.
            A log chain begins with the first log backup taken after
            the database is created or when it is switched from the
            simple to the full or bulk-logged recovery model.
            </summary>
            <value><c>true</c> if [begins log chain]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.SoftwareVendorId">
            <summary>
            Identification number of the software
            vendor writing the backup media header.
            </summary>
            <value>The software vendor id.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.FirstLsn">
            <summary>
            Log sequence number of the first
            or oldest log record in the backup set.
            </summary>
            <value>The first LSN.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.LastLsn">
            <summary>
            Log sequence number of the next log
            record after the backup set.
            </summary>
            <value>The last LSN.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.CheckpointLsn">
            <summary>
            Log sequence number of the log
            record where redo must start.
            </summary>
            <value>The checkpoint LSN.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.DatabaseBackupLsn">
            <summary>
            Log sequence number of the most
            recent full database backup.
            </summary>
            <value>The database backup LSN.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.ForkPointLsn">
            <summary>
            If first_recovery_fork_guid is not equal
            to last_recovery_fork_guid, this is the log
            sequence number of the fork point.
            </summary>
            <value>The fork point LSN.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.DifferentialBaseLsn">
            <summary>
            Base LSN for differential backups. Changes
            with LSNs greater than or equal to
            differential_base_lsn are included in the
            differential backup.
            </summary>
            <value>The differential base LSN.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.BackupSize">
            <summary>
            Size of the backup set, in bytes.
            </summary>
            <value>The size of the backup.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.CompressedBackupSize">
            <summary>
            Total Byte count of the backup stored on disk.
            </summary>
            <value>The size of the compressed backup.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.BackupSetGuid">
            <summary>
            Unique backup set identification number that
            identifies the backup set.
            </summary>
            <value>The backup set GUID.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.DatabaseGuid">
            <summary>
            Unique ID of the database where the backup was taken.
            When the database is restored, a new value is assigned.
            </summary>
            <value>The database GUID.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.FamilyGuid">
            <summary>
            Unique ID of the original database at creation.
            This value remains the same when the database
            is restored, even to a different name.
            </summary>
            <value>The family GUID.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.DifferentialBaseGuid">
            <summary>
            For a single-based differential backup, the value
            is the unique identifier of the differential base.
            </summary>
            <value>The differential base GUID.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.RecoveryForkID">
            <summary>
            ID of the ending recovery fork.
            </summary>
            <value>The recovery fork ID.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.FirstRecoveryForkID">
            <summary>
            ID of the starting recovery fork.
            </summary>
            <value>The first recovery fork ID.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSet.BackupMediaSet">
            <summary>
            Gets the backup media set.
            </summary>
            <value>The backup media set.</value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupSetCollection">
            <summary>
            Backupset collection class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSetCollection.#ctor(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupSetCollection"/> class.
            </summary>
            <param name="parent">The parent database.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSetCollection.#ctor(Microsoft.SqlServer.Management.Smo.Server,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupSetCollection"/> class.
            </summary>
            <param name="server">The server.</param>
            <param name="DatabaseName">Name of the database.</param>
            <param name="PopulateFromMsdb">if set to <c>true</c> [populate from MSDB].</param>
            <param name="includeSnapshotBackups">Whether to include snapshots in the backup list</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSetCollection.GetBackupSetsFromMsdb(System.Boolean)">
            <summary>
            Gets the backup sets from MSDB.
            Reads Only fetches the guid of the backupsets,
            rest of the properties are populated when
            any of the properties is accessed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSetCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.BackupSetCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSetCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Microsoft.SqlServer.Management.Smo.BackupSet"/> at the specified index.
            </summary>
            <value>Backup set</value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSetCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSetCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.BackupSetCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.CertificateSourceType">
            Specifies the source of the certificate, when loading.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.CertificateSourceType.File">
            Load the certificate from file.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.CertificateSourceType.Executable">
            Load the certificate from executable.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.CertificateSourceType.SqlAssembly">
            Load the certificate from the specified assembly.
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.#ctor(System.String)">
            <summary>
            .ctor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.GetExceptionName">
            <summary>
            GetExceptionName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.GetFieldNames">
            <summary>
            Return all fields that are used by this key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.GetComparer(System.Collections.IComparer)">
            <summary>
            Returns string comparer needed to compare the string portion of this key.
            </summary>
            <param name="stringComparer"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.Name">
            <summary>
            Name of the object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.UrnFilter">
            <summary>
            Urn suffix that identifies this object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SimpleObjectKey.IsNull">
            <summary>
            True if the key is null.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ColumnEncryptionKeyValueObjectKey.UrnFilter">
            <summary>
            This is the one used for constructing the Urn
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ConfigProperty">
            <summary>
            Instance class encapsulating SQL Server database table trigger
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.DisplayName">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.Number">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.Minimum">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.Maximum">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.IsDynamic">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.IsAdvanced">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.Description">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.RunValue">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ConfigProperty.ConfigValue">
            <summary>
            TODO
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ConfigPropertyCollection.ConfigPropertyEnumerator">
            <summary>
             nested enumerator class. It basically uses SortedList enumerations.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Configuration">
            <summary>
            Instance class encapsulating SQL Server Configuration object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.ContainmentEnabled">
            <summary>
            Gets a ConfigProperty object that is used to enable or disable contained
            databases and authentication across the service instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.IsSqlClrEnabled">
            This option allows the ability to run user assemblies in SQL server
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.RemoteDacConnectionsEnabled">
            This option opens the admin port to be callable over the network. By default the DAC port 
            listens only on the loopback address. 
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.CommonCriteriaComplianceEnabled">
            <summary>
            The "common criteria compliance enabled" server option
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.ExtensibleKeyManagementEnabled">
            <summary>
            The "EKM provider enabled" option is to enable creation of Cryptographic Providers
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.DefaultBackupCompression">
            <summary>
            This public property gets or sets the default backup compression value and returns
            a ConfigProperty object representing ‘backup compression default’ server configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.FilestreamAccessLevel">
            <summary>
            This public property gets or sets the filestream access level and returns
            a ConfigProperty object representing 'filestream access level' server configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.OptimizeAdhocWorkloads">
            <summary>
            This public property gets or sets the optimize for ad hoc workloads and returns
            a ConfigProperty object representing 'optimize for ad hoc workloads' server configuration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.AgentXPsEnabled">
            This is the set of XPs that the agent component requires for its functioning. 
            If the Agent service is turned on it will turn on this option automatically. 
            If you are not using the agent component, you can keep this option off.
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.AdHocDistributedQueriesEnabled">
            OpenRowset and Opendatasource allow connecting to and accessing remote data using OLE DB 
            in an ad hoc manner without requiring the creation of linked servers. This option enables 
            or disables the ability to invoke these two functions
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.XPCmdShellEnabled">
            Xp_cmdshell executes a given command string as an operating-system command shell and returns 
            any output as rows of text. This option enables or disables the ability to call xp_cmdshell
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.SmoAndDmoXPsEnabled">
            This is a set of XPs that are required by SMO and DMO for its functioning. And are required by 
            the SQL server management studio and profiler as well. For that reason, this option can only be 
            changed by calling sp_configure directly
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.SqlMailXPsEnabled">
            SQL Mail provides a way to send and receive e-mail messages from SQL server using a MAPI profile. 
            Use this option to turn on or off the set of XPs used by SQLMail. However, SQLMail is being 
            deprecated by the new DatabaseMail functionality.
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.DatabaseMailEnabled">
            DatabaseMail provides a way to send email messages over SMTP from SQL server. This option turns on or 
            off the ability to call the XPs used by DatabaseMail. Turning off this option will prevent the ability 
            to send email messages using DatabaseMail.
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.OleAutomationProceduresEnabled">
            This option captures the ability to turn on or off the set of stored procedures that allow 
            standard OLE automation objects to be used within a standard Transact-SQL batch
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.ReplicationXPsEnabled">
            This option represents the set of XPs that are intended to be used by the replication component. 
            The replication component does not require this option to be turned on. However, turn this 
            component on to be able to invoke these XPs directly.
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.WebXPsEnabled">
            Web Assitant XPs allows the server to serve HTML pages. This option allows the ability to 
            invoke these XPs.
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.BlockedProcessThreshold">
            <summary>
            The blocked process threshold option specifies the 
            threshold, in seconds, at which blocked process reports 
            are generated. The threshold can be set from 0 to 86,400. 
            By default, no blocked process reports are produced.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.Affinity64IOMask">
            <summary>
            Binds SQL Server disk I/O to a specified subset of CPUs.  
            Use AffinityIOMask to bind the first 32 processors, and 
            use Affinity64IOMask to bind the remaining processors on 
            the computer.  Only available on 64-bit version of SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.DisallowResultsFromTriggers">
            <summary>
            Use the disallow results from triggers option to control 
            whether triggers return result sets. Triggers that return 
            result sets may cause unexpected behavior in applications 
            that are not designed to work with them.
            When set to 1, the disallow results from triggers option 
            is set to ON. The default setting for this option is 0 (OFF).
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.FullTextCrawlBandwidthMin">
            <summary>
            Use FullTextCrawlBandwidth[min,max] options to specify 
            the size to which the pool of large memory buffers can 
            grow. Large memory buffers are 4 megabytes (MB) in size. 
            The FullTextCrawlBandwidthMin parameter specifies the 
            minimum number of memory buffers that must be maintained 
            in the pool of large memory buffers.  If, however, the min 
            value specified is zero, then all memory buffers are released.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.FullTextCrawlBandwidthMax">
            <summary>
            Use the FullTextCrawlBandwidth[min,max] options to 
            specify the size to which the pool of large memory buffers 
            can grow. Large memory buffers are 4 megabytes (MB) in size. 
            The FullTextCrawlBandwidthMax maximum number of buffers 
            that the full-text memory manager should maintain in a 
            large buffer pool.  If the max value is zero, then there 
            is no upper limit to the number of buffers that can be in 
            a large buffer pool.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.FullTextNotifyBandwidthMin">
            <summary>
            Use the FullTextNotifyBandwidth[min, max] options to 
            specify the size to which the pool of small memory 
            buffers can grow. Small memory buffers are 64 kilobytes(KB)
            in size. The FullTextNotifyBandwidthMin parameter specifies 
            the minimum number of memory buffers that must be maintained 
            in the pool of small memory buffers. Upon request from the 
            Microsoft SQL Server memory manager, all extra buffer pools 
            will be released but this minimum number of buffers will be 
            maintained. If, however, the min value specified is zero, 
            then all memory buffers are released.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.FullTextNotifyBandwidthMax">
            <summary>
            Use the FullTextNotifyBandwidth[min, max] options to 
            specify the size to which the pool of small memory buffers 
            can grow. Small memory buffers are 64 kilobytes (KB) in size. 
            The FullTextNotifyBandwidthMax parameter value specifies the 
            maximum number of buffers that the full-text memory manager 
            should maintain in a small buffer pool. If the max value is 
            zero, then there is no upper limit to the number of buffers 
            that can be in a small buffer pool.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.InDoubtTransactionResolution">
            <summary>
            Use the in-doubt xact resolution option to control the default 
            outcome of transactions that the Microsoft Distributed 
            Transaction Coordinator (MS DTC) is unable to resolve. 
            Inability to resolve transactions may be related to the 
            MS DTC down time or an unknown transaction outcome at the 
            time of recovery. 
            0 - No presumption. Recovery fails if MS DTC cannot resolve any in-doubt transactions.
            1 - Presume commit. Any MS DTC in-doubt transactions are presumed to have committed.
            2 - Presume abort. Any MS DTC in-doubt transactions are presumed to have aborted.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.FullTextCrawlRangeMax">
            <summary>
            Use the max full-text crawl range option to optimize CPU 
            utilization, which improves crawl performance during a full 
            crawl. Using this option, you can specify the number of 
            partitions that Microsoft SQL Server should use during a 
            full index crawl. For example, if there are many CPUs and 
            their utilization is not optimal, you can increase the 
            maximum value of this option. In addition to this option, 
            SQL Server uses a number of other factors, such as the number 
            of rows in the table and the number of CPUs, to determine 
            the actual number of partitions used. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.ServerTriggerRecursionEnabled">
            <summary>
            Use the server trigger recursion option to specify whether 
            to allow server-level triggers to fire recursively. When 
            this option is set to 1 (ON), server-level triggers will be 
            allowed to fire recursively. When set to 0 (OFF), 
            server-level triggers cannot be fired recursively. Only 
            direct recursion is prevented when the server trigger 
            recursion option is set to 0 (OFF). (To disable indirect 
            recursion, set the nested triggers option to 0.) The 
            default value for this option is 1 (ON).
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.UserInstanceTimeout">
            <summary>
            The User Instance Timeout option that you can access 
            through sp_configure is not supported in Microsoft 
            SQL Server 2005. This option works only with 
            SQL Server 2005 Express Edition (SQL Server Express). 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.UserInstancesEnabled">
            <summary>
            The user instance enabled option that you can access 
            through sp_configure is not supported in 
            Microsoft SQL Server 2005. This option works only 
            with SQL Server 2005 Express Edition (SQL Server Express). 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Configuration.RemoteDataArchiveEnabled">
            <summary>
            Use the remote data archive option to check whether databases and tables on the server can be enabled for Stretch
            https://msdn.microsoft.com/en-us/library/mt143175.aspx
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Cpu">
            <summary>
            CPU class
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Cpu.ID">
            <summary>
            Gets CPU ID
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Cpu.NumaNodeID">
            <summary>
            Gets NumaNode ID to which CPU belongs to
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Cpu.GroupID">
            <summary>
            Gets GroupId to which CPU belongs to
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Cpu.AffinityMask">
            <summary>
            Gets or sets AffinityMask of CPU
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseFileMappingsDictionary">
            <summary>
            This class maps database file paths (i.e. DataFiles and LogFiles paths) from 
            the source server to the corresponding target server location specified by the user. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseFileMappingsDictionary.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseFileMappingsDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether this dictionary contains the specified database source file path.
            </summary>
            <param name="sourceFilePath">Full path to the source database file, including the file name as well.</param>
            <returns>true if the dictionary contains this file path; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseFileMappingsDictionary.Add(System.String,System.String)">
            <summary>
            Adds the specified database source file path and its associated database target file path 
            to the dictionary.
            </summary>
            <param name="sourceFilePath">Full path to the source database file, including the file name as well.</param>
            <param name="targetFilePath">Full path to the target database file, including the file name as well.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseFileMappingsDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified database source file path.
            </summary>
            <param name="sourceFilePath">Full path to the source database file, including the file name as well.</param>
            <returns>The target database file path associated with this original database source file path. If the specified source file path is not found, a get operation throws a System.Collections.Generic.KeyNotFoundException, and a set operation creates a new element with the specified source file path.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IDatabasePrefetch">
            <summary>
            Object prefetching interface
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IDatabasePrefetch.PrefetchObjects(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Method to prefetch objects before yielding them
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IDatabasePrefetch.creatingDictionary">
            <summary>
            creating dictionary to store creating state objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase">
            <summary>
            Base class which does the batching of input and lets subclass to use actual method to prefetch
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.filteredTypes">
            <summary>
            urn types which are not going to be discovered in discovery
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.prefetchableTypes">
            <summary>
            urn types which support prefetching
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.batchedPrefetchDictionary">
            <summary>
            urn types which support batched prefetching
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.InitializeBatchedPrefetchDictionary">
            <summary>
            Method to set batched prefetched types
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.InitializePrefetchableTypes">
            <summary>
            Method to set prefetchable types
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.batchSize">
            <summary>
            maximum batch size for prefetching
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.PrefetchObjects(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Method to bucketize input and then batched prefetching for types for which batched prefetching need to be done
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.PrePrefetchBatches">
            <summary>
            This method is to be used to do tasks before any batched prefetching occurs
            #1236132 - Prefetched urns are returned for discovery. method signature changed.
            default to return Empty.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.PostPrefetchBatch(System.String,System.Collections.Generic.HashSet{Microsoft.SqlServer.Management.Sdk.Sfc.Urn},System.Int32,System.Int32)">
            <summary>
            Method to do any post prefetch thing
            </summary>
            <param name="urnType"></param>
            <param name="urnBatch"></param>
            <param name="currentBatchCount"></param>
            <param name="totalBatchCount"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.PrefetchBatch(System.String,System.Collections.Generic.HashSet{Microsoft.SqlServer.Management.Sdk.Sfc.Urn},System.Int32,System.Int32)">
            <summary>
            Method to implement prefetching algo for a batch
            </summary>
            <param name="urnType"></param>
            <param name="urnBatch"></param>
            <param name="currentBatchCount"></param>
            <param name="totalBatchCount"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.AddUrn(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Method to store any information before adding in list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.PrefetchAllObjects(System.String)">
            <summary>
            Method to  Database's prefetch method based on type
            </summary>
            <param name="urnType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.GetTablePrefetchList">
            <summary>
            Get table children list utilizing the filtering information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabasePrefetchBase.GetViewPrefetchList">
            <summary>
            Gives view children list utilizing the filtering information
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.GswDatabasePrefetch">
            <summary>
            Prefetching class employed by GenerateScriptsWizard
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch.MAX_BATCH_SIZE">
            <summary>
            Maximum batch size for prefetching
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch.idDictionary">
            <summary>
            Dictionary to stored id which is used while generating filters
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch.PrePrefetchBatches">
            <summary>
            VSTS #1236132 - Prefetched urns must be returned for discovery. method signature changed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch.PrefetchBatch(System.String,System.Collections.Generic.HashSet{Microsoft.SqlServer.Management.Sdk.Sfc.Urn},System.Int32,System.Int32)">
            <summary>
            Prefetches given set of objects and their children
            </summary>
            <param name="urnType"></param>
            <param name="urnBatch"></param>
            <param name="currentBatchCount"></param>
            <param name="totalBatchCount"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch.GetChildrenList(System.String)">
            <summary>
            Gets the list of children to be prefetched like for table table/column,table/index etc
            </summary>
            <param name="urnType">type</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch.GetIdFilter(System.Collections.Generic.HashSet{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Get ID based filter. If there is only one urn in the batch then we make the name and schema or only name urn so that the query is parameterized.
            </summary>
            <param name="urnBatch"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch.GetFilteringids(System.Collections.Generic.HashSet{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Helper to construct filter for batch
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultDatabasePrefetch.PrefetchUsingIN(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Calls database' method for prefetching object hierarchy
            </summary>
            <param name="idFilter"></param>
            <param name="initializeCollectionsFilter"></param>
            <param name="type"></param>
            <param name="prefetchingList"></param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.GswDatabasePrefetch.MAX_BATCH_SIZE">
            <summary>
            Maximum batch size for prefetching
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.GswDatabasePrefetch.PrePrefetchBatches">
            <summary>
            #1236132 - Prefetched urns are returned for discovery. method signature changed.
            default to return Empty.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.GswDatabasePrefetch.PrefetchUsingIN(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Calls database' method for prefetching object hierarchy
            </summary>
            <param name="idFilter"></param>
            <param name="initializeCollectionsFilter"></param>
            <param name="type"></param>
            <param name="prefetchingList"></param>
        </member>
        <member name="E:Microsoft.SqlServer.Management.Smo.GswDatabasePrefetch.PrefetchBatchEvent">
            <summary>
            Event to be fired after every batch gets prefetched
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PrefetchBatchEventHandler">
            <summary>
            Delegate to handle batched prefetching progress
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PrefetchBatchEventArgs">
            <summary>
            Batched prefetching progress event argument class
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PrefetchBatchEventArgs.UrnType">
            <summary>
            Type of object being prefetched
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PrefetchBatchEventArgs.BatchSize">
            <summary>
            Total objects in current batch
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PrefetchBatchEventArgs.CurrentBatchCount">
            <summary>
            Batch count of current batch
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PrefetchBatchEventArgs.TotalBatchCount">
            <summary>
            Total batches of this type to be used while prefetching
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseSnapshotExtender">
            <summary>
            Extender class for Database Snapshot
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseSnapshotExtender.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseSnapshotExtender.#ctor(Microsoft.SqlServer.Management.Smo.Database)">
            <summary>
            ctor. Takes parent database object to aggregate on
            </summary>
            <param name="database"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DataEnumerator">
            <summary>
            DataEnumerator manages the lazy load of the SQLDataReader that will be iterated through
            for table data INSERT script generation
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.#ctor(Microsoft.SqlServer.Management.Smo.Table,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Creates an instance of DataEnumerator
            </summary>
            <param name="table">Table whose data is to be enumerated as INSERT strings</param>
            <param name="options">Scripting Options</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.MoveNext">
            <summary>
            Moves to the next row of the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.Reset">
            <summary>
            Resets the collection so it can be reiterated.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.Dispose">
            <summary>
            Clean up all resources.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.GetColumnNamesAndSelectSQL(System.Text.StringBuilder@,System.Text.StringBuilder@,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,Microsoft.SqlServer.Management.Smo.Table)">
            <summary>
            Iterates over the columns and populates the columnNames for the columns 
            which are not computed and are not of type TimeStamp.
            Also, generates the select statement that should used to read the data
            for generating insert statements
            </summary>
            <param name="columnNameSQL"></param>
            <param name="selectSQL"></param>
            <param name="options"></param>
            <param name="table"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.GetNextInsertStatement">
            <summary>
            Returns the current INSERT statement string for the current row in the
            SQLDataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.FormatValueByTypeForSelect(Microsoft.SqlServer.Management.Smo.Column)">
            <summary>
            Generates T-SQL script for the SELECT statement to script out table data
            </summary>
            <param name="col">Column to be scripted</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.FormatSqlVariantValue(System.Int32)">
            <summary>
            Creates the proper T-SQL syntaxt to cast the value to the proper sql_variant
            underlying type.  We are relegated to doing this because not all types that 
            are possible for an underlying sql_variant are exposed System.Data.SqlTypes.
            </summary>
            <param name="readerItem"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.FormatValueByType(System.String,System.Int32)">
            <summary>
            Generates T-SQL script for inserting values into target database
            </summary>
            <param name="columnName">Column Name of source to be scripted</param>
            <param name="columnIndex">Index of the column</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.GetUsCultureInfo">
            <summary>
            Returns a US specific CultureInfo object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.ByteArrayToHexString(System.Byte[])">
            <summary>
            Converts byte array to hex string (used for SQL Server binary types)
            </summary>
            <param name="binValue">Input byte array</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataEnumerator.CleanUp">
            <summary>
            Releases all resources
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataEnumerator.System#Collections#Generic#IEnumerator{System#String}#Current">
            <summary>
            Retrieves the current INSERT statement string
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DataEnumerator.EnumeratorState">
            <summary>
            The enumeration for the different states of the Enumerator
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DataScriptCollection">
            <summary>
            DataScriptCollection is a special collection that manages the
            writing of (potentially memory intensive) table data.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataScriptCollection.#ctor(Microsoft.SqlServer.Management.Smo.Table,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Creates a new instance of DataScriptCollection
            </summary>
            <param name="table">Table that we want to script out data values for</param>
            <param name="options">Scipting options specified for this table</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataScriptCollection.#ctor(Microsoft.SqlServer.Management.Smo.DataEnumerator)">
            <summary>
            Creates a new instance of DataScriptCollection
            </summary>
            <param name="dataEnumerator"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlDataType">
            <summary>
            The SqlDataType specifies the type of the DataType object.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DataType">
            <summary>
            The DataType object allows users to define a SQL Server data type.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor">
            <summary>
            Creates a new DataType object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.SqlDataType)">
            <summary>
            Creates a new DataType object. The sqlDataType specifies the SQL Server data type.
            </summary>
            <param name="sqlDataType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.SqlDataType,System.Int32)">
            <summary>
            Creates a new DataType object. The sqlDataType specifies the SQL Server data type.
            MaxLength specifies the maximum length of the type. In case of Decimal or Numeric,
            maxLength specifies the precision.
            </summary>
            <param name="sqlDataType"></param>
            <param name="precisionOrMaxLength"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.SqlDataType,System.Int32,System.Int32)">
            <summary>
            Creates a new DataType object. The sqlDataType specifies the SQL Server data type.
            Precision and scale define the numeric precision and scale of Decimal and Numeric types.
            The scale may be 0.
            </summary>
            <param name="sqlDataType"></param>
            <param name="precision"></param>
            <param name="scale"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.SqlDataType,System.String)">
            <summary>
            Creates a new DataType object. The sqlDataType specifies the SQL Server data type.
            The type parameter specifies a SQL Server type string, i.e. "varchar(10)",
            an Xml schema collection, a user defined type, or a user defined type.
            </summary>
            <param name="sqlDataType"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.SqlDataType,System.String,System.String)">
            <summary>
            Creates a new DataType object. The sqlDataType specifies the SQL Server data type.
            The type parameter specifies a SQL Server type string, i.e. "varchar(10)",
            an Xml schema collection, a user defined type, or a user defined type.
            </summary>
            <param name="sqlDataType"></param>
            <param name="type"></param>
            <param name="schema"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.XmlSchemaCollection)">
            <summary>
            Allows a DataType object to be created based on a XmlSchemaCollection instance.
            </summary>
            <param name="xmlSchemaCollection"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.UserDefinedDataType)">
            <summary>
            Allows a DataType object to be created based on a UserDefinedDataType instance.
            </summary>
            <param name="userDefinedDataType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.UserDefinedTableType)">
            <summary>
            Allows a DataType object to be created based on a UserDefinedTableType instance.
            </summary>
            <param name="userDefinedTableType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.#ctor(Microsoft.SqlServer.Management.Smo.UserDefinedType)">
            <summary>
            Allows a DataType object to be created based on a UserDefinedType instance.
            </summary>
            <param name="userDefinedType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.Binary(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.Binary
            </summary>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.Char(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.Char
            </summary>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.Decimal(System.Int32,System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.Decimal
            </summary>
            <param name="scale"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.Numeric(System.Int32,System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.Numeric
            </summary>
            <param name="scale"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.NChar(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.NChar
            </summary>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.NVarChar(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.NVarChar
            </summary>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.UserDefinedDataType(System.String,System.String)">
            <summary>
            Creates a DataType of type SqlDataType.UserDefinedDataType
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.UserDefinedDataType(System.String)">
            <summary>
            Creates a DataType of type SqlDataType.UserDefinedDataType
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.UserDefinedTableType(System.String,System.String)">
            <summary>
            Creates a DataType of type SqlDataType.UserDefinedTableType
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.UserDefinedTableType(System.String)">
            <summary>
            Creates a DataType of SqlDataType.UserDefinedTableType
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.UserDefinedType(System.String,System.String)">
            <summary>
            Creates a DataType of type SqlDataType.UserDefinedType
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.UserDefinedType(System.String)">
            <summary>
            Creates a DataType of type SqlDataType.UserDefinedType
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.VarBinary(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.VarBinary
            </summary>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.VarChar(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.VarChar
            </summary>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.Xml(System.String)">
            <summary>
            Creates a DataType of type SqlDataType.Xml
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.Xml(System.String,System.String)">
            <summary>
            Creates a DataType of type SqlDataType.Xml
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.Xml(System.String,System.String,Microsoft.SqlServer.Management.Smo.XmlDocumentConstraint)">
            <summary>
            Creates a DataType of type SqlDataType.Xml
            </summary>
            <param name="type"></param>
            <param name="schema"></param>
            <param name="xmlDocumentConstraint"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.Time(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.Time
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.DateTimeOffset(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.DateTimeOffset
            </summary>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.DateTime2(System.Int32)">
            <summary>
            Creates a DataType of type SqlDataType.DateTime2
            </summary>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.SqlToEnum(System.String)">
            <summary>
            Converts a string Sql Data Type name into the corresponding SqlDataType enum
            value. Returns SqlDataType.None if the name is an unknown type.
            </summary>
            <param name="sqlTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.IsSystemDataType(Microsoft.SqlServer.Management.Smo.SqlDataType,Microsoft.SqlServer.Management.Smo.SqlServerVersion)">
            <summary>
            This function verify whether given data type is system type or not for given version
            </summary>
            <param name="dataType"></param>
            <param name="targetVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.IsDataTypeSupportedOnTargetVersion(Microsoft.SqlServer.Management.Smo.SqlDataType,Microsoft.SqlServer.Management.Smo.SqlServerVersion)">
            <summary>
            Determines if the data type is supported on the target version
            </summary>
            <param name="dataType">The <see cref="P:Microsoft.SqlServer.Management.Smo.DataType.SqlDataType"/> to check</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.IsTypeFloatStateCreating(System.String,Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Special function for taking care of scripting of float type columns.
            This makes sense only before a column of float type is getting created.
            </summary>
            <param name="sqlType"></param>
            <param name="sObj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DataType.HasTypeChangedToReal">
            <summary>
            Special function for taking care of scripting the correct DataType if it's "float"
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.BigInt">
            <summary>
            Creates a DataType of type SqlDataType.BigInt
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.HierarchyId">
            <summary>
            Creates a DataType of type SqlDataType.HierarchyId
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Bit">
            <summary>
            Creates a DataType of type SqlDataType.Bit
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.DateTime">
            <summary>
            Creates a DataType of type SqlDataType.DateTime
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Float">
            <summary>
            Creates a DataType of type SqlDataType.Float
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Geography">
            <summary>
            Creates a DataType of type SqlDataType.Geography
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Geometry">
            <summary>
            Creates a DataType of type SqlDataType.Geometry
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Image">
            <summary>
            Creates a DataType of type SqlDataType.Image
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Int">
            <summary>
            Creates a DataType of type SqlDataType.Int
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Money">
            <summary>
            Creates a DataType of type SqlDataType.Money
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.NText">
            <summary>
            Creates a DataType of type SqlDataType.NText
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.NVarCharMax">
            <summary>
            Creates a DataType of type SqlDataType.NVarCharMax
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Real">
            <summary>
            Creates a DataType of type SqlDataType.Real
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.SmallDateTime">
            <summary>
            Creates a DataType of type SqlDataType.SmallDateTime
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.SmallInt">
            <summary>
            Creates a DataType of type SqlDataType.SmallInt
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.SmallMoney">
            <summary>
            Creates a DataType of type SqlDataType.SmallMoney
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Text">
            <summary>
            Creates a DataType of type SqlDataType.Text
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Timestamp">
            <summary>
            Creates a DataType of type SqlDataType.Timestamp
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.TinyInt">
            <summary>
            Creates a DataType of type SqlDataType.TinyInt
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.UniqueIdentifier">
            <summary>
            Creates a DataType of type SqlDataType.UniqueIdentifier
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.VarBinaryMax">
            <summary>
            Creates a DataType of type SqlDataType.VarBinaryMax
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.VarCharMax">
            <summary>
            Creates a DataType of type SqlDataType.VarCharMax
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Variant">
            <summary>
            Creates a DataType of type SqlDataType.Variant
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.SysName">
            <summary>
            Creates a DataType of type SqlDataType.SysName
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Date">
            <summary>
            Creates a DataType of type SqlDataType.Date
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Name">
            <summary>
            Name of the type
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.SqlDataType">
            <summary>
            Specifies the SQL Server data type.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.Schema">
            <summary>
            DataType schema
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.MaximumLength">
            <summary>
            Maximum length of type in bytes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.NumericPrecision">
            <summary>
            Maximum precision of type if numeric-based, else 0.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.NumericScale">
            <summary>
            Maximum scale of type if numeric-based, else 0.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.XmlDocumentConstraint">
            <summary>
            Specifies whether the XML data type is a fragment (content)
            or a well-formed XML 1.0 instance (document).
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.IsNumericType">
            <summary>
            Indicates whether the type is a numeric type or not.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataType.IsStringType">
            <summary>
            Indicates whether the type is a string type or not.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DependencyNode">
            <summary>
            DependencyNode is a base node class
            Contains the urn of the node and the dependency type (SchemaBound/NonSchemaBound) the node has with its parent
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DependencyCollectionNode">
            <summary>
            DependencyCollectionNode class represents an individual entry in the dependency list
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DependencyCollectionNode.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.Boolean,System.Boolean)">
            <summary>
            Creates a new node.
            </summary>
            <param name="urn"></param>
            <param name="fRoot">True if this is a root node.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DependencyCollectionNode.Transactable">
            <summary>
            Flag that indicates if the object can be created/dropped as part of a user transaction.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DependencyCollection">
            <summary>
            Dependency tree returned as a result of dependency discovery phase
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DependencyTreeNode">
            <summary>
            DependencyTreeNode class represents an individual entry in the dependency tree
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DependencyTree">
            <summary>
            Dependency tree returned as a result of dependency discovery phase
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UrnComparer.#ctor(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Constructor
            </summary>
            <param name="collation">SQL Server collation name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UrnComparer.Compare(System.Object,System.Object)">
            <summary>
            The IComparer implementation
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DependencyComparer.#ctor(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Constructor
            </summary>
            <param name="collation">SQL Server collation name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DependencyComparer.Compare(System.Object,System.Object)">
            <summary>
            The IComparer implementation
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DependencyWalker">
            <summary>
            Instance class encapsulating SQL Server database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDmfAdapter.GetTypeFilterProperties(System.Type)">
            <summary>
            Returns filtering properties supported by the SMO
            type represented by the given expression, or null if it's
            not a valid SMO type.
            Currently we only allow Name on objects that are child of the 
            Server object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.EnumerableContainer.Clear" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumerableContainer.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the passed IEnumerable object to the list of objects being maintained
            by this class. The IEnumerable is added to the end of the list
            </summary>
            <param name="stringEnumerable">
            The IEnumerable to add
            </param>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumerableContainer.Add(System.Collections.Specialized.StringCollection)">
            <summary>
            Adds the passed StringCollection object to the list of objects.
            The stringCollection is added to the end of the list.
            </summary>
            <param name="stringCollection"></param>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumerableContainer.IEnumerableToStringCollection(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the string in the passed IEnumerable to a stringCollection
            and returns it.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.EnumerableContainer.GetEnumerator" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumerableContainer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an IEnumerataor object
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AttachOptions">
            <summary>
            List of options that may be passed to Server.AttachDatabase
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AttachOptions.None">
            Attach without any options specified
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AttachOptions.EnableBroker">
            Enables the Service Broker
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AttachOptions.NewBroker">
            Creates a new broker
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AttachOptions.ErrorBrokerConversations">
            Stops all active broker conversations at moment of save point with an error message
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.AttachOptions.RebuildLog">
            Specifies the database is created by attaching an existing set of operating system files. If one or more transaction log files are missing, the log file is rebuilt.
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PrivilegeTypes">
            <summary>
            List of object and database privileges
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectType">
            <summary>
            List of SQL Server types of objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.RepairType">
            <summary>
            List of SQL Server repair types
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LinkedTableType">
            <summary>
            Types of tables that can be enumerated on the linked server
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexEnableAction">
            <summary>
            specifies how an index should be re-enabled
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.IndexEnableAction.Rebuild">
            <summary>
            The index will be rebuilt with the current property-settings
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.IndexEnableAction.Recreate">
            <summary>
            The existing index will be dropped and recreated with the current property-settings.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexOperation">
            <summary>
            specifies what operation to perform on an index alter
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.IndexOperation.Rebuild">
            <summary>
            The index will be rebuilt with the current property-settings.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.IndexOperation.Reorganize">
            <summary>
            The index will be reorganized with the current property-settings.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.IndexOperation.Disable">
            <summary>
            The Index will be disabled.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FragmentationOption">
            <summary>
            specifies how index fragmentation will be retrieved
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Edition">
            <summary>
            the possible values returned by SERVERPROPERTY['EngineEdition']
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.Unknown">
                       Currently these values are duplicated in $\Sql\ssms\shared\ConnectionInfo\src\ConnectionEnums.cs. 
                       Eventually we would like to remove the type defined here (see TFS#7818885) but until that happens
                       make sure to update both enums with any changes
                    *
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.PersonalOrDesktopEngine">
            The server is Personal or standard
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.Standard">
            The server is Standard
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.EnterpriseOrDeveloper">
            The server is Enterprise
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.Express">
            The server is Express
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.SqlDatabase">
            The server is SqlDatabase (Azure)
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.SqlDataWarehouse">
            The server is a DataWarehouse
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.SqlStretchDatabase">
            The server is a StretchDatabase
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.Edition.SqlManagedInstance">
            The server is a SQL Managed Instance
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerStatus">
            <summary>
            the possible values of server status
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ServerStatus.Unknown">
            <summary>
            Unknown state - value doesn't match any of the states below</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ServerStatus.Online">
             <summary>
            Referenced server is available for use (Online).</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ServerStatus.OnlinePending">
             <summary>
            Server startup is underway.</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ServerStatus.Offline">
             <summary>
            Referenced server has been placed offline by a system or user action.</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ServerStatus.OfflinePending">
             <summary>
            Server is in being shuted down.</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServiceStartMode">
            <summary>
            The start mode for a service
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FileStreamEffectiveLevel">
            <summary>
            The effective level for the FILESTREAM feature
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.FileStreamEffectiveLevel.Disabled">
            Disabled
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.FileStreamEffectiveLevel.TSqlAccess">
            T-SQL access only
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.FileStreamEffectiveLevel.TSqlLocalFileSystemAccess">
            T-SQL access and local File system access
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.FileStreamEffectiveLevel.TSqlFullFileSystemAccess">
            T-SQL access and full File system access
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.InstanceState">
            <summary>
            InstanceState values
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.InstanceState.Unknown">
            <summary>
            Unknown state - value doesn't match any of the states below</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.InstanceState.Online">
             <summary>
            Instance is online.</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.InstanceState.OnlinePending">
             <summary>
            Instance is starting up.</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.InstanceState.Offline">
             <summary>
            Instance is offline.</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.InstanceState.OfflinePending">
             <summary>
            Shutdown pending.</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupEncryptionAlgorithm">
            <summary>
            Specifies the algorithm type used for backup encryption.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupEncryptionAlgorithm.Aes128">
            <summary>
            Aes128 Algorithm
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupEncryptionAlgorithm.Aes192">
            <summary>
            Aes192 Algorithm
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupEncryptionAlgorithm.Aes256">
            <summary>
            Aes256 Algorithm
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupEncryptionAlgorithm.TripleDes">
            <summary>
            TripleDes Algorithm
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BackupEncryptorType">
            <summary>
            Specifies the encryptor type used to encrypt an encryption key.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupEncryptorType.ServerCertificate">
            <summary>
            Server Certificate
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.BackupEncryptorType.ServerAsymmetricKey">
            <summary>
            Server Asymmetric Key
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.GeneratedAlwaysType">
            <summary>
            Types of temporal auto-generated columns
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.GeneratedAlwaysType.None">
            <summary>
            Column value is not auto-generated (non-temporal columns)
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.GeneratedAlwaysType.AsRowStart">
            <summary>
            Column value is GENERATED ALWAYS AS ROW START
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.GeneratedAlwaysType.AsRowEnd">
            <summary>
            Column value is GENERATED ALWAYS AS ROW END
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.TableTemporalType">
            <summary>
            Types of Temporal tables
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.TableTemporalType.None">
            <summary>
            System time period
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.TableTemporalType.HistoryTable">
            <summary>
            history table of a system-versioned table
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.TableTemporalType.SystemVersioned">
            <summary>
            System time table
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.#ctor">
            <summary>
            Default constructor
            </summary>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the passed IEnumerable object to the list of objects being maintained
            by this class. The IEnumerable is added to the end of the list
            </summary>
            <param name="stringEnumerable">
            The IEnumerable to add
            </param>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.Add(System.Collections.Specialized.StringCollection)">
            <summary>
            Adds the passed StringCollection object to the list of objects.
            The stringCollection is added to the end of the list.
            </summary>
            <param name="stringCollection"></param>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.Dispose">
            <summary>
            Disposes the resources used by this method
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.MoveNext">
            <summary>
            Moves the enumerator to the next element
            </summary>
            <returns>
            True if there is another value, else false
            </returns>
            
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.Reset">
            <summary>
            Resets the state
            </summary>
            
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.Current" -->
        <member name="P:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.System#Collections#IEnumerator#Current">
            <summary>
            Current implementation for IEnumerator interface
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.EnumeratorContainer.EnumeratorState">
            <summary>
            Enum used to track the state of the object
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoExceptionType">
            <summary>
            Enumeration of exception types defined by
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoException">
            <summary>
            The base class for all SMO exception classes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoException.#ctor">
            <summary>
            Called by the T:Microsoft.SqlServer.Management.Smo.SqlServerManagementException.
            Do not call directly.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoException.#ctor(System.String)">
            <summary>
            Called by the T:Microsoft.SqlServer.Management.Smo.SqlServerManagementException.
            Do not call directly.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoException.#ctor(System.String,System.Exception)">
            <summary>
            Called by the T:Microsoft.SqlServer.Management.Smo.SqlServerManagementException.
            Do not call directly.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoException.SmoExceptionType">
            <summary>
            Gets or sets the T:Microsoft.SqlServer.Management.Smo.SmoExceptionType.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoException.HelpLink">
            <summary>
            Gets a link as string to the support web site.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.MissingObjectException">
            <summary>
            The exception thrown when an object is missing from a collection or
            when a collection does not exist under a server version.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MissingObjectException.#ctor">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.MissingObjectException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MissingObjectException.#ctor(System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.MissingObjectException.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.MissingObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.MissingObjectException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.MissingObjectException.SmoExceptionType">
            <summary>
            Gets the type of exception from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.MissingObjectException.Message">
            <summary>
            Gets the message from the exception as a string.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyNotSetException">
            <summary>
            The exception thrown when an action requires a property
            that has not been set by the user.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyNotSetException.#ctor">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.PropertyNotSetException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyNotSetException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.PropertyNotSetException.
            </summary>
            <param name="message">Exception message as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyNotSetException.#ctor(System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.PropertyNotSetException.
            </summary>
            <param name="propertyName">The name of the property that has not
            been set as string.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyNotSetException.SmoExceptionType">
            <summary>
            Gets the type of exception from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyNotSetException.Message">
            <summary>
            Gets the message from the exception as a string.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException">
            <summary>
            The exception thrown during a scripting action when
            a property has an unusable value or there is a conflict between
            two or more properties.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.
            </summary>
            <param name="message">The message of the exception as strng.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that
            caused the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.#ctor(Microsoft.SqlServer.Management.Smo.Property)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.
            </summary>
            <param name="propertyObject">The property whose value is incorrect as supplied.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.SmoExceptionType">
            <summary>
            Gets the type of exception from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.WrongPropertyValueException.Message">
            <summary>
            Gets the message as string from the exception.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException">
            <summary>
            The exception thrown if a value of the wrong type is assigned to a property.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.#ctor">
            <summary>
            Constructor for the
            Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.#ctor(System.String)">
            <summary>
            Constructor for the
            Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for the
            Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.
            </summary>
            <param name="propertyName">The property that was mismatched.</param>
            <param name="receivedType">The incorrect type received for the property.</param>
            <param name="expectedType">The expected typ for the property.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.SmoExceptionType">
            <summary>
            Gets the type of exception from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyTypeMismatchException.Message">
            <summary>
            Gets the message for the exception as string.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UnknownPropertyException">
            <summary>
            The exception thrown when trying to access a property that
            does not exist for a server version.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.#ctor">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.#ctor(System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.
            </summary>
            <param name="propertyName">The unknown property name.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.Init">
            <summary>
            Initializes T:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.SmoExceptionType">
            <summary>
            Gets the type of exception from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.Message">
            <summary>
            Gets the message from the
            T:Microsoft.SqlServer.Management.Smo.UnknownPropertyException.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException">
            <summary>
            The exception that is thrown when trying to set a readonly property.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException.
            </summary>
            <param name="propertyName">The name of the read-only property.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException.SmoExceptionType">
            <summary>
            Gets the type of exception from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyReadOnlyException.Message">
            <summary>
            Gets the message of the exception as string.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyWriteException">
            <summary>
            The exception thrown when trying to set a property that has been blocked.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyWriteException.#ctor">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.PropertyWriteException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyWriteException.#ctor(System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.PropertyWriteException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyWriteException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.PropertyWriteException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyWriteException.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.PropertyWriteException.
            </summary>
            <param name="propertyName">The name as string of the blocked property that caused
            the exception.</param>
            <param name="objectKind">The kind of object as string of the blocked property.</param>
            <param name="objectName">The name of the object as string of the blocked property</param>
            <param name="reason">The reason for the property blockage.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyWriteException.SmoExceptionType">
            <summary>
            Gets the type of exception from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyWriteException.Message">
            <summary>
            Gets the message of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException">
            <summary>
            The exception thrown when an operation cannot be performed
            in the current object state.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.#ctor">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.#ctor(System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.#ctor(System.String,Microsoft.SqlServer.Management.Smo.SqlSmoState)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.
            </summary>
            <param name="opName">The invalid operation name as string.</param>
            <param name="state">The state as a
            T:Microsoft.SqlServer.Management.Smo.SqlSmoState object.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.SmoExceptionType">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.invalidSmoOperationException.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.InvalidSmoOperationException.Message">
            <summary>
            Gets the message of the exception as string.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException">
            <summary>
            The exception thrown when an operation cannot be performed
            in the current version.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.#ctor(Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.
            </summary>
            <param name="version">The server version as
            T:Microsoft.SqlServer.Server.ServerVersion</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.InvalidVersionSmoOperationException.Message">
            <summary>
            Gets the message of the exception as string.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException">
            <summary>
            The exception thrown when the user is asking for a collection
            not available for the current server version.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.#ctor(System.String,Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.
            </summary>
            <param name="colname">The name of the collection as string.</param>
            <param name="serverVersion">The server version as
            T:Microsoft.SqlServer.Server.ServerVersion</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.CollectionNotAvailableException.Message">
            <summary>
            Gets the message of the exception as formatted string.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException">
            <summary>
            The exception thrown when the caller is asking for a property
            that returned null during enumeration.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.#ctor(System.String,System.Object)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.
            </summary>
            <param name="propertyName">The name of the unretrievable property as string.</param>
            <param name="failedObject">The failed object as T:System.Object.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.PropertyCannotBeRetrievedException.Message">
            <summary>
            Gets the message of the exception as string.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.InternalSmoErrorException">
            <summary>
            The exception thrown when there is an internal error with a
            T:Microsoft.SqlServer.Management.Smo object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InternalSmoErrorException.#ctor">
            <summary>
            Constructor for T:Microsoft.SqlServer.Management.Smo.InternalSmoException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InternalSmoErrorException.#ctor(System.String)">
            <summary>
            Constructor for T:Microsoft.SqlServer.Management.Smo.InternalSmoException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.InternalSmoErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for T:Microsoft.SqlServer.Management.Smo.InternalSmoException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.InternalSmoErrorException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">
            <summary>
            The exception thrown when an operation has failed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FailedOperationException.#ctor">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.FailedOperationException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FailedOperationException.#ctor(System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.FailedOperationException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FailedOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.FailedOperationException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FailedOperationException.#ctor(System.String,System.Object,System.Exception)">
            <summary>
            Called by the T:Microsoft.SqlServer.Management.Smo.SqlServerManagementException.
            Do not call directly.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FailedOperationException.#ctor(System.String,System.Object,System.Exception,System.String)">
            <summary>
            Called by the T:Microsoft.SqlServer.Management.Smo.SqlServerManagementException.
            Do not call directly.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FailedOperationException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FailedOperationException.Operation">
            <summary>
            Gets or sets a string value that specifies the operation.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FailedOperationException.FailedObject">
            <summary>
            Gets or sets the T:System.Object that failed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FailedOperationException.Message">
            <summary>
            Gets the message of the exception.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException">
            <summary>
            The exception thrown when the user is trying to create
            an object with a name that cannot be supported, such as a null string.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException.
            </summary>
            <param name="message">The message of the exception as string.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UnsupportedObjectNameException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServiceRequestException">
            <summary>
            This exception incapsulates a service provider error.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceRequestException.#ctor">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.ServiceRequestException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceRequestException.#ctor(System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.ServiceRequestException.
            </summary>
            <param name="message">The message of the exception as string.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServiceRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.ServiceRequestException.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceRequestException.SmoExceptionType">
            <summary>
            Gets the  type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceRequestException.ErrorCode">
            <summary>
            Gets the error code as an integer.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServiceRequestException.Message">
            <summary>
            The message of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException">
            <summary>
            The exception gets thrown when an operation has failed.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UnsupportedVersionException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UnsupportedEngineTypeException">
            <summary>
            This exception gets thrown when an operation has failed
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UnsupportedEngineEditionException">
            <summary>
            This exception gets thrown when an unsupported engine edition is detected.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException">
            <summary>
            The exception thrown when an object is not supported by Sql Express
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UnsupportedFeatureException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SfcDependencyException">
            <summary>
            This exception gets thrown when a dependency operation failed
            TODO: this will move to SFC once we have generalized the dependency classes (see SfcDependencyDiscovery.cs).
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.InvalidScriptingOptionException">
            <summary>
            This exception gets thrown when invalid scripting options are set
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptWriterException">
            <summary>
            The exception thrown when script writing fails.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptWriterException.#ctor">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.ScriptWriterException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptWriterException.#ctor(System.String)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.ScriptWriterException.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the T:Microsoft.SqlServer.Management.Smo.ScriptWriterException.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptWriterException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException">
            <summary>
            The exception gets thrown when an operation is executed with an unsupported compatability
            level for that operation specified.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException.#ctor">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException.#ctor(System.String)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for the
            T:Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The T:System.Exception instance that caused
            the current exception.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.UnsupportedCompatLevelException.SmoExceptionType">
            <summary>
            Gets the type of exeption from the
            T:Microsoft.SqlServer.Management.Smo.SmoExceptionType enumeration.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExecutionManager">
            <summary>
            encapsulates ConnectionContext and isolates it from the rest of SMO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="name"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.#ctor(Microsoft.SqlServer.Management.Common.ServerConnection)">
             <summary>
            
             </summary>
             <param name="cc"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.GetEnumeratorData(Microsoft.SqlServer.Management.Sdk.Sfc.Request)">
            <summary>
            make enumerator data request
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.GetEnumeratorDataReader(Microsoft.SqlServer.Management.Sdk.Sfc.Request)">
            <summary>
            Returns an IDataReader containing the results of the request
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.GetEnumeratorInfo(Microsoft.SqlServer.Management.Sdk.Sfc.RequestObjectInfo)">
            <summary>
            make enumerator self discover request
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.GetDependencies(Microsoft.SqlServer.Management.Sdk.Sfc.DependencyRequest)">
            <summary>
            make enumerator dependecies request
            </summary>
            <param name="roi"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ExecutionManager.beforeExecuteSql">
            <summary>
            An event raised just before T-SQL queries are executed.
            It is raised on a thread that executes the queries.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ExecutionManager.executeNonQueryCompleted">
            <summary>
            An event raised after ExecuteNonQuery method is completed on
            a background thread.
            This event is raised after AsyncWaitHandle is signaled.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.ExecuteNonQuery(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Common.ExecutionTypes)">
            <summary>
            wrapper for ConnectionContext ExecuteNonQuery
            </summary>
            <param name="queries"></param>
            <param name="executionType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.ExecuteNonQuery(System.String,Microsoft.SqlServer.Management.Common.ExecutionTypes)">
            <summary>
            wrapper for ConnectionContext ExecuteNonQuery
            </summary>
            <param name="queries"></param>
            <param name="executionType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.ExecuteNonQueryWithMessage(System.Collections.Specialized.StringCollection)">
            <summary>
            Executes a DBCC statement, intercepting the server informatiomn messages
            and returning them
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.ExecuteNonQueryWithMessage(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Common.ServerMessageEventHandler,System.Boolean)">
            <summary>
            Executes a DBCC statement, using the specified <see cref="T:Microsoft.SqlServer.Management.Common.ServerMessageEventHandler"/> to pass Server Information messages received
            and returning them
            </summary>
            <param name="queries"></param>
            <param name="dbccMessageHandler"></param>
            <param name="errorsAsMessages"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecutionManager.ExecuteNonQueryWithMessage(System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Common.ServerMessageEventHandler,System.Boolean,System.Boolean)">
            <summary>
            Executes a DBCC statement, using the specified <see cref="T:Microsoft.SqlServer.Management.Common.ServerMessageEventHandler"/> to pass Server Information messages received
            and returning them
            </summary>
            <param name="queries"></param>
            <param name="dbccMessageHandler"></param>
            <param name="errorsAsMessages"></param>
            <param name="retry">Whether we should retry if an exception is thrown during execution</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExecutionManager.ConnectionContext">
            <summary>
            Connection context
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExecutionManager.Parent">
            <summary>
            Reference back to Parent object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExecutionManager.AsyncWaitHandle">
            <summary>
            An wait handle that gets signaled when an asynchronous operation
            is completed.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExecutionStatus">
            <summary>
            An enum describing a state of asynchronous query
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExecuteNonQueryCompletedEventHandler">
            <summary>
            Event handler prototype for ExecuteNonQueryCompleted event.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExecuteNonQueryCompletedEventArgs">
            <summary>
            Argument class for ExecuteNonQueryCompleted event.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExecuteNonQueryThread">
            <summary>
            A helper class that wraps a thread for ExecuteNonQuery method.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecuteNonQueryThread.#ctor(Microsoft.SqlServer.Management.Smo.ExecutionManager,System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Common.ServerMessageEventHandler,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="em">ExecutionManager object that owns this thread.</param>
            <param name="queries">List of queries to execute</param>
            <param name="dbccMessageHandler">Message handler for server events</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecuteNonQueryThread.#ctor(Microsoft.SqlServer.Management.Smo.ExecutionManager,System.Collections.Specialized.StringCollection,Microsoft.SqlServer.Management.Common.ServerMessageEventHandler,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="em">ExecutionManager object that owns this thread.</param>
            <param name="queries">List of queries to execute</param>
            <param name="dbccMessageHandler">Message handler for server events</param>
            <param name="retry">Whether we should retry if an exception is thrown during execution</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExecuteNonQueryThread.Start">
            <summary>
            Start the thread.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExternalResourcePoolAffinityInfo">
            <summary>
            ExternalResourcePoolAffinityInfo 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ExternalResourcePoolAffinityInfo.Parent">
            <summary>
            Returns parent of the object
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ExtensionClass">
            <summary>
            Helper class for extension methods
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExtensionClass.AddCollection(System.Collections.Specialized.StringCollection,System.Collections.Specialized.StringCollection)">
            <summary>
            Add StringCollection to StringCollection
            </summary>
            <param name="strcol1"></param>
            <param name="strcol2"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ExtensionClass.AddCollection(System.Collections.Specialized.StringCollection,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add Ienumerable to StringCollection
            </summary>
            <param name="collection"></param>
            <param name="enumerableString"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState">
            <summary>
            This facet aggregates various availability group state information. It is used to support 
            SQL Server manageability tools.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState.IsOnline">
            <summary>
            Gets a value indicating whether the Availability Group is up. This is true if a functioning primary replica
            exists for the Availability Group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState.IsAutoFailover">
            <summary>
            Gets a value indicating whether the failover mode of the availability group
            is Automatic Failover.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState.NumberOfSynchronizedSecondaryReplicas">
            <summary>
            Gets the number of synchronous secondary replicas with Automatic Failover mode and Synchronized state.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState.NumberOfNotSynchronizingReplicas">
            <summary>
            Gets the nubmer of replicas in a "Not Synchronizing" state.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState.NumberOfNotSynchronizedReplicas">
            <summary>
            Gets the number of replicas that are not in a "Synchronized" state. Since only synchronous replicas
            can be in a "synchronized" state, this does not apply to asynchronous replicas
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState.NumberOfReplicasWithUnhealthyRole">
            <summary>
            Gets the number of replicas that are neither a primary or a secondary in the Availability Group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState.NumberOfDisconnectedReplicas">
            <summary>
            Gets the nubmer of replicas that are not in a "Connected" state
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState">
            <summary>
            This is an adapter class that implements the <see cref="T:Microsoft.SqlServer.Management.Smo.IAvailabilityGroupState"/> logical facet for 
            an Availability Group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.#ctor(Microsoft.SqlServer.Management.Smo.AvailabilityGroup)">
            <summary>
            Initializes a new instance of the AvailabilityGroupState class.
            </summary>
            <param name="ag">The Availability Group this object will expose.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.Refresh">
            <summary>
            Refresh the availability group state data.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.IsOnline">
            <summary>
            Gets a value indicating whether the Availability Group is up. This is true if a functioning primary replica
            exists for the Availability Group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.IsAutoFailover">
            <summary>
            Gets a value indicating whether the failover mode of the availability group is 
            is Automatic Failover. Accessing this property may result in an exception, so we 
            initialize it seperately.  Specifically, if the primary replica is not currently visible, 
            we throw an exception indicating this. This only occurs when accessing this property 
            from a secondary replica that cannot communicate with the cluster store. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.NumberOfSynchronizedSecondaryReplicas">
            <summary>
            Gets the number of synchronous secondary replicas with Automatic Failover mode and Synchronized state.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.NumberOfNotSynchronizingReplicas">
            <summary>
            Gets the nubmer of replicas in a "Not Synchronizing" state.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.NumberOfNotSynchronizedReplicas">
            <summary>
            Gets the number of replicas that are not in a "Synchronized" state. Since only synchronous replicas
            can be in a "synchronized" state, this does not apply to asynchronous replicas
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.NumberOfReplicasWithUnhealthyRole">
            <summary>
            Gets the number of replicas that are neither a primary or a secondary in the Availability Group.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AvailabilityGroupState.NumberOfDisconnectedReplicas">
            <summary>
            Gets the nubmer of replicas that are not in a "Connected" state
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.DataFileVolumeNotIn(System.Collections.Generic.List{System.String})">
            <summary>
            This method compares the drive letter from files in the filegroups against the drive letters
            in the checkDrives parameter.  If any one file drive letter is in the list of checkVolumes, then the
            function returns true otherwise it returns false.
            </summary>
            <param name="checkVolumes"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.Trustworthy">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.AutoClose">
            <summary>
            Returns true if the database has auto-close set to ON.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.AutoShrink">
            <summary>
            Returns true if the database has auto-shrink option enabled.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.RecoveryModel">
            <summary>
            Returns the database recovery model. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.ReadOnly">
            <summary>
            Returns true if the database is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.PageVerify">
            <summary>
            Returns true if the PAGE_VERIFY setting of a database is set to CHECKSUM.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.TargetRecoveryTime">
            <summary>
            Returns target recovery time  setting of a database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseAdapterBase.DelayedDurability">
            <summary>
            Returns delayed durability setting of a database.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseMaintenanceAdapter">
            <summary>
            The Database Maintenance facet has logical properties.  It inherts from the DatabaseAdapter class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseMaintenanceAdapter.DataAndBackupOnSeparateLogicalVolumes">
            <summary>
            Returns true if the database has its data and backup files on different logical volumes.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabasePerformanceAdapter">
            <summary>
            The Database Performance facet implements logical properties and requires overriding Refresh and Alter
            Thus it is a new class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabasePerformanceAdapter.DataAndLogFilesOnSeparateLogicalVolumes">
            <summary>
            Returns true if the database has its data and log files on different logical volumes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabasePerformanceAdapter.CollationMatchesModelOrMaster">
            <summary>
            Returns true if the collation of the database matches master or model.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseSecurityAdapter">
            <summary>
            Database security adds properties from the children and some computed properties.  It inherits from the DatabaseAdapter.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseSecurityAdapter.IsOwnerSysadmin">
            <summary>
            Returns true if the database owner is granted the sysadmin role.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IMultipartNameFacet">
            <summary>
            Identity Facet
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IMultipartNameFacet.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IMultipartNameFacet.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.MultipartNameAdapter">
            <summary>
            Wrapper for the IMultipartNameFacet Interface
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.INameFacet">
            <summary>
            Name Facet
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.INameFacet.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NameAdapter">
            <summary>
            Wrapper for the INameFacet Interface
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.InDoubtTransactionResolutionType">
            <summary>
            List of SQL Server repair types
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FilestreamAccessLevelType">
            <summary>
            List of SQL Server filestream access level types
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerAdapterBase">
            <summary>
            This class acts as the flattener for Server properties hidden in Server.Settings and Server.Configuration
            Facets will inherit from this class to add new logical properties, use this class's Alter and Refresh methods, or
            they override the Alter and Refresh methods.
            
            This class should not implement IDmfAdapter or any facet directly.  Facets must be on leaf-level classes and 
            this class is not intended to be a leaf-level class.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.LoginAuditLevel">
            <summary>
            Sets auditing mode for tracking Logins that have logged with success/failure.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.LoginMode">
            <summary>
            SQL Server Authentication Mode
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.ServiceName">
            <summary>
            Gets service name that the server instance runs under
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.ServiceStartMode">
            <summary>
            Gets the startup mode for the service
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.InstanceName">
            <summary>
            The instance name of this Server
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.FilestreamLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.FilestreamShareName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.Collation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.SqlDomainGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.InstallDataDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.BackupDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.DefaultFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.DefaultLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.NamedPipesEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.TcpEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.InstallSharedDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.BrowserStartMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.BrowserServiceAccount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.ContainmentEnabled">
            <summary>
            Enables or disables contained databases and
            authentication using Facets, across a server instance.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.AffinityMask">
            <summary>
            Binds SQL Server disk I/O to a specified subset of CPUs.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.Affinity64Mask">
            <summary>
            Binds SQL Server disk I/O to a specified subset of CPUs. This option is available only on the 64-bit version 
            of Microsoft SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.AffinityIOMask">
            <summary>
            Binds SQL Server threads to a specified subset of CPUs.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.C2AuditTracingEnabled">
            <summary>
            Audits all attempts to access statements and objects. Writes attempts to a file in the SQL Server Data folder.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.CostThresholdForParallelism">
            <summary>
            Specifies the threshold at which SQL Server creates and runs parallel plans for queries. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.LightweightPoolingEnabled">
            <summary>
            Provides a means of reducing the system overhead that is associated with the excessive context switching 
            that occurs sometimes in symmetric multiprocessing (SMP) environments.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.DynamicLocks">
            <summary>
            Sets the maximum number of available locks. This option limits the amount of memory the Database Engine uses for locks.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.MaxDegreeOfParallelism">
            <summary>
            Limits the number of processors that are used to run a single statement for each parallel plan execution.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.MaxWorkerThreads">
            <summary>
            Configures the number of worker threads that are available to SQL Server processes.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.NetworkPacketSize">
            <summary>
            Sets the packet size (in bytes) that is used across the whole network.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.OpenObjects">
            <summary>
            Sets the maximum number of database objects that can be open at one time on an instance of SQL Server 2000 Database 
            objects are those objects that are defined in the sysobjects table: tables, views, rules, stored procedures, defaults, 
            and triggers
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerAdapterBase.RemoteDataArchiveEnabled">
            <summary>
            Flag indicating whether Stretch feature is enabled for the Server
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerAdapter">
            <summary>
            This class is exactly the ServerAdapterBase class, but it implements IDmfAdapter
            </summary>
            <summary>
            Relational Engine Security.  This facet mixes server settings and configuration, so it can be put on the ServerAdapter directly.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerConfigurationFacet.RemoteDataArchiveEnabled">
            <summary>
            Flag indicating whether Stretch feature is enabled for the Server
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerConfigurationAdapter">
            <summary>
            The Server Configuration properties need to only Alter and Refresh the Server.Configuration properties.
            This class inherits from ServerAdapterBase and overrides those functions.
            </summary>
            <summary>
            This facet is entirely a subset of configuration options, so it is just an interface on the ServerConfigurationAdapter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerConfigurationAdapter.Refresh">
            <summary>
            The Server Configuration facet only affects Configuration options.
            This facet will override the ServerAdapter Refresh.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerConfigurationAdapter.Alter">
            <summary>
            The Server Configuration facet only affects Configuration options.
            This facet will override the ServerAdapter Alter.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerSecurityAdapter">
            <summary>
            Relational Engine Security.  This facet has some logical properties and it needs its own Refresh and Alter.
            It inherits from the ServerAdapterBase.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSecurityAdapter.PublicServerRoleIsGrantedPermissions">
            <summary>
            The server permissions that are granted to the public server role.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerSelectionAdapter">
            <summary>
            Server Selection.  This facet has logical properties enabling users to chose properties to select server.
            It inherits from the ServerAdapterBase.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IServerSetupFacet">
            <summary>
            Server installation facet
            </summary>
            
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.ServiceName">
            <summary>
            The Service name that the Server instance runs under.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.EngineServiceAccount">
            <summary>
            The Service name that the Server instance runs under.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.ServiceStartMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.InstanceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.ServiceInstanceIdSuffix">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.FilestreamLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.FilestreamShareName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.UserInstancesEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.Collation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.SqlDomainGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.WindowsUsersAndGroupsInSysadminRole">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.LoginMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.InstallDataDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.BackupDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.DefaultFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.DefaultLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.TempdbPrimaryFilePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.TempdbLogPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.AgentStartMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.AgentServiceAccount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.AgentDomainGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.NamedPipesEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.TcpEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.InstallSharedDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.BrowserStartMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IServerSetupFacet.BrowserServiceAccount">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter">
            <summary>
            Adapter for AS SAC facet
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.Refresh">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.ServiceInstanceIdSuffix">
            <summary>
            The instance Id for this Server  
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.WindowsUsersAndGroupsInSysadminRole">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.TempdbPrimaryFilePath">
            <summary>
            The PrimaryFilePath for the tempdb database.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.TempdbLogPath">
            <summary>
            The log file path for the tempdb database
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.AgentStartMode">
            <summary>
            The JobServer ServiceStartMode
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.AgentServiceAccount">
            <summary>
            The JobServer ServiceAccount
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.AgentDomainGroup">
            <summary>
            The JobServer AgentDomainGroup
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSetupAdapter.EngineServiceAccount">
            <summary>
            The ServiceAccount for the Sql Server Engine
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.AdHocRemoteQueriesEnabled">
            <summary>
            Ad-hoc Remote Queries Enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.DatabaseMailEnabled">
            <summary>
            Database Mail Enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.ClrIntegrationEnabled">
            <summary>
            CLR Integration Enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.OleAutomationEnabled">
            <summary>
            OLE Automation Enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.RemoteDacEnabled">
            <summary>
            Remote DAC Enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.SqlMailEnabled">
            <summary>
            SqlMail Enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.WebAssistantEnabled">
            <summary>
            Web Assistant Enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.XPCmdShellEnabled">
            <summary>
            xp_cmdshell Enabled
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.ServiceBrokerEndpointActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISurfaceAreaFacet.SoapEndpointsEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerSurfaceAreaAdapter">
            <summary>
            This facet is entirely a subset of configuration options, so it is just an interface on the ServerConfigurationAdapter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerSurfaceAreaAdapter.GetBrokerEndpoint">
            <summary>
            Returns the Broker endpoint defined on the server, if it exists.
            At eny point the server can have at most one broker endpoint, 
            if there isn't such an endpoint the function returns null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerSurfaceAreaAdapter.AlterEndpoints">
            <summary>
            This function implements the delayed setters for the
            endpoints properties.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSurfaceAreaAdapter.ServiceBrokerEndpointActive">
            <summary>
            Returns TRUE when a Service Broker endpoint exists and is in the 
            STARTED state. Returns FALSE when Service Broker does not exist 
            on the computer or it exists but is not started. Configure the 
            endpoint to TRUE to start a stopped or disabled endpoint. The 
            operation will fail if the endpoint does not exist on the server. 
            Configure the endpoint to FALSE to disable the Service Broker endpoint.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerSurfaceAreaAdapter.SoapEndpointsEnabled">
            <summary>
            Returns TRUE if at least one SOAP endpoint is responding to SOAP 
            requests. This means that the endpoint is either in the Started
            or Stopped state as the endpoint responds to requests in both states.
            Returns FALSE if all SOAP endpoints are disabled or if 
            there are no SOAP endpoints. Configuring it to FALSE will disable 
            all the soap endpoints.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ISmartAdminState">
            <summary>
            This facet aggregates smartadmin state information. It is used to support 
            SQL Server manageability tools.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.IsMasterSwitchEnabled">
            <summary>
            Gets a value indicating whether master switch is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.IsBackupEnabled">
            <summary>
            Gets a value indicating whether smartbackup is enaabled.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.NumberOfStorageConnectivityErrors">
            <summary>
            Gets the number of storage account connectivity errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.NumberOfSqlErrors">
            <summary>
            Gets the number of SQL Server connectivity errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.NumberOfInvalidCredentialErrors">
            <summary>
            Gets the number of invalid Microsoft Azure storage credential errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.NumberOfOtherErrors">
            <summary>
            Gets the number of all other errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.NumberOfCorruptedOrDeletedBackups">
            <summary>
            Gets the number of invalid Microsoft Azure srotage credential errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.NumberOfBackupLoops">
            <summary>
            Gets the number of backup loops.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmartAdminState.NumberOfRetentionLoops">
            <summary>
            Gets the number of retention loops.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmartAdminState">
            <summary>
            This is an adapter class that implements the <see cref="T:Microsoft.SqlServer.Management.Smo.ISmartAdminState"/> logical facet for 
            an Availability Group.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdminState.#ctor(Microsoft.SqlServer.Management.Smo.SmartAdmin)">
            <summary>
            Initializes a new instance of the SmartAdminState class.
            </summary>
            <param name="smartadmin">The smartadmin object.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmartAdminState.Refresh">
            <summary>
            Refresh the smartadmin object state
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.IsMasterSwitchEnabled">
            <summary>
            Gets a value indicating whether master switch is on
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.IsBackupEnabled">
            <summary>
            Gets a value indicating whether smart backup is enabled or not.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.NumberOfStorageConnectivityErrors">
            <summary>
            Gets the number of Storage connectivity errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.NumberOfSqlErrors">
            <summary>
            Gets the number of SQL Errors seen by smartadmin components(main loop, retention threads).
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.NumberOfInvalidCredentialErrors">
            <summary>
            Gets the number of Invalid storage credential errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.NumberOfOtherErrors">
            <summary>
            Gets the number of all other errors.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.NumberOfCorruptedOrDeletedBackups">
            <summary>
            Gets the number Corrupted or deleted backups
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.NumberOfBackupLoops">
            <summary>
            Gets the number of backup loops. If zero then main loop is stalled.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmartAdminState.NumberOfRetentionLoops">
            <summary>
            Gets the number of retention loops. If zero then retention thread is stalled.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter">
            <summary>
            Represents the class used to write scripts of database objects.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ISmoScriptWriter">
            <summary>
            Interface that defines writing of scripts of sql server management objects
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ISmoScriptWriter.ScriptObject(System.Collections.Generic.IEnumerable{System.String},Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Interface that writes database object scripts.
            </summary>
            <param name="script">Enumerable collection of string
            that contain scripts of database items.</param>
            <param name="obj">The T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn to script.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ISmoScriptWriter.ScriptData(System.Collections.Generic.IEnumerable{System.String},Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes table items' data scripts.
            </summary>
            <param name="dataScript">Enumerable collection of string
            objects that will contain data scripts</param>
            <param name="table">The table to be scripted.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ISmoScriptWriter.ScriptContext(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes a string that specifies the database being scripted.
            The database context is the equivalent of the USE [Database] segment of
            the database script.
            </summary>
            <param name="databaseContext">String that specifies the database to script.</param>
            <param name="obj">The T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn to script.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmoScriptWriter.Header">
            <summary>
            The header string to insert at the beginning of the script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.Init">
            <summary>
            Initializes the variables and properties to initialize a new instance of T:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.#ctor(System.String)">
            <summary>
            Creates a new instance of FilePerObjectWriter.
            </summary>
            <param name="folderPath">Folder path for the output files of T:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.VerfiyFolderPath(System.String)">
            <summary>
            Verifies that the FolderPath exists.
            </summary>
            <param name="folderPath">Folder path for the output files of T:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.ScriptObject(System.Collections.Generic.IEnumerable{System.String},Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes object's script specified by the script parameter.
            </summary>
            <param name="script">The collection of script to be written.</param>
            <param name="obj">The database object that will be scripted.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.ScriptData(System.Collections.Generic.IEnumerable{System.String},Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes table's data script
            </summary>
            <param name="dataScript">The collection of script to be written.</param>
            <param name="table">The T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn to script.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.ScriptContext(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes USE [Database] segment of the script.
            </summary>
            <param name="databaseContext">A string that identifies the database context of objects to be scripted.</param>
            <param name="obj">The database object T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn to be scripted.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.Close">
            <summary>
            Disposes associated filestreams.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.Dispose">
            <summary>
            Disposes associated filestreams.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.CompleteFileName(System.String)">
            <summary>
            Combine path, file name and extension
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.GetSingleFileWriter(System.String)">
            <summary>
            Initialize SingleFileWriter with Options
            </summary>
            <param name="uniqueFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.GetFileWriter(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Gets SingleFilewriter for object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.GetValidFileName(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Get a valid file name.
            Replaces characters that are not valid for files with InvalidCharacterReplacement
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.GetFileName(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Get filename from a Urn using Name and Schema
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.Encoding">
            <summary>
            Specifies the encoding for the files used by T:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.AppendToFile">
            <summary>
            Specifies whether files are appended or overwritten.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.BatchTerminator">
            <summary>
            String to be written at the end of every batch when complete.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.ScriptBatchTerminator">
            <summary>
            Specifies whether or not to script batch terminator after every batch.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.InsertBatchSize">
            <summary>
            Specifies the number of insert statements to write before batch terminator is set.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.FilePerObjectWriter.Header">
            <summary>
            The header string to insert at the beginning of the script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobObjectKey.#ctor(System.String,System.Int32)">
            <summary>
            .ctor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobObjectKey.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobObjectKey.GetFieldNames">
            <summary>
            Return all fields that are used by this key.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobObjectKey.Clone">
            <summary>
            Clone the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobObjectKey.GetComparer(System.Collections.IComparer)">
            <summary>
            Returns string comparer needed to compare the string portion of this key.
            </summary>
            <param name="stringComparer"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Agent.JobObjectKey.UrnFilter">
            <summary>
            Urn suffix that identifies this object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Agent.JobObjectKey.IsNull">
            <summary>
            True if the key is null.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobCollection.InitInnerCollection">
            <summary>
            Initializes the storage
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobCollection.ItemById(System.Guid)">
            <summary>
            ItemById
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobHistoryFilter.GetPurgeFilter">
            <summary>
            Returns the filter used by PurgeJobHistory.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.JobFilter">
            <summary>
            The JobFilter object is used to constrain the output of the EnumJobs 
            method of the JobServer object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Agent.JobFilter.GetEnumRequest(Microsoft.SqlServer.Management.Smo.Agent.JobServer)">
            <summary>
            Construct enumerator request with Urn Filter
            </summary>
            <param name="jobServer"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Agent.FindOperand">
            <summary>
            This directs evaluation of the DateJobCreated and DateJobLastModified 
            filter properties.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DefaultLanguage">
            <summary>
            This object manages the lcid and name properties for both the user and database SMO objects.
            Methods are provided to read and write both the default and fulltext properties.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultLanguage.VerifyBothLcidAndNameNotDirty(System.Boolean)">
            <summary>
            Throws exception if both the properties are set simultaneously.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultLanguage.Equals(System.Object)">
            <summary>
            Determines whether the specified objects are considered equal.
            </summary>
            <param name="obj">The object to compare to the current DataType.</param>
            <returns>A Boolean that specifies whether the objects are equal. True if the two objects are equal. False if they are not equal.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DefaultLanguage.GetHashCode">
            <summary>
            This method supports the SQL Server infrastructure and is not intended to be used directly from your code. 
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DefaultLanguage.Lcid">
            <summary>
            Gets or sets the locale id of the language.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DefaultLanguage.Name">
            <summary>
            Gets or sets the name of the language.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.LoginCreateOptions">
            <summary>
            Specifies options that can be specified when creating a login
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.LoginCreateOptions.None">
            <summary>No options.</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.LoginCreateOptions.IsHashed">
            <summary>Indicates if the password has already been hashed, which allows passwords to be reapplied to a login.</summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.LoginCreateOptions.MustChange">
            <summary>Indicates whether the user has to change the password on the next Login.</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseMapping">
            <summary>
             this is a structure to hold database mappings
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseMapping.#ctor(System.String,System.String,System.String)">
            <summary>
            .ctor
            </summary>
            <param name="loginName"></param>
            <param name="dbName"></param>
            <param name="userName"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DatabaseMapping.ToString">
            <summary>
            Override - returns "Login={0};Database={1};User={2}"
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseMapping.LoginName">
            <summary>
            LoginName
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseMapping.DBName">
            <summary>
            DBName
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabaseMapping.UserName">
            <summary>
            UserName
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumaNodeAffinity">
            <summary>
            Defines Affinity Type of NumaNode
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.NumaNode">
            <summary>
            NumaNode Class
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumaNode.Cpus">
            <summary>
            Gets CPU's which are associated to this NumaNode
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumaNode.ID">
            <summary>
            Gets ID of NuamNode
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumaNode.GroupID">
            <summary>
            Gets GroupId to which this NumaNode belongs
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.NumaNode.AffinityMask">
            <summary>
            Gets or sets AffinityMask of NumaNode
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PermissionSetBase">
            <summary>
            Abstract class for all Permission classes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PermissionSetBase.GetPermissionCount">
            <summary>
            Returns count of how many permissions have been added to the PermissionSet.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DatabasePermissionSet.NumberOfElements">
            <summary>
            The number permissions in the SMO enumerator
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PermissionWorker.CheckPermissionsAllowed(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Check if permission is allowed for the server version. If not allowed, throw 
            UnsupportedVersionException.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.BitStorage">
            <summary>
            This is specialized bit storage for storing 4 bits per item
            Bits are packed into Int32 values
            
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.PropertyCollection.GetValueWithNullReplacement(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the property value. It does not allow null values unless this is a
            value that makes sense in the OO model, otherwise an exception is thrown.
            </summary>
            <param name="propertyName">Name of the property</param>
            <param name="throwOnNullValue">Indicates whether we should throw an exception
            in case of a null value in the property bag</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PropertyAccessPurpose">
            <summary>
            used as a parameter for the property access function
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StaticMetadata">
            <summary>
             Contains the static attributes of a property that do not change with every instance of a class
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StaticMetadata.#ctor(System.String,System.Boolean,System.Boolean,System.Type)">
            <summary>
            Basic constructor
            </summary>
            <param name="name"></param>
            <param name="expensive"></param>
            <param name="readOnly"></param>
            <param name="propertyType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StaticMetadata.#ctor(System.String)">
            <summary>
            Basic constructor with defaults
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DynamicPropertyMetadataProvider">
            <summary>
            Extends PropertyMetadataProvider to support a dynamic list of properties
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DynamicPropertyMetadataProvider.PropertyNameToIDLookup(System.String)">
            <summary>
            Get property index from a property name name
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DynamicPropertyMetadataProvider.GetStaticMetadata(System.Int32)">
            <summary>
            Get StaticMetadata fro the property with the given index
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.DynamicPropertyMetadataProvider.AddMetadata(System.String,System.Boolean,System.Type)">
            <summary>
            Add a new property with the given attributes
            </summary>
            <param name="name"></param>
            <param name="readOnly"></param>
            <param name="type"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DynamicPropertyMetadataProvider.Count">
            <summary>
            Get the number of properties in this provider
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlPropertyInfo">
            <summary>
             Class encapsulating metadata and version info about a sql property.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SqlPropertyInfo.Versions">
            <summary>
            The versions this property is supported on
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationState">
            <summary>
            Current data migration state of a stretched table
            Refer remote_data_archive_migration_state in https://msdn.microsoft.com/en-us/library/ms187406.aspx
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationState.Disabled">
            <summary>
            The table is not Stretch-enabled
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationState.PausedOutbound">
            <summary>
            The table is stretch-enabled, but the data migration is paused
            when the direction of data-flow is outbound
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationState.PausedInbound">
            <summary>
            The table is stretch-enabled, but the data migration is paused
            when the direction of data-flow is inbound
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationState.Outbound">
            <summary>
            The table is Stretch-enabled, and data migration direction is out-bound to azure
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationState.Inbound">
            <summary>
            The table is Stretch-enabled, and data migration direction is in-bound from azure
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationState.Paused">
            <summary>
            This value has been kept for backward compatibility. It will be removed once all
            the references to it are removed.
            TODO: remove this value
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport">
            <summary>
            Status report for each batch of rows migrated to Remote Data Archive
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.#ctor(System.String,System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            ctor
            </summary>
            <param name="databaseName">The ID of the database from which rows were migrated.</param>
            <param name="tableName">The ID of the table from which rows were migrated.</param>
            <param name="migratedRows">The number of rows migrated in this batch.</param>
            <param name="statusReportStartTimeInUtc">The UTC time at which the batch started.</param>
            <param name="statusReportEndTimeInUtc">The UTC time at which the batch finished.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.#ctor(System.String,System.String,System.Int64,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            ctor
            </summary>
            <param name="databaseName">The ID of the database from which rows were migrated.</param>
            <param name="tableName">The ID of the table from which rows were migrated.</param>
            <param name="migratedRows">The number of rows migrated in this batch.</param>
            <param name="statusReportStartTimeInUtc">The UTC time at which the batch started.</param>
            <param name="statusReportEndTimeInUtc">The UTC time at which the batch finished.</param>
            <param name="errorNumber">If the batch fails, the error number of the error that occurred; otherwise, null.</param>
            <param name="errorSeverity">If the batch fails, the severity of the error that occurred; otherwise, null.</param>
            <param name="errorState">If the batch fails, the state of the error that occurred; otherwise, null.</param>
            <param name="details">Details of the error message.</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.DatabaseName">
            <summary>
            The name of the database from which rows were migrated.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.TableName">
            <summary>
            The name of the table from which rows were migrated.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.MigratedRows">
            <summary>
            The number of rows migrated in this batch.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.StatusReportStartTimeInUtc">
            <summary>
            The UTC time at which the batch started.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.StatusReportEndTimeInUtc">
            <summary>
            The UTC time at which the batch finished.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.ErrorNumber">
            <summary>
            If the batch fails, the error number of the error that occurred; otherwise, 0.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.ErrorSeverity">
            <summary>
            If the batch fails, the severity of the error that occurred; otherwise, 0.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.ErrorState">
            <summary>
            If the batch fails, the state of the error that occurred; otherwise, 0.
            The error state indicates the condition or location where the error occurred.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDataArchiveMigrationStatusReport.Details">
            <summary>
            Details of the error message.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.RemoteDatabaseMigrationStatistics">
            <summary>
            Statistics about the Remote database created for Remote Data Archive
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.RemoteDatabaseMigrationStatistics.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.RemoteDatabaseMigrationStatistics.#ctor(System.Double)">
            <summary>
            ctor
            </summary>
            <param name="remoteDatabaseSizeInMB">Remote database size in MB</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteDatabaseMigrationStatistics.RemoteDatabaseSizeInMB">
            <summary>
            Remote database size in MB
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.RemoteTableMigrationStatistics">
            <summary>
            Statistics about the Remote table created for Remote Data Archive
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.RemoteTableMigrationStatistics.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.RemoteTableMigrationStatistics.#ctor(System.Double,System.Int64)">
            <summary>
            ctor
            </summary>
            <param name="sizeInKB">Remote table size in KB</param>
            <param name="rowCount">Number of rows migrated to the remote table</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteTableMigrationStatistics.SizeInKB">
            <summary>
            Remote table size in KB
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RemoteTableMigrationStatistics.RowCount">
            <summary>
            Number of rows migrated to the remote table
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ResourcePoolAffinityInfo">
             <summary>
            ResourcePoolAffinityInfo 
             </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ResourcePoolAffinityInfo.schedulerCollection">
            <summary>
            Getting CPUcollection instance
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ResourcePoolAffinityInfo.Parent">
            <summary>
            Returns Parent of the object
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.QueryStoreOperationMode">
            <summary>
            Operation Mode values for Query Store
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.QueryStoreCaptureMode">
            <summary>
            Capture Mode values for Query Store
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.QueryStoreSizeBasedCleanupMode">
            <summary>
            Size Based Cleanup Mode values for Query Store
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.QueryStoreOptionsEnumExtensions">
            <summary>
            Helper extensions to translate enum values for this class into the strings used
            in T-SQL scripts
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Scheduler">
            <summary>
            Scheduler class
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Scheduler.Id">
            <summary>
            Gets Scheduler ID
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Scheduler.Cpu">
            <summary>
            Gets CPU object which the scheduler is assigned to 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.Scheduler.AffinityMask">
            <summary>
            Gets or sets AffinityMask of scheduler
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptFragment">
            <summary>
            This class basic building block of the scripts stored
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptFragment.Script">
            <summary>
            If error has been stored throw error otherwise script
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptContainer">
            <summary>
            This class is collection of scriptfragments 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptContainer.CreateScript">
            <summary>
            Create DDL
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptContainer.DropScript">
            <summary>
            Drop DDL
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptContainer.DatabaseContext">
            <summary>
            USE [Database]
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectScriptContainer">
            <summary>
            Container corresponding to SqlSmoObject
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ObjectScriptContainer.Initialize(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,Microsoft.SqlServer.Management.Smo.RetryRequestedEventHandler)">
            <summary>
            Method to initialize the DDL fragments and to be overridden by base class for any extra initialization if necessary
            </summary>
            <param name="obj"></param>
            <param name="sp"></param>
            <param name="retryEvent"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IdBasedObjectScriptContainer">
            <summary>
            Container corresponding to types whose IDs are required in scripting process mainly while ordering
            for table and view
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.TableScriptContainer">
            <summary>
            Table 's container
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableScriptContainer.DataScript">
            <summary>
            Insert Data scripts
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TableScriptContainer.BindingsScript">
            <summary>
            rule and default binding script
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexScriptContainer">
            <summary>
            Container for index
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptContainerFactory">
            <summary>
            This class is a dictionary of scriptcontainer
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptContainerFactory.AddContainer(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Method to get container based on type and store it in dictionary
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UrnCollection">
            <summary>
            ArrayList of Urn objects
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.Scripter">
            <summary>
            Instance class encapsulating Scripter object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Scripter.ScriptWithList(Microsoft.SqlServer.Management.Smo.SqlSmoObject[])">
            <summary>
            Returns a StringCollection object with the script for the passed objects.
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.SqlServer.Management.Smo.Scripter.EnumScriptWithList(Microsoft.SqlServer.Management.Smo.SqlSmoObject[])" -->
        <member name="M:Microsoft.SqlServer.Management.Smo.Scripter.ScriptWithList(Microsoft.SqlServer.Management.Smo.UrnCollection)">
            <summary>
            Returns a StringCollection object with the script for the passed objects. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Scripter.ScriptWithList(Microsoft.SqlServer.Management.Sdk.Sfc.Urn[])">
            <summary>
            Returns a StringCollection object with the script for the passed objects. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Scripter.ScriptWithList(Microsoft.SqlServer.Management.Smo.DependencyCollection)">
            <summary>
            Returns a StringCollection object with the script for the passed objects. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Scripter.Script(Microsoft.SqlServer.Management.Smo.SqlSmoObject[])">
            <summary>
            Returns a StringCollection object with the script for the passed objects. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Scripter.Script(Microsoft.SqlServer.Management.Smo.UrnCollection)">
            <summary>
            Returns a StringCollection object with the script for the passed objects. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Scripter.Script(Microsoft.SqlServer.Management.Sdk.Sfc.Urn[])">
            <summary>
            Returns a StringCollection object with the script for the passed objects. This method
            throws an error if ScriptData is true
            </summary>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.FailedOperationException">If Options.ScriptData is true</exception>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.Scripter.EnumDependencies(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Smo.DependencyType)">
            <summary>
            list the urns  in the order in which the objects must be created respectively dropped
            </summary>
            <param name="smoObject"></param>
            <param name="dependencyType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ISmoFilter">
            <summary>
            Interface that defines filtering of T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ISmoFilter.Filter(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Filters the list of input T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items.
            </summary>
            <param name="urns">A enumeration of input
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items.</param>
            <returns>A enumeration of
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmoFilter.Server">
            <summary>
            Gets or sets the server for the T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn
            items provided.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ISmoDependencyOrderer.Order(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Sorts a generic list of
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items.
            </summary>
            <param name="urns">Generic list of input
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items.</param>
            <returns>Generic list of T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmoDependencyOrderer.Server">
            <summary>
            Gets or sets the server for the
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items provided.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ISmoDependencyDiscoverer.Discover(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Discovers dependent objects for each
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn item in the list supplied
            by the urns parameter.
            </summary>
            <param name="urns">A enumeration of
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn input items.</param>
            <returns>A enumeration of
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ISmoDependencyDiscoverer.Server">
            <summary>
            Gets or sets the server for the
            T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn items provided.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlServerVersionInternal">
            <summary>
            Internal enum - contains all versions supported by SMO.
            Note that 7.0 is not exposed publicly so this is why we have this enum.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SqlServerVersion">
            <summary>
            Enumerates versions of SqlServer supported by SMO.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptOption">
            <summary>
            A single scripting option. It represents a single value
            from the above enum.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptOption.op_Addition(Microsoft.SqlServer.Management.Smo.ScriptOption,Microsoft.SqlServer.Management.Smo.ScriptOption)">
            <summary>
            This method allows us to set multiple options by using plus sign
            </summary>
            <param name="so1"></param>
            <param name="so2"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptingOptions">
            <summary>
            Instance class encapsulating SQL Server database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.#ctor">
            <summary>
            Default constructor. Sets all default options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.#ctor(Microsoft.SqlServer.Management.Smo.ScriptingOptions)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.#ctor(Microsoft.SqlServer.Management.Smo.ScriptOption)">
            <summary>
            Creates a ScriptingOptions object with a single option set.
            </summary>
            <param name="so">An option to set</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.#ctor(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Internal constructor. Same as default but it sets correct server version using parent object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.Init">
            <summary>
            Sets all default options.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.SetTargetServerVersion(Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            Sets the TargetServerVersionInternal based on a ServerVersion structure.
            </summary>
            <param name="ver"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.SetTargetDatabaseEngineType(Microsoft.SqlServer.Management.Common.DatabaseEngineType)">
            <summary>
            Sets the TargetServerDatabasseEngineType based on a DatabaseEngineType structure.
            </summary>
            <param name="ver"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.SetTargetDatabaseEngineType(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Sets the target database engine type
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.SetTargetServerVersion(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Sets the target server version based on the server version
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.SetTargetServerInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Sets the target server info based on the server info
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.SetTargetServerInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.Boolean)">
            <summary>
            Sets the target server info based on the server info if not dirty
            </summary>
            <param name="o"></param>
            <param name="forced"></param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptingOptions.m_options">
            <summary>
            A bit array that storeas all public options
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ConvertVersion(System.Version)">
            <summary>
            Method to convert the server version to SqlServerVersion
            </summary>
            <param name="majorVersion">server version</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ConvertToSqlServerVersion(Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            Converts a <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/> into the equivalent <see cref="T:Microsoft.SqlServer.Management.Smo.SqlServerVersion"/> value
            </summary>
            <param name="serverVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ConvertToSqlServerVersion(System.Int32,System.Int32)">
            <summary>
            Converts a Major and Minor version number pair into the equivalent <see cref="T:Microsoft.SqlServer.Management.Smo.SqlServerVersion"/>
            </summary>
            <param name="majorVersion"></param>
            <param name="minorVersion"></param>
            <returns></returns>
            <exception cref="T:Microsoft.SqlServer.Management.Smo.SmoException">If the version numbers are invalid</exception>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.GetScriptingPreferences">
            <summary>
            Returns Scripting Preferences corresponding to the ScriptingOptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.GetSmoUrnFilterForDiscovery(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Returns SmoUrnFilter corresponding to the ScriptingOptions for discovery
            </summary>
            <param name="srv"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.GetAllFilters(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Returns SmoUrnFilter corresponding to the ScriptingOptions for discovery
            </summary>
            <param name="srv"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingOptions.GetSmoUrnFilterForFiltering(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Returns SmoUrnFilter corresponding to the ScriptingOptions for filtering.
            </summary>
            <param name="srv"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ScriptForCreateDrop">
            <summary>
            Scripts DROP and Create statement for the objects.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ScriptForAlter">
            <summary>
            Scripts ALTER statement for the objects.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.BatchSize">
            <summary>
            The number of statements after which to script batch terminator
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ScriptDrops">
            <summary>
            Scripts DROP statemens for the objects.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.TargetServerVersionInternal">
            <summary>
            The server version on which the scripts will run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.TargetServerVersion">
            <summary>
            The server version on which the scripts will run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.TargetDatabaseEngineType">
            <summary>
            The server database engine type on which the scripts will run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.TargetDatabaseEngineEdition">
            <summary>
            The server database edition on which the scripts will run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.AnsiFile">
            <summary>
            If set will create an ANSI file in which to write the script results.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.AppendToFile">
            <summary>
            Appends to file instead of overwriting it.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.SchemaQualify">
            <summary>
            Whether object names are schema qualified
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.IncludeHeaders">
            <summary>
            Whether a header containing information about the object being scripted (such as name
            and time scripted ) is included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.IncludeScriptingParametersHeader">
            <summary>
            Whether a header containing information about the scripting parameters is included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.IncludeIfNotExists">
            <summary>
            Whether an existence check is added
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.NoFileStream">
            <summary>
            Whether to exclude filestream filegroups
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.NoFileStreamColumn">
            <summary>
            Whether to include filestream column
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.NoCollation">
            <summary>
            Whether collation details are excluded
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ContinueScriptingOnError">
            <summary>
            Whether execution should continue on scripting error
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.IncludeDatabaseRoleMemberships">
            <summary>
            Whether binding memberships are included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.Permissions">
            <summary>
            Whether permissions are included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.AllowSystemObjects">
            <summary>
            Whether system objects are scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.NoIdentities">
            <summary>
            Whether identities are excluded
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ConvertUserDefinedDataTypesToBaseType">
            <summary>
            Whether user defined data types are converted to base type
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.TimestampToBinary">
            <summary>
            Whether timestamps are converted to binary
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.AnsiPadding">
            <summary>
            Whether ansi padding scripts are included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ExtendedProperties">
            <summary>
            Whether extended properties are scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.SchemaQualifyForeignKeysReferences">
            <summary>
            Whether referenced table names are schema qualified
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.AgentAlertJob">
            <summary>
            Whether to include scripting Agent Alert jobs
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.AgentJobId">
            <summary>
            Whether to include scripting Agent job id
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.AgentNotify">
            <summary>
            Whether to include scripting Agent notifications
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.LoginSid">
            <summary>
            Whether security identifier (SID) is included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.IncludeDatabaseContext">
            <summary>
            Whether use database script are included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.NoXmlNamespaces">
            <summary>
            Whether XmlNamespaces are included for data types
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.DriIncludeSystemNames">
            <summary>
            Whether to include system names for constraints
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.OptimizerData">
            <summary>
            Whether to include OptimizerData
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.NoExecuteAs">
            <summary>
            Whether to exclude EXECUTE AS statements
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.NoMailProfileAccounts">
            <summary>
            Whether mail accounts are excluded
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.NoMailProfilePrincipals">
            <summary>
            Whether mail account principals are excluded
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ChangeTracking">
            <summary>
            Whether to include Change Tracking options
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ScriptDataCompression">
            <summary>
            Whether to include Data Compression options
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ScriptSchema">
            <summary>
            Whether metadata script are included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ScriptData">
            <summary>
            Whether data is included
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingOptions.ScriptOwner">
            <summary>
            Whether owner statements are included
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptBehavior">
            <summary>
            Enumerates ScriptBehavior as Drop,Create or Drop and Create
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptBehavior.Create">
            <summary>
            Create Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptBehavior.Drop">
            <summary>
            Drop Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptBehavior.DropAndCreate">
            <summary>
            Drop and create Script
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.PartitioningScheme">
            <summary>
            Enumerates Partition Scheme is scripted for None,Table,Index or All
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.PartitioningScheme.None">
            <summary>
            No Partition Scheme
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.PartitioningScheme.Table">
            <summary>
            Partition Scheme for table
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.PartitioningScheme.Index">
            <summary>
            Partition Scheme for index
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.PartitioningScheme.All">
            <summary>
            Partition Scheme for both table and index
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptingPreferences">
            <summary>
            Defines preferences for scripting
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SetTargetServerVersion(Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            Sets the TargetServerVersionInternal based on input ServerVersion structure.
            </summary>
            <param name="ver"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SetTargetDatabaseEngineType(Microsoft.SqlServer.Management.Common.DatabaseEngineType)">
            <summary>
            Sets the target database engine type to input DatabaseEngineType structure
            </summary>
            <param name="databaseEngineType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SetTargetDatabaseEngineEdition(Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Sets the target database engine edition to input DatabaseEngineEdition structure
            </summary>
            <param name="databaseEngineEdition"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SetTargetServerVersion(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Sets the target server version based on SMO object's ServerVersion
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SetTargetDatabaseEngineType(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Sets the target database engine type based on SMO object's DatabaseEngineType
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SetTargetDatabaseEngineEdition(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Sets the target database engine edition based on SMO object's DatabaseEngineEdition
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.TargetEngineIsAzureStretchDb">
            <summary>
            Returns true if the target is an Azure Stretch database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.TargetEngineIsAzureSqlDw">
            <summary>
            Returns true if the target is an Azure SQL DW database
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SetTargetServerInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Sets the target server info based on input SMO object
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SetTargetServerInfo(Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.Boolean)">
            <summary>
            Sets the target server info based on input SMO object, if not dirty OR we force this operation
            </summary>
            <param name="o"></param>
            <param name="forced"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.#ctor(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Constructor
            </summary>
            <param name="Obj">Object to script</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.Behavior">
            <summary>
            Gets or sets ScriptBehaviour
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.ContinueOnScriptingError">
            <summary>
            Gets or sets should execution continue on scripting error
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SystemObjects">
            <summary>
            Gets or sets system objects are scripted or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.IgnoreDependencyError">
            <summary>
            Gets or sets should dependency error get ignored
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.DependentObjects">
            <summary>
            Gets or sets dependent objects are scripted or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.SfcChildren">
            <summary>
            Gets or sets sfc children are scripted or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.TargetServerVersionInternal">
            <summary>
            The server version on which the scripts will run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.TargetServerVersion">
            <summary>
            The server version on which the scripts will run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.TargetDatabaseEngineType">
            <summary>
            The server database engine type on which the scripts will run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.TargetDatabaseEngineEdition">
            <summary>
            The server database engine type on which the scripts will run.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.IncludeScripts">
            <summary>
            Gets  additional script preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.Security">
            <summary>
            Gets  security preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.Storage">
            <summary>
            Gets  storage preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.Table">
            <summary>
            Gets  table preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.DataType">
            <summary>
            Gets  datatype preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.Data">
            <summary>
            Gets  data preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.Agent">
            <summary>
            Gets  agent preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingPreferences.Mail">
            <summary>
            Gets  mail preferences
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences">
            <summary>
            Class for additional scripts
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.Data">
            <summary>
            Gets or sets data is included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.Permissions">
            <summary>
            Gets or sets permissions are included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.ExistenceCheck">
            <summary>
            Gets or sets existence check is added or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.Header">
            <summary>
            Gets or sets descriptive header is included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.ScriptingParameterHeader">
            <summary>
            Whether the header containing information about the scripting parameters is included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.SchemaQualify">
            <summary>
            Gets or sets object name are schema qualified or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.SchemaQualifyForeignKeysReferences">
            <summary>
            Gets or sets referenced table name are schema qualified or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.ExtendedProperties">
            <summary>
            Gets or sets extended properties are scripted or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.Collation">
            <summary>
            Gets or sets collation details are included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.Owner">
            <summary>
            Gets or sets owner script in included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.DatabaseContext">
            <summary>
            Gets or sets use database script are included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.Associations">
            <summary>
            Gets or sets binding memberships are included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.AnsiPadding">
            <summary>
            Gets or sets ansi padding scripts are included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.Ddl">
            <summary>
            Gets or sets metadata script are included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.IncludeScriptPreferences.CreateDdlTriggerDisabled">
            <summary>
            Gets or sets DDL Triggers are created disabled or not
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SecurityPreferences">
            <summary>
            Class for security related preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPreferences.ExecuteAs">
            <summary>
            Gets or sets execute as is included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SecurityPreferences.Sid">
            <summary>
            Gets or sets security identifier is included or not
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.MailPreferences">
            <summary>
            Class for mail related preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.MailPreferences.Accounts">
            <summary>
            Gets or sets mail accounts are included or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.MailPreferences.Principals">
            <summary>
            Gets or set mail account principals are included or not
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.AgentPreferences">
            <summary>
            Class for agenet related preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AgentPreferences.AlertJob">
            <summary>
            Gets or sets include Alert job
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AgentPreferences.JobId">
            <summary>
            Gets or sets include job id
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.AgentPreferences.Notify">
            <summary>
            Gets or sets include notifications
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.StoragePreferences">
            <summary>
            Class for storage related preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoragePreferences.FileStreamFileGroup">
            <summary>
            Gets or sets include filestream filegroups
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoragePreferences.FileStreamColumn">
            <summary>
            Gets or sets include filestream column
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoragePreferences.FileStream">
            <summary>
            Gets or sets whether filestream features are scripted or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoragePreferences.PartitionSchemeInternal">
            <summary>
            Gets or sets partitioning scheme behaviour
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoragePreferences.PartitionScheme">
            <summary>
            Gets or sets partitioning scheme behaviour
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoragePreferences.DataCompression">
            <summary>
            Gets or sets Data Compression
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.StoragePreferences.FileGroup">
            <summary>
            Gets or sets to include filegroup script
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DataPreferences">
            <summary>
            Class for data related preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataPreferences.ChangeTracking">
            <summary>
            Gets or sets include ChangeTracking
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataPreferences.OptimizerData">
            <summary>
            Gets or sets include OptimizerData
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.TablePreferences">
            <summary>
            Class for table related preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TablePreferences.SystemNamesForConstraints">
            <summary>
            Gets or sets to include system names for constraints
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TablePreferences.ConstraintsWithNoCheck">
            <summary>
            Gets or sets to include NO CHECK for constraints
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.TablePreferences.Identities">
            <summary>
            Gets or sets to script identity or not
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DataTypePreferences">
            <summary>
            Class for datatype related preferences
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataTypePreferences.UserDefinedDataTypesToBaseType">
            <summary>
            Gets or sets user defined data types are converted to base type
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataTypePreferences.TimestampToBinary">
            <summary>
            Gets or sets timestamp is converted to binary
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.DataTypePreferences.XmlNamespaces">
            <summary>
            Gets or sets XmlNamespaces are included for data types
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptMaker">
            <summary>
            Provides methods to get SMO objects' scripts
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptMaker.writer">
            <summary>
            Writer
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptMaker.discoverer">
            <summary>
            Discoverer
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptMaker.creatingDictionary">
            <summary>
            Dictionary to store creating object references
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptMaker.scriptContainerFactory">
            <summary>
            Dictionary to store scriptcontainers
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.#ctor(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Server Based constructor
            </summary>
            <param name="server">Server</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Script(Microsoft.SqlServer.Management.Smo.SqlSmoObject[],Microsoft.SqlServer.Management.Smo.ISmoScriptWriter)">
            <summary>
            Script out object scripts to writer
            </summary>
            <param name="objects">Objects to be scripted</param>
            <param name="writer">Writer</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Script(Microsoft.SqlServer.Management.Smo.SqlSmoObject[])">
            <summary>
            Script out object script to Stringcollection
            </summary>
            <param name="objects">Objects to script</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Script(Microsoft.SqlServer.Management.Sdk.Sfc.Urn[],Microsoft.SqlServer.Management.Smo.ISmoScriptWriter)">
            <summary>
            Script out the object script to writer
            </summary>
            <param name="urns">Objects' urns</param>
            <param name="writer">Writer</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Script(Microsoft.SqlServer.Management.Sdk.Sfc.Urn[])">
            <summary>
            Script out object script to StringCollection
            </summary>
            <param name="urns">Objects' urns</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Script(Microsoft.SqlServer.Management.Smo.UrnCollection,Microsoft.SqlServer.Management.Smo.ISmoScriptWriter)">
            <summary>
            Script out object script to writer
            </summary>
            <param name="list">UrnCollection wiht objects' urns</param>
            <param name="writer">Writer</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Script(Microsoft.SqlServer.Management.Smo.UrnCollection)">
            <summary>
            Script out object script to StringCollection
            </summary>
            <param name="list">UrnCollection wiht objects' urns</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.ScriptWorker(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn},Microsoft.SqlServer.Management.Smo.ISmoScriptWriter)">
            <summary>
            Worker Method
            </summary>
            <param name="urns"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.OnPrefetchBatchEvent(System.Object,Microsoft.SqlServer.Management.Smo.PrefetchBatchEventArgs)">
            <summary>
            Method to initialize ScriptContainerFactory if required
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.BucketizeUrns(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn},System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Bucketizes input list of urns based on database name
            </summary>
            <param name="urns"></param>
            <param name="serverObjectList"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.SetupDiscoverer">
            <summary>
            Assign SmoDependencyDiscoverer to discoverer
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.OnChildrenDiscovery(System.Object,Microsoft.SqlServer.Management.Smo.ChildrenDiscoveryEventArgs)">
            <summary>
            Method to store all discovered children and parent into scriptcontainer factory if required
            Also collapse the unique and primary keys into table script if possible
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.AddIndexToTablePropagationList(Microsoft.SqlServer.Management.Smo.Index)">
            <summary>
            Method to verify if index script can be combined with table script
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.FilterUrns(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Include/Exclude objects based on filter
            </summary>
            <param name="discoveredObjects"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Discover(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Perform dependency discovery
            </summary>
            <param name="urns"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Order(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Executable Order of the objects
            </summary>
            <param name="filteredObjects"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.VerifyInput(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Verify input is scriptable
            </summary>
            <param name="urns"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.ScriptCreateObjects(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Call Object's script create
            </summary>
            <param name="urns"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.ScriptDatabaseContextToWriter(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Smo.ScriptingPreferences,System.Boolean)">
            <summary>
            Script object's databasecontext
            </summary>
            <param name="obj"></param>
            <param name="sp"></param>
            <param name="isScriptingPermission"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.ScriptDropObjects(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Call object's drop script
            </summary>
            <param name="urns"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.ScriptAlterObjects(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Call object's alter script
            </summary>
            <param name="urns"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.IsSystemObject(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Check if object is system object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.Scriptable(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Verify Object is scriptable
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptMaker.CheckForConflictiongPreferences">
            <summary>
            Check for conflicting prefernces
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptMaker.Server">
            <summary>
            Server of objects to be scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptMaker.Prefetch">
            <summary>
            Prefetch objects scripted or not
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptMaker.SourceDatabaseEngineEdition">
            <summary>
            Database engine edition of the source 
            </summary>
        </member>
        <member name="E:Microsoft.SqlServer.Management.Smo.ScriptMaker.ScriptingError">
            <summary>
            Event to be fired in case of error while scripting
            </summary>
        </member>
        <member name="E:Microsoft.SqlServer.Management.Smo.ScriptMaker.ObjectScripting">
            <summary>
            Event to be fired after every object gets scripted
            </summary>
        </member>
        <member name="E:Microsoft.SqlServer.Management.Smo.ScriptMaker.ScriptingProgress">
            <summary>
            Event to be fired after every stage of scripting
            </summary>
        </member>
        <member name="E:Microsoft.SqlServer.Management.Smo.ScriptMaker.Retry">
            <summary>
            Event to be fired after scripting failure
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptMaker.Preferences">
            <summary>
            ScriptingPreferences for scripts generated
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptMaker.Filter">
            <summary>
            The filter to apply before scripting
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.CreatingObjectDictionary.objectsStored">
            <summary>
            Dictionary to store creating object references
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CreatingObjectDictionary.Add(Microsoft.SqlServer.Management.Smo.SqlSmoObject)">
            <summary>
            Add object to dictionary
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CreatingObjectDictionary.SmoObjectFromUrn(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Get Smo object from urn
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.CreatingObjectDictionary.ContainsKey(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Returns true if key is in the dictionary
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectScriptingEventHandler">
            <summary>
            Delegate to handle object scripting progress
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectScriptingEventArgs">
            <summary>
            Object scripting progress event arguments class
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectScriptingEventArgs.Current">
            <summary>
            The urn of current object which was scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectScriptingEventArgs.Original">
            <summary>
            The original urn scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectScriptingEventArgs.CurrentCount">
            <summary>
            The current count of objects already scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectScriptingEventArgs.Total">
            <summary>
            Total count of object to be scripted
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ObjectScriptingEventArgs.ScriptType">
            <summary>
            Type of Script
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ObjectScriptingType">
            <summary>
            Enumeration for Script Type
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ObjectScriptingType.None">
            <summary>
            No Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ObjectScriptingType.Object">
            <summary>
            Only Object Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ObjectScriptingType.Data">
            <summary>
            Data Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ObjectScriptingType.OwnerShip">
            <summary>
            Ownership Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ObjectScriptingType.Association">
            <summary>
            Association Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ObjectScriptingType.Permission">
            <summary>
            Permission Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ObjectScriptingType.Comment">
            <summary>
            Comment Script
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ObjectScriptingType.All">
            <summary>
            All types of Script
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptingProgressEventHandler">
            <summary>
            Delegate to handle report overall scripting progress
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptingProgressEventArgs">
            <summary>
            Overall scripting progress event arguments class
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingProgressEventArgs.Urns">
            <summary>
            List of Urns
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ScriptingProgressEventArgs.ProgressStage">
            <summary>
            ProgressStage
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptingProgressStages">
            <summary>
            Enumeration for Scripting Progress stages
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptingProgressStages.VerificationDone">
            <summary>
            Verification completed
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptingProgressStages.DiscoveryDone">
            <summary>
            Dependency discovery done
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptingProgressStages.FilteringDone">
            <summary>
            Filtering done
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptingProgressStages.OrderingDone">
            <summary>
            Ordering done
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ScriptingProgressStages.ScriptingCompleted">
            <summary>
            Scripting Completed
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.RetryRequestedEventHandler">
            <summary>
            Delegate to handle retrying of failed operation
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.RetryRequestedEventArgs">
            <summary>
            Retry event arguments
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RetryRequestedEventArgs.ScriptingPreferences">
            <summary>
            Scripting preferences used to script this object, or retried with if changed.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RetryRequestedEventArgs.ShouldRetry">
            <summary>
            Should this scripting operation be retried
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RetryRequestedEventArgs.PreText">
            <summary>
            Text which should be included before the script generated by the retry.
            This is used for informational comments.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.RetryRequestedEventArgs.PostText">
            <summary>
            Text which should be included after the script generated by the retry.
            This is used for information comments.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ScriptStringBuilder">
            <summary>
            Simple class for constructing TSQL statements with variable numbers of arguments in the argument list
            We could override SetParameter with type-specific overrides for value if we want to provide
            formatting services as well
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptStringBuilder.#ctor(System.String)">
            <summary>
            Constructs a new TSQL statement builder starting with the given statement
            </summary>
            <param name="baseStatement"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptStringBuilder.SetParameter(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new parameter to the statement or replace the existing value with a new one        
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="quoted">whether the value should be scripted with single quotes around it. Default is true.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptStringBuilder.ToString">
            <summary>
            Default ToString() method, scripts the statement and appends ";" rightafter
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ScriptStringBuilder.ToString(System.Boolean)">
            <summary>
            ToString() method which scripts this object with optional appending of  ";"
            after the statement itself
            </summary>
            <param name="scriptSemiColon">whether the semicolon should be scripted after the statement body</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SearchPropertyListConstants">
            <summary>
             static internal class to isolate the DDL changes
             related to SearchPropertyList
             </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyListValidator.AddMatchingRowForName(System.String,System.Int32)">
            <summary>
             add the rowId to mapped rows of searchPropertyName 
            </summary>
            <param name="searchPropertyName"></param>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyListValidator.RemoveMatchingRowForName(System.String,System.Int32)">
            <summary>
             remove the rowId from mapped rows of searchPropertyName 
            </summary>
            <param name="searchPropertyName"></param>
            <param name="rowId"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyListValidator.AddMatchingRowForGuidIntId(System.String,System.Int32)">
            <summary>
             add the rowId to mapped rows of Guid+IntId 
            </summary>
            <param name="searchPropertyName"></param>
            <param name="rowId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyListValidator.RemoveMatchingRowForGuidIntId(System.String,System.Int32)">
            <summary>
             remove the rowId from mapped rows of Guid+IntId 
            </summary>
            <param name="searchPropertyName"></param>
            <param name="rowId"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SearchPropertyListValidator.SetGridValidationState">
            <summary>
              for now, setting to only one of the errors (because of a New Dialog Framework Issue)
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SearchPropertyListValidator.ValidationError">
            <summary>
              Enumeration of Errors for each of the fields of Search Properties Table
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SecurityUtils">
            <summary>
            Provides Security domain Utility methods.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityUtils.ScriptRandomPwd(System.Text.StringBuilder)">
            <summary>
            Scripts Random password for Shiloh and earlier in Login and for all version in ApplicationRoles.
            </summary>
            <param name="pwdGenScript"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SecurityUtils.GenerateRandomPassword">
            <summary>
            uses a random number generator to generate a cryptographically 
            strong password</summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SequenceExtender">
            <summary>
             Represents sql server SequenceExtender object
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SequenceExtender.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SequenceExtender.#ctor(Microsoft.SqlServer.Management.Smo.Sequence)">
            <summary>
            Constructor
            </summary>
            <param name="sequence"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SequenceExtender.Validate(System.String,System.Object[])">
            <summary>
             Validate the values
            </summary>
            <param name="methodName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.State">
            <summary>
            State
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.CurrentObject">
            <summary>
             Current SMO Object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.Name">
            <summary>
             Name
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.Schema">
            <summary>
             Schema
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.DatabaseName">
            <summary>
             DatabaseName
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.ConnectionContext">
            <summary>
             ConnectionContext
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.DatatypeNames">
            <summary>
             Sequence Supported System data types
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.SelectedDatatypeName">
            <summary>
             SelectedDatatypeName
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.DefaultPrecision">
            <summary>
             DefaultPrecision
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.SelectedNumericPrecision">
            <summary>
             SelectedNumericPrecision
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.HasMinimumValue">
            <summary>
             HasMinimumValue
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.HasMaximumValue">
            <summary>
             HasMaximumValue
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.SequenceDatatypeName">
            <summary>
             SequenceDatatypeName
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.SequenceNumericPrecision">
            <summary>
             SequenceNumericPrecision
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.HasRestartValue">
            <summary>
             HasRestartValue
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.OriginalStartValue">
            <summary>
             OriginalStartValue
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.PermissionPageOnRunNow">
            <summary>
             PermissionPageOnRunNow
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.PermissionPageDataContainer">
            <summary>
             PermissionPageDataContainer
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.ExtendedPropertyPageOnRunNow">
            <summary>
             ExtendedPropertyPageOnRunNow
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.ExtendedPropertyPageCommitCellEdits">
            <summary>
             ExtendedPropertyPageCommitCellEdits
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.ExtendedPropertyPageDataContainer">
            <summary>
             ExtendedPropertyPageDataContainer
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SequenceExtender.ExtendedPropertyPageIsDirty">
            <summary>
             ExtendedPropertyPageIsDirty
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerEvents">
            <summary>
            Class that encapsulates all functionality
            related to Server Events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.#ctor(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ServerEvents.managementScope">
            <summary>
            Internal WMI connection object. It is used
            by all objects on this server to recieve
            Server Events.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.ServerEvents.connectionOptions">
            <summary>
            User-provided credentials to connect to WMI
            provider on the server.
            If no credentials are provided we will connect
            with current user context.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.GetEventSelection">
            <summary>
            Returns current selection of server events.
            This method returns a copy of event selection
            which can be modified and submitted back through
            SubscribeToEvents method.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.GetTraceEventSelection">
            <summary>
            Returns current selection of server trace events.
            This method returns a copy of event selection
            which can be modified and submitted back through
            SubscribeToEvents method.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.SubscribeToEvents(Microsoft.SqlServer.Management.Smo.ServerEventSet)">
            <summary>
            Subscribes to a set of events on a server.
            Notifications for those events will be raised
            using a default handler on this class.
            Each time this method is called a new set of
            events is added to already subscribed events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.SubscribeToEvents(Microsoft.SqlServer.Management.Smo.ServerEventSet,Microsoft.SqlServer.Management.Smo.ServerEventHandler)">
            <summary>
            Subscribes to a set of events on a server.
            Notifications for those events will be raised
            using an event handler provided to this method.
            Each time this method is called a new set of
            events is added to already subscribed events.
            If an event is already subscribed its exisitng
            handler will be replaced by the new handler passed
            to this method.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.SubscribeToEvents(Microsoft.SqlServer.Management.Smo.ServerTraceEventSet)">
            <summary>
            Subscribes to a set of trace events on a server.
            Notifications for those events will be raised
            using a default handler on this class.
            Each time this method is called a new set of
            events is added to already subscribed events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.SubscribeToEvents(Microsoft.SqlServer.Management.Smo.ServerTraceEventSet,Microsoft.SqlServer.Management.Smo.ServerEventHandler)">
            <summary>
            Subscribes to a set of trace events on a server.
            Notifications for those events will be raised
            using an event handler provided to this method.
            Each time this method is called a new set of
            events is added to already subscribed events.
            If an event is already subscribed its exisitng
            handler will be replaced by the new handler passed
            to this method.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.StartEvents">
            <summary>
            Starts event notifications. This method must be called to
            start receiving notifications.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.StopEvents">
            <summary>
            Stops event notifications.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.UnsubscribeFromEvents(Microsoft.SqlServer.Management.Smo.ServerEventSet)">
            <summary>
            Unsubscribes from a set of events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.UnsubscribeFromEvents(Microsoft.SqlServer.Management.Smo.ServerTraceEventSet)">
            <summary>
            Unsubscribes from a set of trace events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.UnsubscribeAllEvents">
            <summary>
            Unsubscribes from all events and releases all
            memory allocated for events subscriptions.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.InitializeServerEvent">
            <summary>
            Allocated event helper class for server events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ServerEvents.InitializeServerTraceEvent">
            <summary>
            Allocated event helper class for server trace events.
            </summary>
        </member>
        <member name="E:Microsoft.SqlServer.Management.Smo.ServerEvents.ServerEvent">
            <summary>
            A default event handler. Add your handlers
            here in order to recieve notifiactions.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerEventHandler">
            <summary>
            Handler prototype for all server events.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerEventArgs">
            <summary>
            Argument class used by ServerEventHandler.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.EventsWorkerBase">
            <summary>
            Class that handles subscribing and routing
            of all server events. Used by numer of public
            SMO classes.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventsWorkerBase.GetEventSelection">
            <summary>
            Returns currrent selection of events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventsWorkerBase.SubscribeToEvents(Microsoft.SqlServer.Management.Smo.EventSetBase,Microsoft.SqlServer.Management.Smo.ServerEventHandler)">
            <summary>
            
            </summary>
            <param name="Target">SMO object that is a target of the subscription.</param>
            <param name="events"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventsWorkerBase.GetEventHandlerKey(Microsoft.SqlServer.Management.Smo.ServerEventHandler)">
            <summary>
            Search through all event handlers and check if 
            we do not have that one already. If so return its
            key object, otherwise add new handler to the collection.
            </summary>
            <param name="eventHandler">A handler to find</param>
            <returns>An object that is used as a key to identify the handler.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventsWorkerBase.OnEventArrived(System.Object,System.Management.EventArrivedEventArgs)">
            <summary>
            This is the main event handler that recieves all WMI events
            and dispatches then to other event handlers based on 
            the event class name.
            Note that this method is usually called on a background thread,
            different from the one that creates all the subscriptions.
            User's event handler will be also called on that thread.
            eventSubscriptions and eventHandler collections are protected
            agains multi-thread use like in this scenario (one writer, multiple
            readers).
            </summary>
            <param name="sender">Sender object. This is ManagementEventWatcher object.</param>
            <param name="args">Arument class that contains the event.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ServerEventsWorker">
            <summary>
            Specialized class for Server object events.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DatabaseEventsWorker">
            <summary>
            Specialized class for Database object events.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.ObjectEventsWorker.GetEventClass(System.Int32)">
            <summary>
            This override provides a special handling of
            event class name for 'Object' enum values.
            In this case event class name is concatenated
            from target class name and DROP_ or ALTER_
            prefix.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.EventProperty">
            <summary>
            A name-value type of class that holds a single event property.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventProperty.#ctor(System.String,System.Object)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.EventPropertyCollection">
            <summary>
            A specialized name-object collection (dictionary)
            used for event properties.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventPropertyCollection.#ctor(System.Management.PropertyDataCollection)">
            <summary>
            Internal constructor that fills in the collection from the
            WMI property data collection.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventPropertyCollection.ConvertToDateTime(System.String)">
            <summary>
            Converts a date and time encoded in a string into
            a DateTime object.
            The string representation is as follows:
                yyyymmddhhmmss.mls
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.EventHandlerList">
            <summary>
            Provides a simple list of delegates.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventHandlerList.AddHandler(System.Object,System.Delegate)">
            <summary>
            Combines a delegate with existing one for hte same key
            or adds a new one.
            </summary>
            <param name="key">A key that identifies a delegate</param>
            <param name="value">A new delegate value</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventHandlerList.RemoveHandler(System.Object,System.Delegate)">
            <summary>
            Removes a delegate from the collection.
            </summary>
            <param name="key">A key that identifies a delegate</param>
            <param name="value">A delegate value to remove</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventHandlerList.FindHandler(System.Delegate)">
            <summary>
            Does reverse lookup, i.e. finds a key for the 
            delegate.
            </summary>
            <param name="value">A delegate to look for.</param>
            <returns>Returns a key that represents this delegate.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.EventHandlerList.Dispose">
            <summary>
            Implements IDisposable interface
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.EventHandlerList.Item(System.Object)">
            <summary>
            Gets or sets the delegate for the specified key.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerRoleExtender.OwnerForUI">
            <summary>
            This property is used in Server Role relational engine task UI. If someone sets Owner property
            to string.Empty, that means Owner is dirty and is not null. At that point SMO also scripts
            the Authorization-part of create T-SQL. Hence, we set Owner property to 'null' in that case, just 
            before Create() in order to skip scripting Authorization-part of Create T-SQL.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerRoleExtender.GeneralPageOnRunNow">
            <summary>
            Property to access the General Page's OnRunNow method.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerRoleExtender.ServerRoleNameHasMembershipHash">
            <summary>
            For every server role name key, value = true means a new membership is added
            and value = false means an existing membership is dropped.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.ServerRoleExtender.MemberNameIsMemberHash">
            <summary>
            For every member name key, value = true means a new member is added
            and value = false means an existing member is dropped.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SfcResolverHelper.GetDatabase(System.Object)">
            <summary>
            Get the root object of a domain instance. Should work on all types of domains that implement .Parent on objects
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SfcResolverHelper.GetDataType(System.Object)">
            <summary>
            Returns DataType
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedDataTypeResolver">
            <summary>
            Custom resolver for DataType::UserDefinedDataType
            TODO: implement resolvers for other types (note that the URN resolver can be generic for all data types)
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedTypeResolver">
            <summary>
            Custom resolver for DataType::UserDefinedType
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserDefinedTableTypeResolver">
            <summary>
            Custom resolver for DataType::UserDefinedTableType
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SchemaCustomResolver">
            <summary>
            Custom resolver for Schema
            We need a custom resolver as not all schema based objects live under Database
            For example service broker objects have an intermediate object
            so we cannot resolve using a fixed template
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SingleFileWriter">
            <summary>
            Represents the class used to write scripts of database objects.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SingleFileWriter.currentContext">
            <summary>
            Current database context as string.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.CheckValidFileName(System.String)">
            <summary>
            Checks the filename to verify that it does not contain
            invalid characters and that the path exists.
            </summary>
            <param name="path">A string value that contains the path to the file.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            T:Microsoft.SqlServer.Management.Smo.SingleFileWriter class.
            </summary>
            <param name="path">A string value that contains the path to the file.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the
            T:Microsoft.SqlServer.Management.Smo.SingleFileWriter class.
            </summary>
            <param name="path">A string value that contains the path to the file.</param>
            <param name="appendToFile">A Boolean value that indicates whether
            or not to append data to the file.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the
            T:Microsoft.SqlServer.Management.Smo.SingleFileWriter class.
            </summary>
            <param name="path">A string value that contains the path to the file.</param>
            <param name="appendToFile">A Boolean value that indicates whether
            or not to append data to the file.</param>
            <param name="encoding">The encoding type to be used for writing to the file.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the
            T:Microsoft.SqlServer.Management.Smo.SingleFileWriter class.
            </summary>
            <param name="path">A string value that contains the path to the file.</param>
            <param name="encoding">The encoding type to be used for writing to the file.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.ScriptObject(System.Collections.Generic.IEnumerable{System.String},Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes the script for a database object.
            </summary>
            <param name="script">A collection of string values that contain
            the scripts</param>
            <param name="obj">The database object to script.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.ScriptData(System.Collections.Generic.IEnumerable{System.String},Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes the script for a data table.
            </summary>
            <param name="dataScript">The scripts collection to which
            the data table script will be written.</param>
            <param name="table">The table to script.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.ScriptContext(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes the USE [Database] segment of the script.
            </summary>
            <param name="databaseContext">The database context as string.</param>
            <param name="obj">An T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.Close">
            <summary>
            Disposes the stream writer.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SingleFileWriter.Dispose">
            <summary>
            Disposes the stream writer.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SingleFileWriter.BatchTerminator">
            <summary>
            Gets a string that will be written after every batch.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SingleFileWriter.ScriptBatchTerminator">
            <summary>
            Gets or sets a Boolean value that determines whether to
            script batch terminator after every batch or not.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SingleFileWriter.InsertBatchSize">
            <summary>
            Gets or sets the number of insert statements to wait before batch terminator.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SingleFileWriter.Header">
            <summary>
            The header string to insert at the beginning of the script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StringComparer.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="collation">SQL Server collation name</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StringComparer.ChangeCollation(System.String,System.Int32)">
            <summary>
            Change the comparer for the new collation
            </summary>
            <param name="newCollation"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.StringComparer.Compare(System.Object,System.Object)">
            <summary>
            The IComparer implementation
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer">
            <summary>
            Class to which finds referenced,refrencing objects and children
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.filteredUrnTypes">
            <summary>
            Urn types to be excluded while discovering children
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.creatingDictionary">
            <summary>
            Dictionary to store creating state objects' urn
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.#ctor(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Initialize with server
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.Discover(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Discover the dependencies of given input urns
            </summary>
            <param name="urns">input urns</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.SfcChildrenDiscovery(System.Collections.Generic.HashSet{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Discover Children using propagate info
            </summary>
            <param name="discoveredUrns"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.GetScriptableChildren(System.Collections.Generic.List{Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateInfo},Microsoft.SqlServer.Management.Smo.SqlSmoObject.PropagateAction)">
            <summary>
            Recursively Get all children using propagateinfo
            </summary>
            <param name="propInfoList"></param>
            <param name="propagateAction"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.GetPropagateAction">
            <summary>
            Gets Propagate action for children
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.ReferenceDiscovery(System.Collections.Generic.HashSet{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Discover reference objects using DependencyWalker
            </summary>
            <param name="urns"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.DiscoverSupported(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Verify Object is Supported by dependency discovery
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.Preferences">
            <summary>
            Create order or drop order
            </summary>
        </member>
        <member name="E:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.ChildrenDiscovery">
            <summary>
            Event to be fired after every list of sfc children get discovered for object
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoDependencyDiscoverer.Server">
            <summary>
            Server for the urns provided
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ChildrenDiscoveryEventHandler">
            <summary>
            Delegate to handle children discovery progress
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.ChildrenDiscoveryEventArgs">
            <summary>
            Children discovery progress event arguments class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer">
            <summary>
            Class to order the objects in executable order
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.Order(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Order the list of input urns
            </summary>
            <param name="urns">input urns</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.SortedList">
            <summary>
            Sorts the type dictionary's keys  and returns the result of sorting
            VSTS # 1167567, for each clustered index, if possible, Adjust the sorting order by inserting them immediatly after their parent objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.StoreInDictionary(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn},Microsoft.SqlServer.Management.Sdk.Sfc.Urn@)">
            <summary>
             Store the input into a type dictionary
            </summary>
            <param name="urns"></param>
            <param name="outUrn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddToDictionary(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Helper to add to type dictionary
            </summary>
            <param name="urn"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.#ctor(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Initialize the class with server
            </summary>
            <param name="srv"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveDependencies">
            <summary>
            Resolves the dependency issues of various types
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveIndexDependencies">
            <summary>
            Combine primary key and unique key to table's script
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveIndexDependenciesWithoutFactory">
            <summary>
            Resolve index dependencies by accesing SMO objects
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveIndexDependenciesWithFactory">
            <summary>
            Resolve index dependencies using IndexScriptContainer
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddToTable(Microsoft.SqlServer.Management.Smo.Index)">
            <summary>
            Add index to table's propagation list
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.IsClustered(Microsoft.SqlServer.Management.Smo.Index)">
            <summary>
            Check if index isClustered or not
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.IsKey(Microsoft.SqlServer.Management.Smo.Index)">
            <summary>
            Check if index is primary or unique key
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.IsFilestreamTable(Microsoft.SqlServer.Management.Smo.Table,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Returns true if table script will contain filestream column
            </summary>
            <param name="table"></param>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.EmbedForeignKeysChecksDefaultConstraints">
            <summary>
            This function collapses foreign key,check,default constraints in table script for design mode
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddTableData(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Add the data entry for given tablelist in type dictionary
            </summary>
            <param name="tableList"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ConvertUrn(Microsoft.SqlServer.Management.Sdk.Sfc.Urn,System.String)">
            <summary>
            Append type to urn
            </summary>
            <param name="p"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddTableData">
            <summary>
            Add data entry for the tables in type dictionary
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddForeignKeys">
            <summary>
            Add foreign keys entry for the tables in type dictionary
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveTableViewUDFSprocDependencies">
            <summary>
            Resolve cyclic dependencies in table,view, udf and stored procedures(schema bound)
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveUDFDependencies(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Resolve UDF dependencies
            </summary>
            <param name="schemaboundList"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveSprocDependencies(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Resolve stored procedure dependencies
            </summary>
            <param name="schemaboundList"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveViewDependencies(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Resolve view dependencies
            </summary>
            <param name="schemaboundList"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveTemporalHistoryTableDependencies(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Resolve temporal tables' dependencies
            </summary>
            <param name="schemaboundList"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.GetList``1(System.String)">
            <summary>
            Generic method to get list of object for specified UrnSuffix
            </summary>
            <typeparam name="T"></typeparam>
            <param name="UrnSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveSecurityObjectDependencies">
            <summary>
            Resolve securtity object cycles if any  and database readonly statements
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ChangeUrns">
            <summary>
            Change the Urns of specific type mostly security object as we do not want permissions etc to be scripted with them
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.MarkUrnListSpecial(System.String)">
            <summary>
            Helper to change urn
            </summary>
            <param name="UrnSuffix"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddPermissions">
            <summary>
            Add the permissions entry for the security objects in the type dictionary
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddConvertedUrnsToList(System.Collections.Generic.List{Microsoft.SqlServer.Management.Sdk.Sfc.Urn},System.String,System.String)">
            <summary>
            Find UrnSuffix matching urns and convert them and add to the list
            </summary>
            <param name="List"></param>
            <param name="UrnSuffix"></param>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddOwner">
            <summary>
            Add the owner entry for the security objects in the type dictionary
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddServerAssociations">
            <summary>
             Add the associations entry for the security objects in the type dictionary
            </summary>
            <returns>true if there are server objects</returns>       
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddDatabaseReadOnly">
            <summary>
             Add the read only entry for the database objects in the type dictionary
            </summary>
            <returns>true if there are database objects</returns>       
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddDatabaseAssociations">
            <summary>
            Add the associations entry for the database security objects in the type dictionary
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveServerSecurityObjectDependencies">
            <summary>
            Resolve server security object cycles by checking for certificate or key logins
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.FindAndAddMasterSecurityObjects(System.String,System.String)">
            <summary>
            Find master databases's assembly , certificates and keys , and add them to type dictionary
            </summary>
            <param name="UrnSuffix"></param>
            <param name="urnTypeKey"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.ResolveDatabaseSecurityObjectDependencies">
            <summary>
            Resolve database security object cycles by checking for certificate or key users
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.AddCertificateKeyUserDependencies(System.String,System.String)">
            <summary>
            Switch assembly,certificate and asymmetric keys as dependant types as user might depend on them
            </summary>
            <param name="UrnSuffix"></param>
            <param name="urnKeyType"></param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoDependencyOrderer.Server">
            <summary>
            Server for the urns provided
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoAvaliablePropertyProvider.IsGraphSupported(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Indicate if this provider support the specified graph. If it is, 
            returns true, false otherwise.
            
            The method is called only one on the top most node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoAvaliablePropertyProvider.IsValueAvailable(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,System.String)">
            <summary>
            Checks whether a property value is available. If it is not, the comparison 
            is not performed; else, we consider it in the comparison.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.OnlineSmoAvailablePropertyProvider">
            <summary>
            This provider is added to support dac deployment on Sql Server 2005.
            There are certain properties that do not exist on certain versions of sql server, 
            for eg. IsReadOnly property of a stored proc parameter does not exist on 2005.
            We want to skip the comparison of a property if it does not exist on live server while detecting a drift.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.OnlineSmoAvailablePropertyProvider.IsGraphSupported(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Answers whether the graph is supported.
            Only supports ONLINE SMO graphs.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.OnlineSmoAvailablePropertyProvider.IsValueAvailable(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,System.String)">
            <summary>
            Answers if a property is available for a given node.
            If false is returned, the property is ignored during differencing.
            </summary>
            <param name="node"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoNodeAdapterProvider.IsGraphSupported(System.Object)">
            <summary>
            Indicate if this provider support the specified graph. If it is, 
            returns true, false otherwise.
            
            The method is called only one on the top most node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoNodeAdapterProvider.GetGraphAdapter(System.Object)">
            <summary>
            The method is called only one on the top most node of the graphs
            to be compared.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoCollectionSortingProvider.AreGraphsSupported(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleNode)">
            <summary>
            Indicate if this provider support the specified graph. If it is, 
            returns true, false otherwise.
            
            The method is called only one on the top most node of each graph.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoCollectionSortingProvider.GetComparer(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList)">
            <summary>
            Obtain a Comparer that compares the children of a pair of comparable lists.
            
            The caller should determine if the lists are comparable using AreListCompareable()
            method. It throws ArgumentException if the specified lists are not comparable.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoCollectionSortingProvider.AreListsComparable(Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList,Microsoft.SqlServer.Management.Sdk.Sfc.ISfcSimpleList)">
            <summary>
            It will return true if SMO can provide a comparer to compare both the input list.
            
            This method return false for these cases:
            1. When one of the list is empty
            2. Type of the objects in either of the list is not SqlSmoObject
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoSet`1">
            <summary>
                This custom implementaion is added 
                as .NET 2.0 does not have a Genertic Set
                TODO: Replace with more efficient implementation later
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoStringWriter">
            <summary>
            Represents the class used to write scripts of database objects.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoStringWriter.currentContext">
            <summary>
            The current database context as string.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoStringWriter.#ctor">
            <summary>
            Default Constructor that initializes a new instance of the
            T:Microsoft.SqlServer.Management.Smo.SmoStringWriter class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoStringWriter.ScriptObject(System.Collections.Generic.IEnumerable{System.String},Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes script for a database object.
            </summary>
            <param name="script">The collection of scripts to
            which the current script will be added.</param>
            <param name="obj">The T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn
            that will be scripted.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoStringWriter.ScriptData(System.Collections.Generic.IEnumerable{System.String},Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes script for a data table.
            </summary>
            <param name="dataScript">The collection of scripts to
            which the current script will be added.</param>
            <param name="table">The table to be scripted.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoStringWriter.ScriptContext(System.String,Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Writes the USE [Database] segment of the script.
            </summary>
            <param name="databaseContext">The database context as string.</param>
            <param name="obj">The T:Microsoft.SqlServer.Management.Sdk.Sfc.Urn
            that will be scripted.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoStringWriter.PrependHeaderIfNeeded">
            <summary>
            Prepends the header to the script string if it's the first in our collection.
            </summary>
            <returns></returns>
            <remarks>This is a workaround for the scripting since the SmoStringWriter
            doesn't append batch terminators itself (which all the other writer
            implementations do). Instead it's up to the caller to do that - for example
            in ObjectExplorer\ObjectExplorer\src\SqlScriptMenu.cs::WriteStringCollection
            But we don't want to add a batch terminator to the header so instead we'll just wait
            for the first script string to come in and then prefix it with the header
            at that point. This isn't ideal but it's the safest way without doing a
            significant refactoring of this class and how it deals with batch terminators</remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoStringWriter.FinalStringCollection">
            <summary>
            Gets or sets the output collection of an
            instance of T:Microsoft.SqlServer.Management.Smo.SmoStringWriter.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoStringWriter.Header">
            <summary>
            The header string to insert at the beginning of the script
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UrnTypeKey">
            <summary>
            Class to uniquely identify a object's type through urn
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UrnTypeKey.#ctor(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Initialize by getting urn type from a urn
            </summary>
            <param name="urn"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UrnTypeKey.GetUniqueUrnType(Microsoft.SqlServer.Management.Sdk.Sfc.Urn)">
            <summary>
            Get unique type
            </summary>
            <param name="urn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UrnTypeKey.#ctor(System.String)">
            <summary>
            Initialize using  a urn type key
            </summary>
            <param name="urnTypeKey"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UrnTypeKey.#ctor(System.String,System.String)">
            <summary>
            Initialize using urn type and urn's parent type
            </summary>
            <param name="urnType"></param>
            <param name="parentUrnType"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UrnTypeKey.GetUniqueSmoType(System.String,System.String)">
            <summary>
            Resolve issues with same urn type
            </summary>
            <param name="urnType"></param>
            <param name="parentUrnType"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoUrnFilter">
            <summary>
            This class implements Urn type based filtering
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoUrnFilter.filteredTypes">
            <summary>
            Collection of all the filtered urn types
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUrnFilter.Filter(System.Collections.Generic.IEnumerable{Microsoft.SqlServer.Management.Sdk.Sfc.Urn})">
            <summary>
            Filter the list of input urns which are in filtered urn types
            </summary>
            <param name="urns">input urns</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUrnFilter.#ctor(Microsoft.SqlServer.Management.Smo.Server)">
            <summary>
            Initialize SmoUrnFilter
            </summary>
            <param name="srv">Server for the urns to be filtered</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUrnFilter.AddFilteredType(System.String,System.String)">
            <summary>
            Add a urn type to filtering list
            </summary>
            <param name="urnType">urn type </param>
            <param name="parentType">urn type's parent</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUrnFilter.RemoveFilteredType(System.String,System.String)">
            <summary>
            Remove a urn type from filtering list
            </summary>
            <param name="urnType">urn type</param>
            <param name="parentType">urn type's parent</param>
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SmoUrnFilter.Server">
            <summary>
            Server for the urns provided to be filtered
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.IndexPropagateInfo">
            <summary>
            Class to bucketize indexes based on their types and clustering
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IndexPropagateInfo.#ctor(Microsoft.SqlServer.Management.Smo.IndexCollection)">
            <summary>
            Initializes with given index collection
            </summary>
            <param name="indexCollection"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.IndexPropagateInfo.PropagateInfo(System.Collections.ArrayList)">
            <summary>
            Add various indexes to  Propagateinfo 
            </summary>
            <param name="propInfo"></param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SmoUtility">
            <summary>
            Utility and helper methods for SMO
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUtility.IsSupportedObject(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Whether the specified type is supported by the specified server Version, Engine Type and Engine Edition.
            </summary>
            <param name="type"></param>
            <param name="serverVersion"></param>
            <param name="databaseEngineType"></param>
            <param name="databaseEngineEdition"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoUtility.ObjectSupportedBySqlDw">
            <summary>
            List of the objects supported by Sql Dw
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUtility.IsSupportedObject``1(Microsoft.SqlServer.Management.Smo.SqlSmoObject,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Checks if the specified type is supported by the <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/> and <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineType"/>
            of the root server for this object. If ScriptingPreferences are non-null will also check if specified type
            is supported by the <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/> and <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineType"/> of the target server.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="smoObject"></param>
            <param name="sp">Optional - If provided will also check if target server supports specified type</param>
            <returns>TRUE if the specified type is supported by the current connection and/or ScriptingPreferences</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUtility.IsSupportedObject(Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.Type,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Checks if the specified type is supported by the <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/>, <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineType"/>
            and <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineEdition"/> of the root server for this object. If ScriptingPreferences are non-null
            will also check if specified type is supported by the <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/>, <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineType"/>
            and <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineEdition"/> of the target server.
            </summary>
            <param name="smoObject"></param>
            <param name="type"></param>
            <param name="sp">Optional - If provided will also check if target server supports specified type</param>
            <returns>TRUE if the specified type is supported by the current connection and/or ScriptingPreferences</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUtility.ThrowIfNotSupported(Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.Type,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
             <summary>
             Checks if the specified type is supported by the <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/>, <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineType"/>
             and <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineEdition"/> of the root server for this object. If ScriptingPreferences are non-null
             will also check if specified type is supported by the <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/>, <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineType"/>
             and <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineEdition"/> of the target server.
            
             Throws an exception if either of these checks fail.
            
             </summary>
             <param name="smoObject"></param>
             <param name="type"></param>
             <param name="sp">Optional - If provided will also check if target server supports specified type</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUtility.ThrowIfNotSupported(Microsoft.SqlServer.Management.Smo.SqlSmoObject,System.Type,System.String,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
             <summary>
             Checks if the specified type is supported by the <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/>, <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineType"/>
             and <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineEdition"/> of the root server for this object. If ScriptingPreferences are non-null
             will also check if specified type is supported by the <see cref="T:Microsoft.SqlServer.Management.Common.ServerVersion"/>, <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineType"/>
             and <see cref="T:Microsoft.SqlServer.Management.Common.DatabaseEngineEdition"/> of the target server.
            
             Throws an exception with the specified message if either of these checks fail.
            
             </summary>
             <param name="smoObject"></param>
             <param name="type"></param>
             <param name="message">The exception message to display</param>
             <param name="sp"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUtility.GetMinimumSupportedVersion(System.Type,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Gets the minimum supported version of the specified type for the given engine type/engine edition.
            </summary>
            <param name="type"></param>
            <param name="databaseEngineType"></param>
            <param name="databaseEngineEdition"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoUtility.supportedOnPremVersions">
            <summary>
            The server versions we support for on-prem (box) databases
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SmoUtility.supportedCloudVersions">
            <summary>
            The server versions we support for cloud databases
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUtility.GetSupportedVersions(Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition)">
            <summary>
            Gets the list of supported server versions for the specified engine type and engine edition.
            </summary>
            <param name="dbEngineType"></param>
            <param name="dbEngineEdition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SmoUtility.EncodeStringCollectionAsComment(System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Encodes a string collection as a comment block.
            </summary>
            <param name="stringCollection">String collection object</param>
            <param name="headComment">Extra comment in the head of comment block</param>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.KeyEncryptionType">
            <summary>
             Specifies the type of encryption of a key.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.KeyEncryptionType.SymmetricKey">
            Encrypted by symmetric key.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.KeyEncryptionType.Certificate">
            Encrypted by certificate.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.KeyEncryptionType.Password">
            Encrypted by password.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.KeyEncryptionType.AsymmetricKey">
            Encrypted by asymmetric key.
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.KeyEncryptionType.Provider">
            Encryption by provider.
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption">
            <summary>
             This object is used to specify an encryption type.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption.#ctor(Microsoft.SqlServer.Management.Smo.KeyEncryptionType,System.String)">
            <summary>
            Parameterized constructor - populates properties from parameter values
            </summary>
            <param name="encryptionType"></param>
            <param name="value"></param>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption.KeyEncryptionType">
            Encryption type.
        </member>
        <member name="P:Microsoft.SqlServer.Management.Smo.SymmetricKeyEncryption.ObjectNameOrPassword">
            Name of certificate, symmetric key, asymmetric key, or password, or provider name 
            depending on the EncryptionType property. 
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.DurabilityTypeMap">
            <summary>
            The enumeration specifies the tsql equivalent of DurabilityType of hekaton tables for scripting
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DurabilityTypeMap.SCHEMA_ONLY">
            <summary>
            DurabilityType.SchemaOnly
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.DurabilityTypeMap.SCHEMA_AND_DATA">
            <summary>
            DurabilityType.SchemaAndData
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserPermission">
            <summary>
            Represents a permission that is being granted/revoked/denied to a user/login/role
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserPermission.GetScriptFields(System.Type,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.DatabaseEngineEdition,System.Boolean)">
            <summary>
            Returns the fields that will be needed to script this object.
            </summary>
            <param name="parentType">The type of the parent object</param>
            <param name="version">The version of the server</param>
            <param name="databaseEngineType">The database engine type of the server</param>
            <param name="databaseEngineEdition">The database engine edition of the server</param>
            <param name="defaultTextMode">indicates the text mode of the server. 
            If true this means only header and body are needed, otherwise all properties</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.UserPermission.GetRejectFields">
            <summary>
            Customizes the initialization mechanism to avoid requesting ColumnName.
            The enumerator query would have brought this in otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.UserPermission.PropertyMetadataProvider.versionCount">
            <summary>
            This is the number of properties available for each version of the Standalone SQL engine
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Management.Smo.UserPermission.PropertyMetadataProvider.cloudVersionCount">
            <summary>
            This is the number of properties available for each version of the Cloud SQL engine
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.UserPermissionCollection">
            <summary>
             Strongly typed list of MAPPED_TYPE objects
             Has strongly typed support for all of the methods of the sorted list class
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Management.Smo.VersionUtils">
            <summary>
                Helper class to handle various version-related checks
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.VersionUtils.IsSql13Azure12OrLater(Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.ServerVersion,Microsoft.SqlServer.Management.Smo.ScriptingPreferences)">
            <summary>
            Check whether the  server version is greater than or equal to SQL 13 or SQL 12 on Azure.
            </summary>
            <param name="currentDatabaseEngineType">current database engine type</param>
            <param name="currentServerVersion">current server version</param>
            <param name="sp">scripting preferences, if exists, to check target database engine type and taraget server version</param>
        </member>
        <member name="M:Microsoft.SqlServer.Management.Smo.VersionUtils.IsSql13Azure12OrLater(Microsoft.SqlServer.Management.Common.DatabaseEngineType,Microsoft.SqlServer.Management.Common.ServerVersion)">
            <summary>
            Check whether the  server version is greater than or equal to SQL 13 or SQL 12 on Azure.
            </summary>
            <param name="currentDatabaseEngineType">current database engine type</param>
            <param name="currentServerVersion">current server version</param>
        </member>
    </members>
</doc>
